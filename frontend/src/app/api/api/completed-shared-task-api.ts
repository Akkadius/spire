/* tslint:disable */
/* eslint-disable */
/**
 * Spire
 * Spire API documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: akkadius1@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CrudcontrollersBulkFetchByIdsGetRequest } from '../models';
// @ts-ignore
import { ModelsCompletedSharedTask } from '../models';
/**
 * CompletedSharedTaskApi - axios parameter creator
 * @export
 */
export const CompletedSharedTaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates CompletedSharedTask
         * @param {ModelsCompletedSharedTask} completedSharedTask CompletedSharedTask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompletedSharedTask: async (completedSharedTask: ModelsCompletedSharedTask, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'completedSharedTask' is not null or undefined
            if (completedSharedTask === null || completedSharedTask === undefined) {
                throw new RequiredError('completedSharedTask','Required parameter completedSharedTask was null or undefined when calling createCompletedSharedTask.');
            }
            const localVarPath = `/completed_shared_task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof completedSharedTask !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(completedSharedTask !== undefined ? completedSharedTask : {})
                : (completedSharedTask || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes CompletedSharedTask
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompletedSharedTask: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCompletedSharedTask.');
            }
            const localVarPath = `/completed_shared_task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets CompletedSharedTask
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedSharedTask: async (id: number, includes?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCompletedSharedTask.');
            }
            const localVarPath = `/completed_shared_task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets CompletedSharedTasks in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedSharedTasksBulk: async (body: CrudcontrollersBulkFetchByIdsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getCompletedSharedTasksBulk.');
            }
            const localVarPath = `/completed_shared_tasks/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists CompletedSharedTasks
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompletedSharedTasks: async (includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/completed_shared_tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (whereOr !== undefined) {
                localVarQueryParameter['whereOr'] = whereOr;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates CompletedSharedTask
         * @param {number} id Id
         * @param {ModelsCompletedSharedTask} completedSharedTask CompletedSharedTask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompletedSharedTask: async (id: number, completedSharedTask: ModelsCompletedSharedTask, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCompletedSharedTask.');
            }
            // verify required parameter 'completedSharedTask' is not null or undefined
            if (completedSharedTask === null || completedSharedTask === undefined) {
                throw new RequiredError('completedSharedTask','Required parameter completedSharedTask was null or undefined when calling updateCompletedSharedTask.');
            }
            const localVarPath = `/completed_shared_task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof completedSharedTask !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(completedSharedTask !== undefined ? completedSharedTask : {})
                : (completedSharedTask || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompletedSharedTaskApi - functional programming interface
 * @export
 */
export const CompletedSharedTaskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates CompletedSharedTask
         * @param {ModelsCompletedSharedTask} completedSharedTask CompletedSharedTask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompletedSharedTask(completedSharedTask: ModelsCompletedSharedTask, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCompletedSharedTask>>> {
            const localVarAxiosArgs = await CompletedSharedTaskApiAxiosParamCreator(configuration).createCompletedSharedTask(completedSharedTask, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes CompletedSharedTask
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompletedSharedTask(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await CompletedSharedTaskApiAxiosParamCreator(configuration).deleteCompletedSharedTask(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets CompletedSharedTask
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletedSharedTask(id: number, includes?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCompletedSharedTask>>> {
            const localVarAxiosArgs = await CompletedSharedTaskApiAxiosParamCreator(configuration).getCompletedSharedTask(id, includes, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets CompletedSharedTasks in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletedSharedTasksBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCompletedSharedTask>>> {
            const localVarAxiosArgs = await CompletedSharedTaskApiAxiosParamCreator(configuration).getCompletedSharedTasksBulk(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Lists CompletedSharedTasks
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompletedSharedTasks(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCompletedSharedTask>>> {
            const localVarAxiosArgs = await CompletedSharedTaskApiAxiosParamCreator(configuration).listCompletedSharedTasks(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates CompletedSharedTask
         * @param {number} id Id
         * @param {ModelsCompletedSharedTask} completedSharedTask CompletedSharedTask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompletedSharedTask(id: number, completedSharedTask: ModelsCompletedSharedTask, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCompletedSharedTask>>> {
            const localVarAxiosArgs = await CompletedSharedTaskApiAxiosParamCreator(configuration).updateCompletedSharedTask(id, completedSharedTask, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CompletedSharedTaskApi - factory interface
 * @export
 */
export const CompletedSharedTaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates CompletedSharedTask
         * @param {ModelsCompletedSharedTask} completedSharedTask CompletedSharedTask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompletedSharedTask(completedSharedTask: ModelsCompletedSharedTask, options?: any): AxiosPromise<Array<ModelsCompletedSharedTask>> {
            return CompletedSharedTaskApiFp(configuration).createCompletedSharedTask(completedSharedTask, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes CompletedSharedTask
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompletedSharedTask(id: number, options?: any): AxiosPromise<string> {
            return CompletedSharedTaskApiFp(configuration).deleteCompletedSharedTask(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets CompletedSharedTask
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedSharedTask(id: number, includes?: string, select?: string, options?: any): AxiosPromise<Array<ModelsCompletedSharedTask>> {
            return CompletedSharedTaskApiFp(configuration).getCompletedSharedTask(id, includes, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets CompletedSharedTasks in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedSharedTasksBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): AxiosPromise<Array<ModelsCompletedSharedTask>> {
            return CompletedSharedTaskApiFp(configuration).getCompletedSharedTasksBulk(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists CompletedSharedTasks
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompletedSharedTasks(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): AxiosPromise<Array<ModelsCompletedSharedTask>> {
            return CompletedSharedTaskApiFp(configuration).listCompletedSharedTasks(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates CompletedSharedTask
         * @param {number} id Id
         * @param {ModelsCompletedSharedTask} completedSharedTask CompletedSharedTask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompletedSharedTask(id: number, completedSharedTask: ModelsCompletedSharedTask, options?: any): AxiosPromise<Array<ModelsCompletedSharedTask>> {
            return CompletedSharedTaskApiFp(configuration).updateCompletedSharedTask(id, completedSharedTask, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCompletedSharedTask operation in CompletedSharedTaskApi.
 * @export
 * @interface CompletedSharedTaskApiCreateCompletedSharedTaskRequest
 */
export interface CompletedSharedTaskApiCreateCompletedSharedTaskRequest {
    /**
     * CompletedSharedTask
     * @type {ModelsCompletedSharedTask}
     * @memberof CompletedSharedTaskApiCreateCompletedSharedTask
     */
    readonly completedSharedTask: ModelsCompletedSharedTask
}

/**
 * Request parameters for deleteCompletedSharedTask operation in CompletedSharedTaskApi.
 * @export
 * @interface CompletedSharedTaskApiDeleteCompletedSharedTaskRequest
 */
export interface CompletedSharedTaskApiDeleteCompletedSharedTaskRequest {
    /**
     * id
     * @type {number}
     * @memberof CompletedSharedTaskApiDeleteCompletedSharedTask
     */
    readonly id: number
}

/**
 * Request parameters for getCompletedSharedTask operation in CompletedSharedTaskApi.
 * @export
 * @interface CompletedSharedTaskApiGetCompletedSharedTaskRequest
 */
export interface CompletedSharedTaskApiGetCompletedSharedTaskRequest {
    /**
     * Id
     * @type {number}
     * @memberof CompletedSharedTaskApiGetCompletedSharedTask
     */
    readonly id: number

    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof CompletedSharedTaskApiGetCompletedSharedTask
     */
    readonly includes?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof CompletedSharedTaskApiGetCompletedSharedTask
     */
    readonly select?: string
}

/**
 * Request parameters for getCompletedSharedTasksBulk operation in CompletedSharedTaskApi.
 * @export
 * @interface CompletedSharedTaskApiGetCompletedSharedTasksBulkRequest
 */
export interface CompletedSharedTaskApiGetCompletedSharedTasksBulkRequest {
    /**
     * body
     * @type {CrudcontrollersBulkFetchByIdsGetRequest}
     * @memberof CompletedSharedTaskApiGetCompletedSharedTasksBulk
     */
    readonly body: CrudcontrollersBulkFetchByIdsGetRequest
}

/**
 * Request parameters for listCompletedSharedTasks operation in CompletedSharedTaskApi.
 * @export
 * @interface CompletedSharedTaskApiListCompletedSharedTasksRequest
 */
export interface CompletedSharedTaskApiListCompletedSharedTasksRequest {
    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly includes?: string

    /**
     * Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly where?: string

    /**
     * Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly whereOr?: string

    /**
     * Group by field. Multiple conditions [.] separated Example: field1.field2
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly groupBy?: string

    /**
     * Rows to limit in response (Default: 10,000)
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly limit?: string

    /**
     * Order by [field]
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly orderBy?: string

    /**
     * Order by field direction
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly orderDirection?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof CompletedSharedTaskApiListCompletedSharedTasks
     */
    readonly select?: string
}

/**
 * Request parameters for updateCompletedSharedTask operation in CompletedSharedTaskApi.
 * @export
 * @interface CompletedSharedTaskApiUpdateCompletedSharedTaskRequest
 */
export interface CompletedSharedTaskApiUpdateCompletedSharedTaskRequest {
    /**
     * Id
     * @type {number}
     * @memberof CompletedSharedTaskApiUpdateCompletedSharedTask
     */
    readonly id: number

    /**
     * CompletedSharedTask
     * @type {ModelsCompletedSharedTask}
     * @memberof CompletedSharedTaskApiUpdateCompletedSharedTask
     */
    readonly completedSharedTask: ModelsCompletedSharedTask
}

/**
 * CompletedSharedTaskApi - object-oriented interface
 * @export
 * @class CompletedSharedTaskApi
 * @extends {BaseAPI}
 */
export class CompletedSharedTaskApi extends BaseAPI {
    /**
     * 
     * @summary Creates CompletedSharedTask
     * @param {CompletedSharedTaskApiCreateCompletedSharedTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompletedSharedTaskApi
     */
    public createCompletedSharedTask(requestParameters: CompletedSharedTaskApiCreateCompletedSharedTaskRequest, options?: any) {
        return CompletedSharedTaskApiFp(this.configuration).createCompletedSharedTask(requestParameters.completedSharedTask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes CompletedSharedTask
     * @param {CompletedSharedTaskApiDeleteCompletedSharedTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompletedSharedTaskApi
     */
    public deleteCompletedSharedTask(requestParameters: CompletedSharedTaskApiDeleteCompletedSharedTaskRequest, options?: any) {
        return CompletedSharedTaskApiFp(this.configuration).deleteCompletedSharedTask(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets CompletedSharedTask
     * @param {CompletedSharedTaskApiGetCompletedSharedTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompletedSharedTaskApi
     */
    public getCompletedSharedTask(requestParameters: CompletedSharedTaskApiGetCompletedSharedTaskRequest, options?: any) {
        return CompletedSharedTaskApiFp(this.configuration).getCompletedSharedTask(requestParameters.id, requestParameters.includes, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets CompletedSharedTasks in bulk
     * @param {CompletedSharedTaskApiGetCompletedSharedTasksBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompletedSharedTaskApi
     */
    public getCompletedSharedTasksBulk(requestParameters: CompletedSharedTaskApiGetCompletedSharedTasksBulkRequest, options?: any) {
        return CompletedSharedTaskApiFp(this.configuration).getCompletedSharedTasksBulk(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists CompletedSharedTasks
     * @param {CompletedSharedTaskApiListCompletedSharedTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompletedSharedTaskApi
     */
    public listCompletedSharedTasks(requestParameters: CompletedSharedTaskApiListCompletedSharedTasksRequest = {}, options?: any) {
        return CompletedSharedTaskApiFp(this.configuration).listCompletedSharedTasks(requestParameters.includes, requestParameters.where, requestParameters.whereOr, requestParameters.groupBy, requestParameters.limit, requestParameters.orderBy, requestParameters.orderDirection, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates CompletedSharedTask
     * @param {CompletedSharedTaskApiUpdateCompletedSharedTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompletedSharedTaskApi
     */
    public updateCompletedSharedTask(requestParameters: CompletedSharedTaskApiUpdateCompletedSharedTaskRequest, options?: any) {
        return CompletedSharedTaskApiFp(this.configuration).updateCompletedSharedTask(requestParameters.id, requestParameters.completedSharedTask, options).then((request) => request(this.axios, this.basePath));
    }
}
