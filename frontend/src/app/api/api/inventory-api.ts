/* tslint:disable */
/* eslint-disable */
/**
 * Spire
 * Spire API documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: akkadius1@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CrudcontrollersBulkFetchByIdsGetRequest } from '../models';
// @ts-ignore
import { ModelsInventory } from '../models';
/**
 * InventoryApi - axios parameter creator
 * @export
 */
export const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates Inventory
         * @param {ModelsInventory} inventory Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInventory: async (inventory: ModelsInventory, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventory' is not null or undefined
            if (inventory === null || inventory === undefined) {
                throw new RequiredError('inventory','Required parameter inventory was null or undefined when calling createInventory.');
            }
            const localVarPath = `/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof inventory !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(inventory !== undefined ? inventory : {})
                : (inventory || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes Inventory
         * @param {number} id charid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInventory: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteInventory.');
            }
            const localVarPath = `/inventory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Inventories in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventoriesBulk: async (body: CrudcontrollersBulkFetchByIdsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getInventoriesBulk.');
            }
            const localVarPath = `/inventories/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Inventory
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory: async (id: number, includes?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInventory.');
            }
            const localVarPath = `/inventory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists Inventories
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventories: async (includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/inventories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (whereOr !== undefined) {
                localVarQueryParameter['whereOr'] = whereOr;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates Inventory
         * @param {number} id Id
         * @param {ModelsInventory} inventory Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: async (id: number, inventory: ModelsInventory, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateInventory.');
            }
            // verify required parameter 'inventory' is not null or undefined
            if (inventory === null || inventory === undefined) {
                throw new RequiredError('inventory','Required parameter inventory was null or undefined when calling updateInventory.');
            }
            const localVarPath = `/inventory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof inventory !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(inventory !== undefined ? inventory : {})
                : (inventory || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryApi - functional programming interface
 * @export
 */
export const InventoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates Inventory
         * @param {ModelsInventory} inventory Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInventory(inventory: ModelsInventory, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsInventory>>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).createInventory(inventory, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes Inventory
         * @param {number} id charid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInventory(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).deleteInventory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets Inventories in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInventoriesBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsInventory>>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).getInventoriesBulk(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets Inventory
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInventory(id: number, includes?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsInventory>>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).getInventory(id, includes, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Lists Inventories
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInventories(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsInventory>>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).listInventories(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates Inventory
         * @param {number} id Id
         * @param {ModelsInventory} inventory Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInventory(id: number, inventory: ModelsInventory, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsInventory>>> {
            const localVarAxiosArgs = await InventoryApiAxiosParamCreator(configuration).updateInventory(id, inventory, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InventoryApi - factory interface
 * @export
 */
export const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates Inventory
         * @param {ModelsInventory} inventory Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInventory(inventory: ModelsInventory, options?: any): AxiosPromise<Array<ModelsInventory>> {
            return InventoryApiFp(configuration).createInventory(inventory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes Inventory
         * @param {number} id charid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInventory(id: number, options?: any): AxiosPromise<string> {
            return InventoryApiFp(configuration).deleteInventory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Inventories in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventoriesBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): AxiosPromise<Array<ModelsInventory>> {
            return InventoryApiFp(configuration).getInventoriesBulk(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Inventory
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(id: number, includes?: string, select?: string, options?: any): AxiosPromise<Array<ModelsInventory>> {
            return InventoryApiFp(configuration).getInventory(id, includes, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists Inventories
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventories(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): AxiosPromise<Array<ModelsInventory>> {
            return InventoryApiFp(configuration).listInventories(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates Inventory
         * @param {number} id Id
         * @param {ModelsInventory} inventory Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory(id: number, inventory: ModelsInventory, options?: any): AxiosPromise<Array<ModelsInventory>> {
            return InventoryApiFp(configuration).updateInventory(id, inventory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createInventory operation in InventoryApi.
 * @export
 * @interface InventoryApiCreateInventoryRequest
 */
export interface InventoryApiCreateInventoryRequest {
    /**
     * Inventory
     * @type {ModelsInventory}
     * @memberof InventoryApiCreateInventory
     */
    readonly inventory: ModelsInventory
}

/**
 * Request parameters for deleteInventory operation in InventoryApi.
 * @export
 * @interface InventoryApiDeleteInventoryRequest
 */
export interface InventoryApiDeleteInventoryRequest {
    /**
     * charid
     * @type {number}
     * @memberof InventoryApiDeleteInventory
     */
    readonly id: number
}

/**
 * Request parameters for getInventoriesBulk operation in InventoryApi.
 * @export
 * @interface InventoryApiGetInventoriesBulkRequest
 */
export interface InventoryApiGetInventoriesBulkRequest {
    /**
     * body
     * @type {CrudcontrollersBulkFetchByIdsGetRequest}
     * @memberof InventoryApiGetInventoriesBulk
     */
    readonly body: CrudcontrollersBulkFetchByIdsGetRequest
}

/**
 * Request parameters for getInventory operation in InventoryApi.
 * @export
 * @interface InventoryApiGetInventoryRequest
 */
export interface InventoryApiGetInventoryRequest {
    /**
     * Id
     * @type {number}
     * @memberof InventoryApiGetInventory
     */
    readonly id: number

    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
     * @type {string}
     * @memberof InventoryApiGetInventory
     */
    readonly includes?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof InventoryApiGetInventory
     */
    readonly select?: string
}

/**
 * Request parameters for listInventories operation in InventoryApi.
 * @export
 * @interface InventoryApiListInventoriesRequest
 */
export interface InventoryApiListInventoriesRequest {
    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.AlternateCurrencies&lt;br&gt;Item.CharacterCorpseItems&lt;br&gt;Item.DiscoveredItems&lt;br&gt;Item.Doors&lt;br&gt;Item.Doors.Item&lt;br&gt;Item.Fishings&lt;br&gt;Item.Fishings.Item&lt;br&gt;Item.Fishings.NpcType&lt;br&gt;Item.Fishings.NpcType.AlternateCurrency&lt;br&gt;Item.Fishings.NpcType.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Fishings.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Fishings.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Fishings.NpcType.Merchantlists&lt;br&gt;Item.Fishings.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Fishings.NpcType.NpcEmotes&lt;br&gt;Item.Fishings.NpcType.NpcFactions&lt;br&gt;Item.Fishings.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Fishings.NpcType.NpcSpells&lt;br&gt;Item.Fishings.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Fishings.NpcType.NpcTypesTint&lt;br&gt;Item.Fishings.NpcType.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Fishings.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Fishings.Zone&lt;br&gt;Item.Forages&lt;br&gt;Item.Forages.Item&lt;br&gt;Item.Forages.Zone&lt;br&gt;Item.GroundSpawns&lt;br&gt;Item.GroundSpawns.Zone&lt;br&gt;Item.ItemTicks&lt;br&gt;Item.Keyrings&lt;br&gt;Item.LootdropEntries&lt;br&gt;Item.LootdropEntries.Item&lt;br&gt;Item.LootdropEntries.Lootdrop&lt;br&gt;Item.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.LootdropEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.LoottableEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.AlternateCurrency&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Loottable&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Merchantlists.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcEmotes&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcFactions.NpcFactionEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.NpcTypesTint&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.NpcType&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.LootdropEntries.Lootdrop.LoottableEntries.Loottable.NpcTypes.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType&lt;br&gt;Item.Merchantlists.NpcType.AlternateCurrency&lt;br&gt;Item.Merchantlists.NpcType.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Merchantlists.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Merchantlists.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Merchantlists.NpcType.Merchantlists&lt;br&gt;Item.Merchantlists.NpcType.NpcEmotes&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions&lt;br&gt;Item.Merchantlists.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells&lt;br&gt;Item.Merchantlists.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Merchantlists.NpcType.NpcTypesTint&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Merchantlists.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.ObjectContents&lt;br&gt;Item.Objects&lt;br&gt;Item.Objects.Item&lt;br&gt;Item.Objects.Zone&lt;br&gt;Item.StartingItems&lt;br&gt;Item.StartingItems.Item&lt;br&gt;Item.StartingItems.Zone&lt;br&gt;Item.Tasks&lt;br&gt;Item.Tasks.TaskActivities&lt;br&gt;Item.Tasks.TaskActivities.Goallists&lt;br&gt;Item.Tasks.TaskActivities.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.AlternateCurrency&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Item&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LootdropEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.LootdropEntries.Lootdrop.LoottableEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.LoottableEntries.Loottable&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Loottable.NpcTypes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Merchantlists.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcEmotes&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcFactions.NpcFactionEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcSpells.NpcSpellsEntries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.NpcTypesTint&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.NpcType&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawnentries&lt;br&gt;Item.Tasks.TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2.Spawngroup&lt;br&gt;Item.Tasks.Tasksets&lt;br&gt;Item.TradeskillRecipeEntries&lt;br&gt;Item.TradeskillRecipeEntries.TradeskillRecipe&lt;br&gt;Item.TributeLevels
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly includes?: string

    /**
     * Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly where?: string

    /**
     * Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly whereOr?: string

    /**
     * Group by field. Multiple conditions [.] separated Example: field1.field2
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly groupBy?: string

    /**
     * Rows to limit in response (Default: 10,000)
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly limit?: string

    /**
     * Order by [field]
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly orderBy?: string

    /**
     * Order by field direction
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly orderDirection?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof InventoryApiListInventories
     */
    readonly select?: string
}

/**
 * Request parameters for updateInventory operation in InventoryApi.
 * @export
 * @interface InventoryApiUpdateInventoryRequest
 */
export interface InventoryApiUpdateInventoryRequest {
    /**
     * Id
     * @type {number}
     * @memberof InventoryApiUpdateInventory
     */
    readonly id: number

    /**
     * Inventory
     * @type {ModelsInventory}
     * @memberof InventoryApiUpdateInventory
     */
    readonly inventory: ModelsInventory
}

/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export class InventoryApi extends BaseAPI {
    /**
     * 
     * @summary Creates Inventory
     * @param {InventoryApiCreateInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public createInventory(requestParameters: InventoryApiCreateInventoryRequest, options?: any) {
        return InventoryApiFp(this.configuration).createInventory(requestParameters.inventory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes Inventory
     * @param {InventoryApiDeleteInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public deleteInventory(requestParameters: InventoryApiDeleteInventoryRequest, options?: any) {
        return InventoryApiFp(this.configuration).deleteInventory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Inventories in bulk
     * @param {InventoryApiGetInventoriesBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public getInventoriesBulk(requestParameters: InventoryApiGetInventoriesBulkRequest, options?: any) {
        return InventoryApiFp(this.configuration).getInventoriesBulk(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Inventory
     * @param {InventoryApiGetInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public getInventory(requestParameters: InventoryApiGetInventoryRequest, options?: any) {
        return InventoryApiFp(this.configuration).getInventory(requestParameters.id, requestParameters.includes, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists Inventories
     * @param {InventoryApiListInventoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public listInventories(requestParameters: InventoryApiListInventoriesRequest = {}, options?: any) {
        return InventoryApiFp(this.configuration).listInventories(requestParameters.includes, requestParameters.where, requestParameters.whereOr, requestParameters.groupBy, requestParameters.limit, requestParameters.orderBy, requestParameters.orderDirection, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates Inventory
     * @param {InventoryApiUpdateInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public updateInventory(requestParameters: InventoryApiUpdateInventoryRequest, options?: any) {
        return InventoryApiFp(this.configuration).updateInventory(requestParameters.id, requestParameters.inventory, options).then((request) => request(this.axios, this.basePath));
    }
}
