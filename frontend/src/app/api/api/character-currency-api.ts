/* tslint:disable */
/* eslint-disable */
/**
 * Spire
 * Spire API documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: akkadius1@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CrudcontrollersBulkFetchByIdsGetRequest } from '../models';
// @ts-ignore
import { ModelsCharacterCurrency } from '../models';
/**
 * CharacterCurrencyApi - axios parameter creator
 * @export
 */
export const CharacterCurrencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates CharacterCurrency
         * @param {ModelsCharacterCurrency} characterCurrency CharacterCurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCharacterCurrency: async (characterCurrency: ModelsCharacterCurrency, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'characterCurrency' is not null or undefined
            if (characterCurrency === null || characterCurrency === undefined) {
                throw new RequiredError('characterCurrency','Required parameter characterCurrency was null or undefined when calling createCharacterCurrency.');
            }
            const localVarPath = `/character_currency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof characterCurrency !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(characterCurrency !== undefined ? characterCurrency : {})
                : (characterCurrency || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes CharacterCurrency
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCharacterCurrency: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCharacterCurrency.');
            }
            const localVarPath = `/character_currency/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets CharacterCurrencies in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterCurrenciesBulk: async (body: CrudcontrollersBulkFetchByIdsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getCharacterCurrenciesBulk.');
            }
            const localVarPath = `/character_currencies/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets CharacterCurrency
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterCurrency: async (id: number, includes?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCharacterCurrency.');
            }
            const localVarPath = `/character_currency/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists CharacterCurrencies
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharacterCurrencies: async (includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/character_currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (whereOr !== undefined) {
                localVarQueryParameter['whereOr'] = whereOr;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates CharacterCurrency
         * @param {number} id Id
         * @param {ModelsCharacterCurrency} characterCurrency CharacterCurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCharacterCurrency: async (id: number, characterCurrency: ModelsCharacterCurrency, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCharacterCurrency.');
            }
            // verify required parameter 'characterCurrency' is not null or undefined
            if (characterCurrency === null || characterCurrency === undefined) {
                throw new RequiredError('characterCurrency','Required parameter characterCurrency was null or undefined when calling updateCharacterCurrency.');
            }
            const localVarPath = `/character_currency/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof characterCurrency !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(characterCurrency !== undefined ? characterCurrency : {})
                : (characterCurrency || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CharacterCurrencyApi - functional programming interface
 * @export
 */
export const CharacterCurrencyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates CharacterCurrency
         * @param {ModelsCharacterCurrency} characterCurrency CharacterCurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCharacterCurrency(characterCurrency: ModelsCharacterCurrency, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterCurrency>>> {
            const localVarAxiosArgs = await CharacterCurrencyApiAxiosParamCreator(configuration).createCharacterCurrency(characterCurrency, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes CharacterCurrency
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCharacterCurrency(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await CharacterCurrencyApiAxiosParamCreator(configuration).deleteCharacterCurrency(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets CharacterCurrencies in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterCurrenciesBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterCurrency>>> {
            const localVarAxiosArgs = await CharacterCurrencyApiAxiosParamCreator(configuration).getCharacterCurrenciesBulk(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets CharacterCurrency
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterCurrency(id: number, includes?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterCurrency>>> {
            const localVarAxiosArgs = await CharacterCurrencyApiAxiosParamCreator(configuration).getCharacterCurrency(id, includes, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Lists CharacterCurrencies
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCharacterCurrencies(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterCurrency>>> {
            const localVarAxiosArgs = await CharacterCurrencyApiAxiosParamCreator(configuration).listCharacterCurrencies(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates CharacterCurrency
         * @param {number} id Id
         * @param {ModelsCharacterCurrency} characterCurrency CharacterCurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCharacterCurrency(id: number, characterCurrency: ModelsCharacterCurrency, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterCurrency>>> {
            const localVarAxiosArgs = await CharacterCurrencyApiAxiosParamCreator(configuration).updateCharacterCurrency(id, characterCurrency, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CharacterCurrencyApi - factory interface
 * @export
 */
export const CharacterCurrencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates CharacterCurrency
         * @param {ModelsCharacterCurrency} characterCurrency CharacterCurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCharacterCurrency(characterCurrency: ModelsCharacterCurrency, options?: any): AxiosPromise<Array<ModelsCharacterCurrency>> {
            return CharacterCurrencyApiFp(configuration).createCharacterCurrency(characterCurrency, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes CharacterCurrency
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCharacterCurrency(id: number, options?: any): AxiosPromise<string> {
            return CharacterCurrencyApiFp(configuration).deleteCharacterCurrency(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets CharacterCurrencies in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterCurrenciesBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): AxiosPromise<Array<ModelsCharacterCurrency>> {
            return CharacterCurrencyApiFp(configuration).getCharacterCurrenciesBulk(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets CharacterCurrency
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterCurrency(id: number, includes?: string, select?: string, options?: any): AxiosPromise<Array<ModelsCharacterCurrency>> {
            return CharacterCurrencyApiFp(configuration).getCharacterCurrency(id, includes, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists CharacterCurrencies
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharacterCurrencies(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): AxiosPromise<Array<ModelsCharacterCurrency>> {
            return CharacterCurrencyApiFp(configuration).listCharacterCurrencies(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates CharacterCurrency
         * @param {number} id Id
         * @param {ModelsCharacterCurrency} characterCurrency CharacterCurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCharacterCurrency(id: number, characterCurrency: ModelsCharacterCurrency, options?: any): AxiosPromise<Array<ModelsCharacterCurrency>> {
            return CharacterCurrencyApiFp(configuration).updateCharacterCurrency(id, characterCurrency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCharacterCurrency operation in CharacterCurrencyApi.
 * @export
 * @interface CharacterCurrencyApiCreateCharacterCurrencyRequest
 */
export interface CharacterCurrencyApiCreateCharacterCurrencyRequest {
    /**
     * CharacterCurrency
     * @type {ModelsCharacterCurrency}
     * @memberof CharacterCurrencyApiCreateCharacterCurrency
     */
    readonly characterCurrency: ModelsCharacterCurrency
}

/**
 * Request parameters for deleteCharacterCurrency operation in CharacterCurrencyApi.
 * @export
 * @interface CharacterCurrencyApiDeleteCharacterCurrencyRequest
 */
export interface CharacterCurrencyApiDeleteCharacterCurrencyRequest {
    /**
     * Id
     * @type {number}
     * @memberof CharacterCurrencyApiDeleteCharacterCurrency
     */
    readonly id: number
}

/**
 * Request parameters for getCharacterCurrenciesBulk operation in CharacterCurrencyApi.
 * @export
 * @interface CharacterCurrencyApiGetCharacterCurrenciesBulkRequest
 */
export interface CharacterCurrencyApiGetCharacterCurrenciesBulkRequest {
    /**
     * body
     * @type {CrudcontrollersBulkFetchByIdsGetRequest}
     * @memberof CharacterCurrencyApiGetCharacterCurrenciesBulk
     */
    readonly body: CrudcontrollersBulkFetchByIdsGetRequest
}

/**
 * Request parameters for getCharacterCurrency operation in CharacterCurrencyApi.
 * @export
 * @interface CharacterCurrencyApiGetCharacterCurrencyRequest
 */
export interface CharacterCurrencyApiGetCharacterCurrencyRequest {
    /**
     * Id
     * @type {number}
     * @memberof CharacterCurrencyApiGetCharacterCurrency
     */
    readonly id: number

    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof CharacterCurrencyApiGetCharacterCurrency
     */
    readonly includes?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof CharacterCurrencyApiGetCharacterCurrency
     */
    readonly select?: string
}

/**
 * Request parameters for listCharacterCurrencies operation in CharacterCurrencyApi.
 * @export
 * @interface CharacterCurrencyApiListCharacterCurrenciesRequest
 */
export interface CharacterCurrencyApiListCharacterCurrenciesRequest {
    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly includes?: string

    /**
     * Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly where?: string

    /**
     * Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly whereOr?: string

    /**
     * Group by field. Multiple conditions [.] separated Example: field1.field2
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly groupBy?: string

    /**
     * Rows to limit in response (Default: 10,000)
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly limit?: string

    /**
     * Order by [field]
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly orderBy?: string

    /**
     * Order by field direction
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly orderDirection?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof CharacterCurrencyApiListCharacterCurrencies
     */
    readonly select?: string
}

/**
 * Request parameters for updateCharacterCurrency operation in CharacterCurrencyApi.
 * @export
 * @interface CharacterCurrencyApiUpdateCharacterCurrencyRequest
 */
export interface CharacterCurrencyApiUpdateCharacterCurrencyRequest {
    /**
     * Id
     * @type {number}
     * @memberof CharacterCurrencyApiUpdateCharacterCurrency
     */
    readonly id: number

    /**
     * CharacterCurrency
     * @type {ModelsCharacterCurrency}
     * @memberof CharacterCurrencyApiUpdateCharacterCurrency
     */
    readonly characterCurrency: ModelsCharacterCurrency
}

/**
 * CharacterCurrencyApi - object-oriented interface
 * @export
 * @class CharacterCurrencyApi
 * @extends {BaseAPI}
 */
export class CharacterCurrencyApi extends BaseAPI {
    /**
     * 
     * @summary Creates CharacterCurrency
     * @param {CharacterCurrencyApiCreateCharacterCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterCurrencyApi
     */
    public createCharacterCurrency(requestParameters: CharacterCurrencyApiCreateCharacterCurrencyRequest, options?: any) {
        return CharacterCurrencyApiFp(this.configuration).createCharacterCurrency(requestParameters.characterCurrency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes CharacterCurrency
     * @param {CharacterCurrencyApiDeleteCharacterCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterCurrencyApi
     */
    public deleteCharacterCurrency(requestParameters: CharacterCurrencyApiDeleteCharacterCurrencyRequest, options?: any) {
        return CharacterCurrencyApiFp(this.configuration).deleteCharacterCurrency(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets CharacterCurrencies in bulk
     * @param {CharacterCurrencyApiGetCharacterCurrenciesBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterCurrencyApi
     */
    public getCharacterCurrenciesBulk(requestParameters: CharacterCurrencyApiGetCharacterCurrenciesBulkRequest, options?: any) {
        return CharacterCurrencyApiFp(this.configuration).getCharacterCurrenciesBulk(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets CharacterCurrency
     * @param {CharacterCurrencyApiGetCharacterCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterCurrencyApi
     */
    public getCharacterCurrency(requestParameters: CharacterCurrencyApiGetCharacterCurrencyRequest, options?: any) {
        return CharacterCurrencyApiFp(this.configuration).getCharacterCurrency(requestParameters.id, requestParameters.includes, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists CharacterCurrencies
     * @param {CharacterCurrencyApiListCharacterCurrenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterCurrencyApi
     */
    public listCharacterCurrencies(requestParameters: CharacterCurrencyApiListCharacterCurrenciesRequest = {}, options?: any) {
        return CharacterCurrencyApiFp(this.configuration).listCharacterCurrencies(requestParameters.includes, requestParameters.where, requestParameters.whereOr, requestParameters.groupBy, requestParameters.limit, requestParameters.orderBy, requestParameters.orderDirection, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates CharacterCurrency
     * @param {CharacterCurrencyApiUpdateCharacterCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterCurrencyApi
     */
    public updateCharacterCurrency(requestParameters: CharacterCurrencyApiUpdateCharacterCurrencyRequest, options?: any) {
        return CharacterCurrencyApiFp(this.configuration).updateCharacterCurrency(requestParameters.id, requestParameters.characterCurrency, options).then((request) => request(this.axios, this.basePath));
    }
}
