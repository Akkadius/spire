/* tslint:disable */
/* eslint-disable */
/**
 * Spire
 * Spire API documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: akkadius1@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CrudcontrollersBulkFetchByIdsGetRequest } from '../models';
// @ts-ignore
import { ModelsDiscoveredItem } from '../models';
/**
 * DiscoveredItemApi - axios parameter creator
 * @export
 */
export const DiscoveredItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates DiscoveredItem
         * @param {ModelsDiscoveredItem} discoveredItem DiscoveredItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscoveredItem: async (discoveredItem: ModelsDiscoveredItem, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'discoveredItem' is not null or undefined
            if (discoveredItem === null || discoveredItem === undefined) {
                throw new RequiredError('discoveredItem','Required parameter discoveredItem was null or undefined when calling createDiscoveredItem.');
            }
            const localVarPath = `/discovered_item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof discoveredItem !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(discoveredItem !== undefined ? discoveredItem : {})
                : (discoveredItem || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes DiscoveredItem
         * @param {number} id itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscoveredItem: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDiscoveredItem.');
            }
            const localVarPath = `/discovered_item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets DiscoveredItem
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscoveredItem: async (id: number, includes?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDiscoveredItem.');
            }
            const localVarPath = `/discovered_item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets DiscoveredItems in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscoveredItemsBulk: async (body: CrudcontrollersBulkFetchByIdsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getDiscoveredItemsBulk.');
            }
            const localVarPath = `/discovered_items/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists DiscoveredItems
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {number} [page] Pagination page
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscoveredItems: async (includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, page?: number, orderBy?: string, orderDirection?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/discovered_items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (whereOr !== undefined) {
                localVarQueryParameter['whereOr'] = whereOr;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates DiscoveredItem
         * @param {number} id Id
         * @param {ModelsDiscoveredItem} discoveredItem DiscoveredItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscoveredItem: async (id: number, discoveredItem: ModelsDiscoveredItem, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateDiscoveredItem.');
            }
            // verify required parameter 'discoveredItem' is not null or undefined
            if (discoveredItem === null || discoveredItem === undefined) {
                throw new RequiredError('discoveredItem','Required parameter discoveredItem was null or undefined when calling updateDiscoveredItem.');
            }
            const localVarPath = `/discovered_item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof discoveredItem !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(discoveredItem !== undefined ? discoveredItem : {})
                : (discoveredItem || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscoveredItemApi - functional programming interface
 * @export
 */
export const DiscoveredItemApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates DiscoveredItem
         * @param {ModelsDiscoveredItem} discoveredItem DiscoveredItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDiscoveredItem(discoveredItem: ModelsDiscoveredItem, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDiscoveredItem>>> {
            const localVarAxiosArgs = await DiscoveredItemApiAxiosParamCreator(configuration).createDiscoveredItem(discoveredItem, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes DiscoveredItem
         * @param {number} id itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDiscoveredItem(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DiscoveredItemApiAxiosParamCreator(configuration).deleteDiscoveredItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets DiscoveredItem
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscoveredItem(id: number, includes?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDiscoveredItem>>> {
            const localVarAxiosArgs = await DiscoveredItemApiAxiosParamCreator(configuration).getDiscoveredItem(id, includes, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets DiscoveredItems in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscoveredItemsBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDiscoveredItem>>> {
            const localVarAxiosArgs = await DiscoveredItemApiAxiosParamCreator(configuration).getDiscoveredItemsBulk(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Lists DiscoveredItems
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {number} [page] Pagination page
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDiscoveredItems(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, page?: number, orderBy?: string, orderDirection?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDiscoveredItem>>> {
            const localVarAxiosArgs = await DiscoveredItemApiAxiosParamCreator(configuration).listDiscoveredItems(includes, where, whereOr, groupBy, limit, page, orderBy, orderDirection, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates DiscoveredItem
         * @param {number} id Id
         * @param {ModelsDiscoveredItem} discoveredItem DiscoveredItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDiscoveredItem(id: number, discoveredItem: ModelsDiscoveredItem, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDiscoveredItem>>> {
            const localVarAxiosArgs = await DiscoveredItemApiAxiosParamCreator(configuration).updateDiscoveredItem(id, discoveredItem, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DiscoveredItemApi - factory interface
 * @export
 */
export const DiscoveredItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates DiscoveredItem
         * @param {ModelsDiscoveredItem} discoveredItem DiscoveredItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscoveredItem(discoveredItem: ModelsDiscoveredItem, options?: any): AxiosPromise<Array<ModelsDiscoveredItem>> {
            return DiscoveredItemApiFp(configuration).createDiscoveredItem(discoveredItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes DiscoveredItem
         * @param {number} id itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscoveredItem(id: number, options?: any): AxiosPromise<string> {
            return DiscoveredItemApiFp(configuration).deleteDiscoveredItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets DiscoveredItem
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscoveredItem(id: number, includes?: string, select?: string, options?: any): AxiosPromise<Array<ModelsDiscoveredItem>> {
            return DiscoveredItemApiFp(configuration).getDiscoveredItem(id, includes, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets DiscoveredItems in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscoveredItemsBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): AxiosPromise<Array<ModelsDiscoveredItem>> {
            return DiscoveredItemApiFp(configuration).getDiscoveredItemsBulk(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists DiscoveredItems
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {number} [page] Pagination page
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscoveredItems(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, page?: number, orderBy?: string, orderDirection?: string, select?: string, options?: any): AxiosPromise<Array<ModelsDiscoveredItem>> {
            return DiscoveredItemApiFp(configuration).listDiscoveredItems(includes, where, whereOr, groupBy, limit, page, orderBy, orderDirection, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates DiscoveredItem
         * @param {number} id Id
         * @param {ModelsDiscoveredItem} discoveredItem DiscoveredItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscoveredItem(id: number, discoveredItem: ModelsDiscoveredItem, options?: any): AxiosPromise<Array<ModelsDiscoveredItem>> {
            return DiscoveredItemApiFp(configuration).updateDiscoveredItem(id, discoveredItem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDiscoveredItem operation in DiscoveredItemApi.
 * @export
 * @interface DiscoveredItemApiCreateDiscoveredItemRequest
 */
export interface DiscoveredItemApiCreateDiscoveredItemRequest {
    /**
     * DiscoveredItem
     * @type {ModelsDiscoveredItem}
     * @memberof DiscoveredItemApiCreateDiscoveredItem
     */
    readonly discoveredItem: ModelsDiscoveredItem
}

/**
 * Request parameters for deleteDiscoveredItem operation in DiscoveredItemApi.
 * @export
 * @interface DiscoveredItemApiDeleteDiscoveredItemRequest
 */
export interface DiscoveredItemApiDeleteDiscoveredItemRequest {
    /**
     * itemId
     * @type {number}
     * @memberof DiscoveredItemApiDeleteDiscoveredItem
     */
    readonly id: number
}

/**
 * Request parameters for getDiscoveredItem operation in DiscoveredItemApi.
 * @export
 * @interface DiscoveredItemApiGetDiscoveredItemRequest
 */
export interface DiscoveredItemApiGetDiscoveredItemRequest {
    /**
     * Id
     * @type {number}
     * @memberof DiscoveredItemApiGetDiscoveredItem
     */
    readonly id: number

    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof DiscoveredItemApiGetDiscoveredItem
     */
    readonly includes?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof DiscoveredItemApiGetDiscoveredItem
     */
    readonly select?: string
}

/**
 * Request parameters for getDiscoveredItemsBulk operation in DiscoveredItemApi.
 * @export
 * @interface DiscoveredItemApiGetDiscoveredItemsBulkRequest
 */
export interface DiscoveredItemApiGetDiscoveredItemsBulkRequest {
    /**
     * body
     * @type {CrudcontrollersBulkFetchByIdsGetRequest}
     * @memberof DiscoveredItemApiGetDiscoveredItemsBulk
     */
    readonly body: CrudcontrollersBulkFetchByIdsGetRequest
}

/**
 * Request parameters for listDiscoveredItems operation in DiscoveredItemApi.
 * @export
 * @interface DiscoveredItemApiListDiscoveredItemsRequest
 */
export interface DiscoveredItemApiListDiscoveredItemsRequest {
    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly includes?: string

    /**
     * Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly where?: string

    /**
     * Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly whereOr?: string

    /**
     * Group by field. Multiple conditions [.] separated Example: field1.field2
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly groupBy?: string

    /**
     * Rows to limit in response (Default: 10,000)
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly limit?: string

    /**
     * Pagination page
     * @type {number}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly page?: number

    /**
     * Order by [field]
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly orderBy?: string

    /**
     * Order by field direction
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly orderDirection?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof DiscoveredItemApiListDiscoveredItems
     */
    readonly select?: string
}

/**
 * Request parameters for updateDiscoveredItem operation in DiscoveredItemApi.
 * @export
 * @interface DiscoveredItemApiUpdateDiscoveredItemRequest
 */
export interface DiscoveredItemApiUpdateDiscoveredItemRequest {
    /**
     * Id
     * @type {number}
     * @memberof DiscoveredItemApiUpdateDiscoveredItem
     */
    readonly id: number

    /**
     * DiscoveredItem
     * @type {ModelsDiscoveredItem}
     * @memberof DiscoveredItemApiUpdateDiscoveredItem
     */
    readonly discoveredItem: ModelsDiscoveredItem
}

/**
 * DiscoveredItemApi - object-oriented interface
 * @export
 * @class DiscoveredItemApi
 * @extends {BaseAPI}
 */
export class DiscoveredItemApi extends BaseAPI {
    /**
     * 
     * @summary Creates DiscoveredItem
     * @param {DiscoveredItemApiCreateDiscoveredItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveredItemApi
     */
    public createDiscoveredItem(requestParameters: DiscoveredItemApiCreateDiscoveredItemRequest, options?: any) {
        return DiscoveredItemApiFp(this.configuration).createDiscoveredItem(requestParameters.discoveredItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes DiscoveredItem
     * @param {DiscoveredItemApiDeleteDiscoveredItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveredItemApi
     */
    public deleteDiscoveredItem(requestParameters: DiscoveredItemApiDeleteDiscoveredItemRequest, options?: any) {
        return DiscoveredItemApiFp(this.configuration).deleteDiscoveredItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets DiscoveredItem
     * @param {DiscoveredItemApiGetDiscoveredItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveredItemApi
     */
    public getDiscoveredItem(requestParameters: DiscoveredItemApiGetDiscoveredItemRequest, options?: any) {
        return DiscoveredItemApiFp(this.configuration).getDiscoveredItem(requestParameters.id, requestParameters.includes, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets DiscoveredItems in bulk
     * @param {DiscoveredItemApiGetDiscoveredItemsBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveredItemApi
     */
    public getDiscoveredItemsBulk(requestParameters: DiscoveredItemApiGetDiscoveredItemsBulkRequest, options?: any) {
        return DiscoveredItemApiFp(this.configuration).getDiscoveredItemsBulk(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists DiscoveredItems
     * @param {DiscoveredItemApiListDiscoveredItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveredItemApi
     */
    public listDiscoveredItems(requestParameters: DiscoveredItemApiListDiscoveredItemsRequest = {}, options?: any) {
        return DiscoveredItemApiFp(this.configuration).listDiscoveredItems(requestParameters.includes, requestParameters.where, requestParameters.whereOr, requestParameters.groupBy, requestParameters.limit, requestParameters.page, requestParameters.orderBy, requestParameters.orderDirection, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates DiscoveredItem
     * @param {DiscoveredItemApiUpdateDiscoveredItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveredItemApi
     */
    public updateDiscoveredItem(requestParameters: DiscoveredItemApiUpdateDiscoveredItemRequest, options?: any) {
        return DiscoveredItemApiFp(this.configuration).updateDiscoveredItem(requestParameters.id, requestParameters.discoveredItem, options).then((request) => request(this.axios, this.basePath));
    }
}
