/* tslint:disable */
/* eslint-disable */
/**
 * Spire
 * Spire API documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: akkadius1@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CrudcontrollersBulkFetchByIdsGetRequest } from '../models';
// @ts-ignore
import { ModelsCharacterItemRecast } from '../models';
/**
 * CharacterItemRecastApi - axios parameter creator
 * @export
 */
export const CharacterItemRecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates CharacterItemRecast
         * @param {ModelsCharacterItemRecast} characterItemRecast CharacterItemRecast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCharacterItemRecast: async (characterItemRecast: ModelsCharacterItemRecast, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'characterItemRecast' is not null or undefined
            if (characterItemRecast === null || characterItemRecast === undefined) {
                throw new RequiredError('characterItemRecast','Required parameter characterItemRecast was null or undefined when calling createCharacterItemRecast.');
            }
            const localVarPath = `/character_item_recast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof characterItemRecast !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(characterItemRecast !== undefined ? characterItemRecast : {})
                : (characterItemRecast || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes CharacterItemRecast
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCharacterItemRecast: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCharacterItemRecast.');
            }
            const localVarPath = `/character_item_recast/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets CharacterItemRecast
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterItemRecast: async (id: number, includes?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCharacterItemRecast.');
            }
            const localVarPath = `/character_item_recast/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets CharacterItemRecasts in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterItemRecastsBulk: async (body: CrudcontrollersBulkFetchByIdsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getCharacterItemRecastsBulk.');
            }
            const localVarPath = `/character_item_recasts/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists CharacterItemRecasts
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharacterItemRecasts: async (includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/character_item_recasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (whereOr !== undefined) {
                localVarQueryParameter['whereOr'] = whereOr;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates CharacterItemRecast
         * @param {number} id Id
         * @param {ModelsCharacterItemRecast} characterItemRecast CharacterItemRecast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCharacterItemRecast: async (id: number, characterItemRecast: ModelsCharacterItemRecast, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCharacterItemRecast.');
            }
            // verify required parameter 'characterItemRecast' is not null or undefined
            if (characterItemRecast === null || characterItemRecast === undefined) {
                throw new RequiredError('characterItemRecast','Required parameter characterItemRecast was null or undefined when calling updateCharacterItemRecast.');
            }
            const localVarPath = `/character_item_recast/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof characterItemRecast !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(characterItemRecast !== undefined ? characterItemRecast : {})
                : (characterItemRecast || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CharacterItemRecastApi - functional programming interface
 * @export
 */
export const CharacterItemRecastApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates CharacterItemRecast
         * @param {ModelsCharacterItemRecast} characterItemRecast CharacterItemRecast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCharacterItemRecast(characterItemRecast: ModelsCharacterItemRecast, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterItemRecast>>> {
            const localVarAxiosArgs = await CharacterItemRecastApiAxiosParamCreator(configuration).createCharacterItemRecast(characterItemRecast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes CharacterItemRecast
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCharacterItemRecast(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await CharacterItemRecastApiAxiosParamCreator(configuration).deleteCharacterItemRecast(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets CharacterItemRecast
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterItemRecast(id: number, includes?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterItemRecast>>> {
            const localVarAxiosArgs = await CharacterItemRecastApiAxiosParamCreator(configuration).getCharacterItemRecast(id, includes, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets CharacterItemRecasts in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterItemRecastsBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterItemRecast>>> {
            const localVarAxiosArgs = await CharacterItemRecastApiAxiosParamCreator(configuration).getCharacterItemRecastsBulk(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Lists CharacterItemRecasts
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCharacterItemRecasts(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterItemRecast>>> {
            const localVarAxiosArgs = await CharacterItemRecastApiAxiosParamCreator(configuration).listCharacterItemRecasts(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates CharacterItemRecast
         * @param {number} id Id
         * @param {ModelsCharacterItemRecast} characterItemRecast CharacterItemRecast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCharacterItemRecast(id: number, characterItemRecast: ModelsCharacterItemRecast, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCharacterItemRecast>>> {
            const localVarAxiosArgs = await CharacterItemRecastApiAxiosParamCreator(configuration).updateCharacterItemRecast(id, characterItemRecast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CharacterItemRecastApi - factory interface
 * @export
 */
export const CharacterItemRecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates CharacterItemRecast
         * @param {ModelsCharacterItemRecast} characterItemRecast CharacterItemRecast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCharacterItemRecast(characterItemRecast: ModelsCharacterItemRecast, options?: any): AxiosPromise<Array<ModelsCharacterItemRecast>> {
            return CharacterItemRecastApiFp(configuration).createCharacterItemRecast(characterItemRecast, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes CharacterItemRecast
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCharacterItemRecast(id: number, options?: any): AxiosPromise<string> {
            return CharacterItemRecastApiFp(configuration).deleteCharacterItemRecast(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets CharacterItemRecast
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterItemRecast(id: number, includes?: string, select?: string, options?: any): AxiosPromise<Array<ModelsCharacterItemRecast>> {
            return CharacterItemRecastApiFp(configuration).getCharacterItemRecast(id, includes, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets CharacterItemRecasts in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterItemRecastsBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): AxiosPromise<Array<ModelsCharacterItemRecast>> {
            return CharacterItemRecastApiFp(configuration).getCharacterItemRecastsBulk(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists CharacterItemRecasts
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharacterItemRecasts(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): AxiosPromise<Array<ModelsCharacterItemRecast>> {
            return CharacterItemRecastApiFp(configuration).listCharacterItemRecasts(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates CharacterItemRecast
         * @param {number} id Id
         * @param {ModelsCharacterItemRecast} characterItemRecast CharacterItemRecast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCharacterItemRecast(id: number, characterItemRecast: ModelsCharacterItemRecast, options?: any): AxiosPromise<Array<ModelsCharacterItemRecast>> {
            return CharacterItemRecastApiFp(configuration).updateCharacterItemRecast(id, characterItemRecast, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCharacterItemRecast operation in CharacterItemRecastApi.
 * @export
 * @interface CharacterItemRecastApiCreateCharacterItemRecastRequest
 */
export interface CharacterItemRecastApiCreateCharacterItemRecastRequest {
    /**
     * CharacterItemRecast
     * @type {ModelsCharacterItemRecast}
     * @memberof CharacterItemRecastApiCreateCharacterItemRecast
     */
    readonly characterItemRecast: ModelsCharacterItemRecast
}

/**
 * Request parameters for deleteCharacterItemRecast operation in CharacterItemRecastApi.
 * @export
 * @interface CharacterItemRecastApiDeleteCharacterItemRecastRequest
 */
export interface CharacterItemRecastApiDeleteCharacterItemRecastRequest {
    /**
     * id
     * @type {number}
     * @memberof CharacterItemRecastApiDeleteCharacterItemRecast
     */
    readonly id: number
}

/**
 * Request parameters for getCharacterItemRecast operation in CharacterItemRecastApi.
 * @export
 * @interface CharacterItemRecastApiGetCharacterItemRecastRequest
 */
export interface CharacterItemRecastApiGetCharacterItemRecastRequest {
    /**
     * Id
     * @type {number}
     * @memberof CharacterItemRecastApiGetCharacterItemRecast
     */
    readonly id: number

    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof CharacterItemRecastApiGetCharacterItemRecast
     */
    readonly includes?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof CharacterItemRecastApiGetCharacterItemRecast
     */
    readonly select?: string
}

/**
 * Request parameters for getCharacterItemRecastsBulk operation in CharacterItemRecastApi.
 * @export
 * @interface CharacterItemRecastApiGetCharacterItemRecastsBulkRequest
 */
export interface CharacterItemRecastApiGetCharacterItemRecastsBulkRequest {
    /**
     * body
     * @type {CrudcontrollersBulkFetchByIdsGetRequest}
     * @memberof CharacterItemRecastApiGetCharacterItemRecastsBulk
     */
    readonly body: CrudcontrollersBulkFetchByIdsGetRequest
}

/**
 * Request parameters for listCharacterItemRecasts operation in CharacterItemRecastApi.
 * @export
 * @interface CharacterItemRecastApiListCharacterItemRecastsRequest
 */
export interface CharacterItemRecastApiListCharacterItemRecastsRequest {
    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names 
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly includes?: string

    /**
     * Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly where?: string

    /**
     * Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly whereOr?: string

    /**
     * Group by field. Multiple conditions [.] separated Example: field1.field2
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly groupBy?: string

    /**
     * Rows to limit in response (Default: 10,000)
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly limit?: string

    /**
     * Order by [field]
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly orderBy?: string

    /**
     * Order by field direction
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly orderDirection?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof CharacterItemRecastApiListCharacterItemRecasts
     */
    readonly select?: string
}

/**
 * Request parameters for updateCharacterItemRecast operation in CharacterItemRecastApi.
 * @export
 * @interface CharacterItemRecastApiUpdateCharacterItemRecastRequest
 */
export interface CharacterItemRecastApiUpdateCharacterItemRecastRequest {
    /**
     * Id
     * @type {number}
     * @memberof CharacterItemRecastApiUpdateCharacterItemRecast
     */
    readonly id: number

    /**
     * CharacterItemRecast
     * @type {ModelsCharacterItemRecast}
     * @memberof CharacterItemRecastApiUpdateCharacterItemRecast
     */
    readonly characterItemRecast: ModelsCharacterItemRecast
}

/**
 * CharacterItemRecastApi - object-oriented interface
 * @export
 * @class CharacterItemRecastApi
 * @extends {BaseAPI}
 */
export class CharacterItemRecastApi extends BaseAPI {
    /**
     * 
     * @summary Creates CharacterItemRecast
     * @param {CharacterItemRecastApiCreateCharacterItemRecastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterItemRecastApi
     */
    public createCharacterItemRecast(requestParameters: CharacterItemRecastApiCreateCharacterItemRecastRequest, options?: any) {
        return CharacterItemRecastApiFp(this.configuration).createCharacterItemRecast(requestParameters.characterItemRecast, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes CharacterItemRecast
     * @param {CharacterItemRecastApiDeleteCharacterItemRecastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterItemRecastApi
     */
    public deleteCharacterItemRecast(requestParameters: CharacterItemRecastApiDeleteCharacterItemRecastRequest, options?: any) {
        return CharacterItemRecastApiFp(this.configuration).deleteCharacterItemRecast(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets CharacterItemRecast
     * @param {CharacterItemRecastApiGetCharacterItemRecastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterItemRecastApi
     */
    public getCharacterItemRecast(requestParameters: CharacterItemRecastApiGetCharacterItemRecastRequest, options?: any) {
        return CharacterItemRecastApiFp(this.configuration).getCharacterItemRecast(requestParameters.id, requestParameters.includes, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets CharacterItemRecasts in bulk
     * @param {CharacterItemRecastApiGetCharacterItemRecastsBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterItemRecastApi
     */
    public getCharacterItemRecastsBulk(requestParameters: CharacterItemRecastApiGetCharacterItemRecastsBulkRequest, options?: any) {
        return CharacterItemRecastApiFp(this.configuration).getCharacterItemRecastsBulk(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists CharacterItemRecasts
     * @param {CharacterItemRecastApiListCharacterItemRecastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterItemRecastApi
     */
    public listCharacterItemRecasts(requestParameters: CharacterItemRecastApiListCharacterItemRecastsRequest = {}, options?: any) {
        return CharacterItemRecastApiFp(this.configuration).listCharacterItemRecasts(requestParameters.includes, requestParameters.where, requestParameters.whereOr, requestParameters.groupBy, requestParameters.limit, requestParameters.orderBy, requestParameters.orderDirection, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates CharacterItemRecast
     * @param {CharacterItemRecastApiUpdateCharacterItemRecastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterItemRecastApi
     */
    public updateCharacterItemRecast(requestParameters: CharacterItemRecastApiUpdateCharacterItemRecastRequest, options?: any) {
        return CharacterItemRecastApiFp(this.configuration).updateCharacterItemRecast(requestParameters.id, requestParameters.characterItemRecast, options).then((request) => request(this.axios, this.basePath));
    }
}
