/* tslint:disable */
/* eslint-disable */
/**
 * Spire
 * Spire API documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: akkadius1@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CrudcontrollersBulkFetchByIdsGetRequest } from '../models';
// @ts-ignore
import { ModelsLootdropEntry } from '../models';
/**
 * LootdropEntryApi - axios parameter creator
 * @export
 */
export const LootdropEntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates LootdropEntry
         * @param {ModelsLootdropEntry} lootdropEntry LootdropEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLootdropEntry: async (lootdropEntry: ModelsLootdropEntry, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lootdropEntry' is not null or undefined
            if (lootdropEntry === null || lootdropEntry === undefined) {
                throw new RequiredError('lootdropEntry','Required parameter lootdropEntry was null or undefined when calling createLootdropEntry.');
            }
            const localVarPath = `/lootdrop_entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof lootdropEntry !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(lootdropEntry !== undefined ? lootdropEntry : {})
                : (lootdropEntry || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes LootdropEntry
         * @param {number} id lootdropId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLootdropEntry: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteLootdropEntry.');
            }
            const localVarPath = `/lootdrop_entry/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets LootdropEntries in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLootdropEntriesBulk: async (body: CrudcontrollersBulkFetchByIdsGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getLootdropEntriesBulk.');
            }
            const localVarPath = `/lootdrop_entries/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets LootdropEntry
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLootdropEntry: async (id: number, includes?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getLootdropEntry.');
            }
            const localVarPath = `/lootdrop_entry/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists LootdropEntries
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLootdropEntries: async (includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/lootdrop_entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (whereOr !== undefined) {
                localVarQueryParameter['whereOr'] = whereOr;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates LootdropEntry
         * @param {number} id Id
         * @param {ModelsLootdropEntry} lootdropEntry LootdropEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLootdropEntry: async (id: number, lootdropEntry: ModelsLootdropEntry, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateLootdropEntry.');
            }
            // verify required parameter 'lootdropEntry' is not null or undefined
            if (lootdropEntry === null || lootdropEntry === undefined) {
                throw new RequiredError('lootdropEntry','Required parameter lootdropEntry was null or undefined when calling updateLootdropEntry.');
            }
            const localVarPath = `/lootdrop_entry/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof lootdropEntry !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(lootdropEntry !== undefined ? lootdropEntry : {})
                : (lootdropEntry || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LootdropEntryApi - functional programming interface
 * @export
 */
export const LootdropEntryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates LootdropEntry
         * @param {ModelsLootdropEntry} lootdropEntry LootdropEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLootdropEntry(lootdropEntry: ModelsLootdropEntry, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsLootdropEntry>>> {
            const localVarAxiosArgs = await LootdropEntryApiAxiosParamCreator(configuration).createLootdropEntry(lootdropEntry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes LootdropEntry
         * @param {number} id lootdropId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLootdropEntry(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await LootdropEntryApiAxiosParamCreator(configuration).deleteLootdropEntry(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets LootdropEntries in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLootdropEntriesBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsLootdropEntry>>> {
            const localVarAxiosArgs = await LootdropEntryApiAxiosParamCreator(configuration).getLootdropEntriesBulk(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets LootdropEntry
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLootdropEntry(id: number, includes?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsLootdropEntry>>> {
            const localVarAxiosArgs = await LootdropEntryApiAxiosParamCreator(configuration).getLootdropEntry(id, includes, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Lists LootdropEntries
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLootdropEntries(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsLootdropEntry>>> {
            const localVarAxiosArgs = await LootdropEntryApiAxiosParamCreator(configuration).listLootdropEntries(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates LootdropEntry
         * @param {number} id Id
         * @param {ModelsLootdropEntry} lootdropEntry LootdropEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLootdropEntry(id: number, lootdropEntry: ModelsLootdropEntry, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsLootdropEntry>>> {
            const localVarAxiosArgs = await LootdropEntryApiAxiosParamCreator(configuration).updateLootdropEntry(id, lootdropEntry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LootdropEntryApi - factory interface
 * @export
 */
export const LootdropEntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates LootdropEntry
         * @param {ModelsLootdropEntry} lootdropEntry LootdropEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLootdropEntry(lootdropEntry: ModelsLootdropEntry, options?: any): AxiosPromise<Array<ModelsLootdropEntry>> {
            return LootdropEntryApiFp(configuration).createLootdropEntry(lootdropEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes LootdropEntry
         * @param {number} id lootdropId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLootdropEntry(id: number, options?: any): AxiosPromise<string> {
            return LootdropEntryApiFp(configuration).deleteLootdropEntry(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets LootdropEntries in bulk
         * @param {CrudcontrollersBulkFetchByIdsGetRequest} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLootdropEntriesBulk(body: CrudcontrollersBulkFetchByIdsGetRequest, options?: any): AxiosPromise<Array<ModelsLootdropEntry>> {
            return LootdropEntryApiFp(configuration).getLootdropEntriesBulk(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets LootdropEntry
         * @param {number} id Id
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLootdropEntry(id: number, includes?: string, select?: string, options?: any): AxiosPromise<Array<ModelsLootdropEntry>> {
            return LootdropEntryApiFp(configuration).getLootdropEntry(id, includes, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists LootdropEntries
         * @param {string} [includes] Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
         * @param {string} [where] Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [whereOr] Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
         * @param {string} [groupBy] Group by field. Multiple conditions [.] separated Example: field1.field2
         * @param {string} [limit] Rows to limit in response (Default: 10,000)
         * @param {string} [orderBy] Order by [field]
         * @param {string} [orderDirection] Order by field direction
         * @param {string} [select] Column names [.] separated to fetch specific fields in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLootdropEntries(includes?: string, where?: string, whereOr?: string, groupBy?: string, limit?: string, orderBy?: string, orderDirection?: string, select?: string, options?: any): AxiosPromise<Array<ModelsLootdropEntry>> {
            return LootdropEntryApiFp(configuration).listLootdropEntries(includes, where, whereOr, groupBy, limit, orderBy, orderDirection, select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates LootdropEntry
         * @param {number} id Id
         * @param {ModelsLootdropEntry} lootdropEntry LootdropEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLootdropEntry(id: number, lootdropEntry: ModelsLootdropEntry, options?: any): AxiosPromise<Array<ModelsLootdropEntry>> {
            return LootdropEntryApiFp(configuration).updateLootdropEntry(id, lootdropEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLootdropEntry operation in LootdropEntryApi.
 * @export
 * @interface LootdropEntryApiCreateLootdropEntryRequest
 */
export interface LootdropEntryApiCreateLootdropEntryRequest {
    /**
     * LootdropEntry
     * @type {ModelsLootdropEntry}
     * @memberof LootdropEntryApiCreateLootdropEntry
     */
    readonly lootdropEntry: ModelsLootdropEntry
}

/**
 * Request parameters for deleteLootdropEntry operation in LootdropEntryApi.
 * @export
 * @interface LootdropEntryApiDeleteLootdropEntryRequest
 */
export interface LootdropEntryApiDeleteLootdropEntryRequest {
    /**
     * lootdropId
     * @type {number}
     * @memberof LootdropEntryApiDeleteLootdropEntry
     */
    readonly id: number
}

/**
 * Request parameters for getLootdropEntriesBulk operation in LootdropEntryApi.
 * @export
 * @interface LootdropEntryApiGetLootdropEntriesBulkRequest
 */
export interface LootdropEntryApiGetLootdropEntriesBulkRequest {
    /**
     * body
     * @type {CrudcontrollersBulkFetchByIdsGetRequest}
     * @memberof LootdropEntryApiGetLootdropEntriesBulk
     */
    readonly body: CrudcontrollersBulkFetchByIdsGetRequest
}

/**
 * Request parameters for getLootdropEntry operation in LootdropEntryApi.
 * @export
 * @interface LootdropEntryApiGetLootdropEntryRequest
 */
export interface LootdropEntryApiGetLootdropEntryRequest {
    /**
     * Id
     * @type {number}
     * @memberof LootdropEntryApiGetLootdropEntry
     */
    readonly id: number

    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
     * @type {string}
     * @memberof LootdropEntryApiGetLootdropEntry
     */
    readonly includes?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof LootdropEntryApiGetLootdropEntry
     */
    readonly select?: string
}

/**
 * Request parameters for listLootdropEntries operation in LootdropEntryApi.
 * @export
 * @interface LootdropEntryApiListLootdropEntriesRequest
 */
export interface LootdropEntryApiListLootdropEntriesRequest {
    /**
     * Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names &lt;h4&gt;Relationships&lt;/h4&gt;Item&lt;br&gt;Item.DiscoveredItems
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly includes?: string

    /**
     * Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly where?: string

    /**
     * Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly whereOr?: string

    /**
     * Group by field. Multiple conditions [.] separated Example: field1.field2
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly groupBy?: string

    /**
     * Rows to limit in response (Default: 10,000)
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly limit?: string

    /**
     * Order by [field]
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly orderBy?: string

    /**
     * Order by field direction
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly orderDirection?: string

    /**
     * Column names [.] separated to fetch specific fields in response
     * @type {string}
     * @memberof LootdropEntryApiListLootdropEntries
     */
    readonly select?: string
}

/**
 * Request parameters for updateLootdropEntry operation in LootdropEntryApi.
 * @export
 * @interface LootdropEntryApiUpdateLootdropEntryRequest
 */
export interface LootdropEntryApiUpdateLootdropEntryRequest {
    /**
     * Id
     * @type {number}
     * @memberof LootdropEntryApiUpdateLootdropEntry
     */
    readonly id: number

    /**
     * LootdropEntry
     * @type {ModelsLootdropEntry}
     * @memberof LootdropEntryApiUpdateLootdropEntry
     */
    readonly lootdropEntry: ModelsLootdropEntry
}

/**
 * LootdropEntryApi - object-oriented interface
 * @export
 * @class LootdropEntryApi
 * @extends {BaseAPI}
 */
export class LootdropEntryApi extends BaseAPI {
    /**
     * 
     * @summary Creates LootdropEntry
     * @param {LootdropEntryApiCreateLootdropEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LootdropEntryApi
     */
    public createLootdropEntry(requestParameters: LootdropEntryApiCreateLootdropEntryRequest, options?: any) {
        return LootdropEntryApiFp(this.configuration).createLootdropEntry(requestParameters.lootdropEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes LootdropEntry
     * @param {LootdropEntryApiDeleteLootdropEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LootdropEntryApi
     */
    public deleteLootdropEntry(requestParameters: LootdropEntryApiDeleteLootdropEntryRequest, options?: any) {
        return LootdropEntryApiFp(this.configuration).deleteLootdropEntry(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets LootdropEntries in bulk
     * @param {LootdropEntryApiGetLootdropEntriesBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LootdropEntryApi
     */
    public getLootdropEntriesBulk(requestParameters: LootdropEntryApiGetLootdropEntriesBulkRequest, options?: any) {
        return LootdropEntryApiFp(this.configuration).getLootdropEntriesBulk(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets LootdropEntry
     * @param {LootdropEntryApiGetLootdropEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LootdropEntryApi
     */
    public getLootdropEntry(requestParameters: LootdropEntryApiGetLootdropEntryRequest, options?: any) {
        return LootdropEntryApiFp(this.configuration).getLootdropEntry(requestParameters.id, requestParameters.includes, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists LootdropEntries
     * @param {LootdropEntryApiListLootdropEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LootdropEntryApi
     */
    public listLootdropEntries(requestParameters: LootdropEntryApiListLootdropEntriesRequest = {}, options?: any) {
        return LootdropEntryApiFp(this.configuration).listLootdropEntries(requestParameters.includes, requestParameters.where, requestParameters.whereOr, requestParameters.groupBy, requestParameters.limit, requestParameters.orderBy, requestParameters.orderDirection, requestParameters.select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates LootdropEntry
     * @param {LootdropEntryApiUpdateLootdropEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LootdropEntryApi
     */
    public updateLootdropEntry(requestParameters: LootdropEntryApiUpdateLootdropEntryRequest, options?: any) {
        return LootdropEntryApiFp(this.configuration).updateLootdropEntry(requestParameters.id, requestParameters.lootdropEntry, options).then((request) => request(this.axios, this.basePath));
    }
}
