basePath: /api/v1
definitions:
  crudcontrollers.BulkFetchByIdsGetRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  models.AaAbility:
    properties:
      category:
        type: integer
      charges:
        type: integer
      classes:
        type: integer
      deities:
        type: integer
      drakkin_heritage:
        type: integer
      enabled:
        type: integer
      first_rank_id:
        type: integer
      grant_only:
        type: integer
      id:
        type: integer
      name:
        type: string
      races:
        type: integer
      reset_on_death:
        type: integer
      status:
        type: integer
      type:
        type: integer
    type: object
  models.AaRank:
    properties:
      cost:
        type: integer
      desc_sid:
        type: integer
      expansion:
        type: integer
      id:
        type: integer
      level_req:
        type: integer
      lower_hotkey_sid:
        type: integer
      next_id:
        type: integer
      prev_id:
        type: integer
      recast_time:
        type: integer
      spell:
        type: integer
      spell_type:
        type: integer
      title_sid:
        type: integer
      upper_hotkey_sid:
        type: integer
    type: object
  models.Account:
    properties:
      account_flags:
        items:
          $ref: '#/definitions/models.AccountFlag'
        type: array
      account_ips:
        items:
          $ref: '#/definitions/models.AccountIp'
        type: array
      account_rewards:
        items:
          $ref: '#/definitions/models.AccountReward'
        type: array
      ban_reason:
        type: string
      bug_reports:
        items:
          $ref: '#/definitions/models.BugReport'
        type: array
      charname:
        type: string
      expansion:
        type: integer
      gmspeed:
        type: integer
      hideme:
        type: integer
      id:
        type: integer
      karma:
        type: integer
      ls_id:
        type: string
      lsaccount_id:
        type: integer
      minilogin_ip:
        type: string
      name:
        type: string
      password:
        type: string
      revoked:
        type: integer
      rulesflag:
        type: integer
      sharedbanks:
        items:
          $ref: '#/definitions/models.Sharedbank'
        type: array
      sharedplat:
        type: integer
      status:
        type: integer
      suspend_reason:
        type: string
      suspendeduntil:
        type: string
      time_creation:
        type: integer
    type: object
  models.AccountFlag:
    properties:
      p_accid:
        type: integer
      p_flag:
        type: string
      p_value:
        type: string
    type: object
  models.AccountIp:
    properties:
      accid:
        type: integer
      count:
        type: integer
      ip:
        type: string
      lastused:
        type: string
    type: object
  models.AccountReward:
    properties:
      account_id:
        type: integer
      amount:
        type: integer
      reward_id:
        type: integer
    type: object
  models.AdventureDetail:
    properties:
      adventure_id:
        type: integer
      assassinate_count:
        type: integer
      count:
        type: integer
      id:
        type: integer
      instance_id:
        type: integer
      status:
        type: integer
      time_completed:
        type: integer
      time_created:
        type: integer
      time_zoned:
        type: integer
    type: object
  models.AdventureStat:
    properties:
      guk_losses:
        type: integer
      guk_wins:
        type: integer
      mir_losses:
        type: integer
      mir_wins:
        type: integer
      mmc_losses:
        type: integer
      mmc_wins:
        type: integer
      player_id:
        type: integer
      ruj_losses:
        type: integer
      ruj_wins:
        type: integer
      tak_losses:
        type: integer
      tak_wins:
        type: integer
    type: object
  models.AdventureTemplate:
    properties:
      assa_h:
        type: number
      assa_x:
        type: number
      assa_y:
        type: number
      assa_z:
        type: number
      dest_h:
        type: number
      dest_x:
        type: number
      dest_y:
        type: number
      dest_z:
        type: number
      duration:
        type: integer
      graveyard_radius:
        type: string
      graveyard_x:
        type: number
      graveyard_y:
        type: number
      graveyard_z:
        type: number
      graveyard_zone_id:
        type: integer
      id:
        type: integer
      is_hard:
        type: integer
      is_raid:
        type: integer
      lose_points:
        type: integer
      max_level:
        type: integer
      min_level:
        type: integer
      text:
        type: string
      theme:
        type: integer
      type:
        type: integer
      type_count:
        type: integer
      type_data:
        type: integer
      win_points:
        type: integer
      zone:
        type: string
      zone_in_object_id:
        type: integer
      zone_in_time:
        type: integer
      zone_in_x:
        type: number
      zone_in_y:
        type: number
      zone_in_zone_id:
        type: integer
      zone_version:
        type: integer
    type: object
  models.AdventureTemplateEntry:
    properties:
      id:
        type: integer
      template_id:
        type: integer
    type: object
  models.AdventureTemplateEntryFlavor:
    properties:
      id:
        type: integer
      text:
        type: string
    type: object
  models.AlternateCurrency:
    properties:
      id:
        type: integer
      item_id:
        type: integer
    type: object
  models.Aura:
    properties:
      aura_type:
        type: integer
      cast_time:
        type: integer
      distance:
        type: integer
      duration:
        type: integer
      icon:
        type: integer
      movement:
        type: integer
      name:
        type: string
      npc_type:
        type: integer
      spawn_type:
        type: integer
      spell_id:
        type: integer
      type:
        type: integer
    type: object
  models.BlockedSpell:
    properties:
      description:
        type: string
      id:
        type: integer
      message:
        type: string
      spellid:
        type: integer
      type:
        type: integer
      x:
        type: number
      x_diff:
        type: number
      "y":
        type: number
      y_diff:
        type: number
      z:
        type: number
      z_diff:
        type: number
      zoneid:
        type: integer
    type: object
  models.Bug:
    properties:
      bug:
        type: string
      date:
        type: string
      flag:
        type: integer
      id:
        type: integer
      name:
        type: string
      status:
        type: integer
      target:
        type: string
      type:
        type: string
      ui:
        type: string
      x:
        type: number
      "y":
        type: number
      z:
        type: number
      zone:
        type: string
    type: object
  models.BugReport:
    properties:
      _can_duplicate:
        type: integer
      _character_flags:
        type: integer
      _crash_bug:
        type: integer
      _target_info:
        type: integer
      _unknown_value:
        type: integer
      account_id:
        type: integer
      bug_report:
        type: string
      bug_status:
        type: integer
      category_id:
        type: integer
      category_name:
        type: string
      character_id:
        type: integer
      character_name:
        type: string
      client_version_id:
        type: integer
      client_version_name:
        type: string
      heading:
        type: integer
      id:
        type: integer
      last_review:
        type: string
      last_reviewer:
        type: string
      optional_info_mask:
        type: integer
      pos_x:
        type: number
      pos_y:
        type: number
      pos_z:
        type: number
      report_datetime:
        type: string
      reporter_name:
        type: string
      reporter_spoof:
        type: integer
      reviewer_notes:
        type: string
      system_info:
        type: string
      target_id:
        type: integer
      target_name:
        type: string
      time_played:
        type: integer
      ui_path:
        type: string
      zone:
        type: string
    type: object
  models.Buyer:
    properties:
      buyslot:
        type: integer
      charid:
        type: integer
      itemid:
        type: integer
      itemname:
        type: string
      price:
        type: integer
      quantity:
        type: integer
    type: object
  models.CharCreatePointAllocation:
    properties:
      alloc_agi:
        type: integer
      alloc_cha:
        type: integer
      alloc_dex:
        type: integer
      alloc_int:
        type: integer
      alloc_sta:
        type: integer
      alloc_str:
        type: integer
      alloc_wis:
        type: integer
      base_agi:
        type: integer
      base_cha:
        type: integer
      base_dex:
        type: integer
      base_int:
        type: integer
      base_sta:
        type: integer
      base_str:
        type: integer
      base_wis:
        type: integer
      id:
        type: integer
    type: object
  models.CharRecipeList:
    properties:
      char_id:
        type: integer
      madecount:
        type: integer
      recipe_id:
        type: integer
    type: object
  models.CharacterActivity:
    properties:
      activityid:
        type: integer
      charid:
        type: integer
      completed:
        type: integer
      donecount:
        type: integer
      taskid:
        type: integer
    type: object
  models.CharacterAltCurrency:
    properties:
      amount:
        type: integer
      char_id:
        type: integer
      currency_id:
        type: integer
    type: object
  models.CharacterAlternateAbility:
    properties:
      aa_id:
        type: integer
      aa_value:
        type: integer
      charges:
        type: integer
      id:
        type: integer
    type: object
  models.CharacterAura:
    properties:
      id:
        type: integer
      slot:
        type: integer
      spell_id:
        type: integer
    type: object
  models.CharacterBandolier:
    properties:
      bandolier_id:
        type: integer
      bandolier_name:
        type: string
      bandolier_slot:
        type: integer
      icon:
        type: integer
      id:
        type: integer
      item_id:
        type: integer
    type: object
  models.CharacterBind:
    properties:
      heading:
        type: number
      id:
        type: integer
      instance_id:
        type: integer
      slot:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
      zone_id:
        type: integer
    type: object
  models.CharacterBuff:
    properties:
      caster_level:
        type: integer
      caster_name:
        type: string
      caston_x:
        type: integer
      caston_y:
        type: integer
      caston_z:
        type: integer
      character_id:
        type: integer
      counters:
        type: integer
      dot_rune:
        type: integer
      extra_di_chance:
        type: integer
      instrument_mod:
        type: integer
      magic_rune:
        type: integer
      melee_rune:
        type: integer
      numhits:
        type: integer
      persistent:
        type: integer
      slot_id:
        type: integer
      spell_id:
        type: integer
      ticsremaining:
        type: integer
    type: object
  models.CharacterCorpse:
    properties:
      beard:
        type: integer
      beard_color:
        type: integer
      charid:
        type: integer
      charname:
        type: string
      class:
        type: integer
      copper:
        type: integer
      deity:
        type: integer
      drakkin_details:
        type: integer
      drakkin_heritage:
        type: integer
      drakkin_tattoo:
        type: integer
      exp:
        type: integer
      eye_color_1:
        type: integer
      eye_color_2:
        type: integer
      face:
        type: integer
      gender:
        type: integer
      gold:
        type: integer
      guild_consent_id:
        type: integer
      hair_color:
        type: integer
      hair_style:
        type: integer
      heading:
        type: number
      helm_texture:
        type: integer
      id:
        type: integer
      instance_id:
        type: integer
      is_buried:
        type: integer
      is_locked:
        type: integer
      is_rezzed:
        type: integer
      level:
        type: integer
      platinum:
        type: integer
      race:
        type: integer
      silver:
        type: integer
      size:
        type: integer
      texture:
        type: integer
      time_of_death:
        type: string
      was_at_graveyard:
        type: integer
      wc_1:
        type: integer
      wc_2:
        type: integer
      wc_3:
        type: integer
      wc_4:
        type: integer
      wc_5:
        type: integer
      wc_6:
        type: integer
      wc_7:
        type: integer
      wc_8:
        type: integer
      wc_9:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
      zone_id:
        type: integer
    type: object
  models.CharacterCurrency:
    properties:
      career_ebon_crystals:
        type: integer
      career_radiant_crystals:
        type: integer
      copper:
        type: integer
      copper_bank:
        type: integer
      copper_cursor:
        type: integer
      ebon_crystals:
        type: integer
      gold:
        type: integer
      gold_bank:
        type: integer
      gold_cursor:
        type: integer
      id:
        type: integer
      platinum:
        type: integer
      platinum_bank:
        type: integer
      platinum_cursor:
        type: integer
      radiant_crystals:
        type: integer
      silver:
        type: integer
      silver_bank:
        type: integer
      silver_cursor:
        type: integer
    type: object
  models.CharacterDatum:
    properties:
      aa_exp:
        type: integer
      aa_points:
        type: integer
      aa_points_old:
        type: integer
      aa_points_spent:
        type: integer
      aa_points_spent_old:
        type: integer
      ability_number:
        type: integer
      ability_time_hours:
        type: integer
      ability_time_minutes:
        type: integer
      ability_time_seconds:
        type: integer
      ability_up:
        type: integer
      account_id:
        type: integer
      adventure_stats:
        items:
          $ref: '#/definitions/models.AdventureStat'
        type: array
      agi:
        type: integer
      air_remaining:
        type: integer
      anon:
        type: integer
      autosplit_enabled:
        type: integer
      beard:
        type: integer
      beard_color:
        type: integer
      birthday:
        type: integer
      buyers:
        items:
          $ref: '#/definitions/models.Buyer'
        type: array
      career_tribute_points:
        type: integer
      cha:
        type: integer
      char_recipe_lists:
        items:
          $ref: '#/definitions/models.CharRecipeList'
        type: array
      character_activities:
        items:
          $ref: '#/definitions/models.CharacterActivity'
        type: array
      character_alt_currencies:
        items:
          $ref: '#/definitions/models.CharacterAltCurrency'
        type: array
      character_alternate_abilities:
        items:
          $ref: '#/definitions/models.CharacterAlternateAbility'
        type: array
      character_auras:
        items:
          $ref: '#/definitions/models.CharacterAura'
        type: array
      character_bandoliers:
        items:
          $ref: '#/definitions/models.CharacterBandolier'
        type: array
      character_binds:
        items:
          $ref: '#/definitions/models.CharacterBind'
        type: array
      character_buffs:
        items:
          $ref: '#/definitions/models.CharacterBuff'
        type: array
      character_corpses:
        items:
          $ref: '#/definitions/models.CharacterCorpse'
        type: array
      character_currencies:
        items:
          $ref: '#/definitions/models.CharacterCurrency'
        type: array
      character_disciplines:
        items:
          $ref: '#/definitions/models.CharacterDiscipline'
        type: array
      character_enabledtasks:
        items:
          $ref: '#/definitions/models.CharacterEnabledtask'
        type: array
      character_inspect_messages:
        items:
          $ref: '#/definitions/models.CharacterInspectMessage'
        type: array
      character_item_recasts:
        items:
          $ref: '#/definitions/models.CharacterItemRecast'
        type: array
      character_languages:
        items:
          $ref: '#/definitions/models.CharacterLanguage'
        type: array
      character_leadership_abilities:
        items:
          $ref: '#/definitions/models.CharacterLeadershipAbility'
        type: array
      character_materials:
        items:
          $ref: '#/definitions/models.CharacterMaterial'
        type: array
      character_memmed_spells:
        items:
          $ref: '#/definitions/models.CharacterMemmedSpell'
        type: array
      character_pet_buffs:
        items:
          $ref: '#/definitions/models.CharacterPetBuff'
        type: array
      character_pet_infos:
        items:
          $ref: '#/definitions/models.CharacterPetInfo'
        type: array
      character_pet_inventories:
        items:
          $ref: '#/definitions/models.CharacterPetInventory'
        type: array
      character_potionbelts:
        items:
          $ref: '#/definitions/models.CharacterPotionbelt'
        type: array
      character_skills:
        items:
          $ref: '#/definitions/models.CharacterSkill'
        type: array
      character_spells:
        items:
          $ref: '#/definitions/models.CharacterSpell'
        type: array
      character_tasks:
        items:
          $ref: '#/definitions/models.CharacterTask'
        type: array
      character_tributes:
        items:
          $ref: '#/definitions/models.CharacterTribute'
        type: array
      class:
        type: integer
      completed_tasks:
        items:
          $ref: '#/definitions/models.CompletedTask'
        type: array
      cur_hp:
        type: integer
      data_buckets:
        items:
          $ref: '#/definitions/models.DataBucket'
        type: array
      deity:
        type: integer
      deleted_at:
        type: string
      dex:
        type: integer
      drakkin_details:
        type: integer
      drakkin_heritage:
        type: integer
      drakkin_tattoo:
        type: integer
      e_aa_effects:
        type: integer
      e_expended_aa_spent:
        type: integer
      e_last_invsnapshot:
        type: integer
      e_percent_to_aa:
        type: integer
      endurance:
        type: integer
      exp:
        type: integer
      eye_color_1:
        type: integer
      eye_color_2:
        type: integer
      face:
        type: integer
      faction_values:
        items:
          $ref: '#/definitions/models.FactionValue'
        type: array
      firstlogon:
        type: integer
      friends:
        items:
          $ref: '#/definitions/models.Friend'
        type: array
      gender:
        type: integer
      gm:
        type: integer
      group_auto_consent:
        type: integer
      group_leadership_exp:
        type: integer
      group_leadership_points:
        type: integer
      guild:
        $ref: '#/definitions/models.Guild'
      guild_auto_consent:
        type: integer
      guild_members:
        items:
          $ref: '#/definitions/models.GuildMember'
        type: array
      hair_color:
        type: integer
      hair_style:
        type: integer
      heading:
        type: number
      hunger_level:
        type: integer
      id:
        type: integer
      instance_list_players:
        items:
          $ref: '#/definitions/models.InstanceListPlayer'
        type: array
      int:
        type: integer
      intoxication:
        type: integer
      inventories:
        items:
          $ref: '#/definitions/models.Inventory'
        type: array
      keyrings:
        items:
          $ref: '#/definitions/models.Keyring'
        type: array
      last_login:
        type: integer
      last_name:
        type: string
      ldon_points_available:
        type: integer
      ldon_points_guk:
        type: integer
      ldon_points_mir:
        type: integer
      ldon_points_mmc:
        type: integer
      ldon_points_ruj:
        type: integer
      ldon_points_tak:
        type: integer
      leadership_exp_on:
        type: integer
      level:
        type: integer
      level_2:
        type: integer
      lfg:
        type: integer
      lfp:
        type: integer
      mail:
        items:
          $ref: '#/definitions/models.Mail'
        type: array
      mailkey:
        type: string
      mana:
        type: integer
      name:
        type: string
      player_titlesets:
        items:
          $ref: '#/definitions/models.PlayerTitleset'
        type: array
      points:
        type: integer
      pvp_2:
        type: integer
      pvp_best_kill_streak:
        type: integer
      pvp_career_points:
        type: integer
      pvp_current_kill_streak:
        type: integer
      pvp_current_points:
        type: integer
      pvp_deaths:
        type: integer
      pvp_kills:
        type: integer
      pvp_status:
        type: integer
      pvp_type:
        type: integer
      pvp_worst_death_streak:
        type: integer
      quest_globals:
        items:
          $ref: '#/definitions/models.QuestGlobal'
        type: array
      race:
        type: integer
      raid_auto_consent:
        type: integer
      raid_leadership_exp:
        type: integer
      raid_leadership_points:
        type: integer
      rest_timer:
        type: integer
      show_helm:
        type: integer
      sta:
        type: integer
      str:
        type: integer
      suffix:
        type: string
      thirst_level:
        type: integer
      time_played:
        type: integer
      timers:
        items:
          $ref: '#/definitions/models.Timer'
        type: array
      title:
        type: string
      titles:
        items:
          $ref: '#/definitions/models.Title'
        type: array
      toxicity:
        type: integer
      traders:
        items:
          $ref: '#/definitions/models.Trader'
        type: array
      tribute_active:
        type: integer
      tribute_points:
        type: integer
      tribute_time_remaining:
        type: integer
      wis:
        type: integer
      x:
        type: number
      xtargets:
        type: integer
      "y":
        type: number
      z:
        type: number
      zone_change_count:
        type: integer
      zone_flags:
        items:
          $ref: '#/definitions/models.ZoneFlag'
        type: array
      zone_id:
        type: integer
      zone_instance:
        type: integer
    type: object
  models.CharacterDiscipline:
    properties:
      disc_id:
        type: integer
      id:
        type: integer
      slot_id:
        type: integer
    type: object
  models.CharacterEnabledtask:
    properties:
      charid:
        type: integer
      taskid:
        type: integer
    type: object
  models.CharacterExpeditionLockout:
    properties:
      character_id:
        type: integer
      duration:
        type: integer
      event_name:
        type: string
      expedition_name:
        type: string
      expire_time:
        type: string
      from_expedition_uuid:
        type: string
      id:
        type: integer
    type: object
  models.CharacterInspectMessage:
    properties:
      id:
        type: integer
      inspect_message:
        type: string
    type: object
  models.CharacterItemRecast:
    properties:
      id:
        type: integer
      recast_type:
        type: integer
      timestamp:
        type: integer
    type: object
  models.CharacterLanguage:
    properties:
      id:
        type: integer
      lang_id:
        type: integer
      value:
        type: integer
    type: object
  models.CharacterLeadershipAbility:
    properties:
      id:
        type: integer
      rank:
        type: integer
      slot:
        type: integer
    type: object
  models.CharacterMaterial:
    properties:
      blue:
        type: integer
      color:
        type: integer
      green:
        type: integer
      id:
        type: integer
      red:
        type: integer
      slot:
        type: integer
      use_tint:
        type: integer
    type: object
  models.CharacterMemmedSpell:
    properties:
      id:
        type: integer
      slot_id:
        type: integer
      spell_id:
        type: integer
    type: object
  models.CharacterPetBuff:
    properties:
      caster_level:
        type: integer
      castername:
        type: string
      char_id:
        type: integer
      counters:
        type: integer
      instrument_mod:
        type: integer
      numhits:
        type: integer
      pet:
        type: integer
      rune:
        type: integer
      slot:
        type: integer
      spell_id:
        type: integer
      ticsremaining:
        type: integer
    type: object
  models.CharacterPetInfo:
    properties:
      char_id:
        type: integer
      hp:
        type: integer
      mana:
        type: integer
      pet:
        type: integer
      petname:
        type: string
      petpower:
        type: integer
      size:
        type: number
      spell_id:
        type: integer
      taunting:
        type: integer
    type: object
  models.CharacterPetInventory:
    properties:
      char_id:
        type: integer
      item_id:
        type: integer
      pet:
        type: integer
      slot:
        type: integer
    type: object
  models.CharacterPotionbelt:
    properties:
      icon:
        type: integer
      id:
        type: integer
      item_id:
        type: integer
      potion_id:
        type: integer
    type: object
  models.CharacterSkill:
    properties:
      id:
        type: integer
      skill_id:
        type: integer
      value:
        type: integer
    type: object
  models.CharacterSpell:
    properties:
      id:
        type: integer
      slot_id:
        type: integer
      spell_id:
        type: integer
    type: object
  models.CharacterTask:
    properties:
      acceptedtime:
        type: integer
      charid:
        type: integer
      slot:
        type: integer
      taskid:
        type: integer
      type:
        type: integer
    type: object
  models.CharacterTribute:
    properties:
      id:
        type: integer
      tier:
        type: integer
      tribute:
        type: integer
    type: object
  models.CompletedTask:
    properties:
      activityid:
        type: integer
      charid:
        type: integer
      completedtime:
        type: integer
      taskid:
        type: integer
    type: object
  models.ContentFlag:
    properties:
      enabled:
        type: integer
      flag_name:
        type: string
      id:
        type: integer
      notes:
        type: string
    type: object
  models.Damageshieldtype:
    properties:
      spellid:
        type: integer
      type:
        type: integer
    type: object
  models.DataBucket:
    properties:
      expires:
        type: integer
      id:
        type: integer
      key:
        type: string
      value:
        type: string
    type: object
  models.DbStr:
    properties:
      id:
        type: integer
      type:
        type: integer
      value:
        type: string
    type: object
  models.DiscoveredItem:
    properties:
      account_status:
        type: integer
      char_name:
        type: string
      discovered_date:
        type: integer
      item_id:
        type: integer
    type: object
  models.Door:
    properties:
      buffer:
        type: number
      client_version_mask:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      dest_heading:
        type: number
      dest_instance:
        type: integer
      dest_x:
        type: number
      dest_y:
        type: number
      dest_z:
        type: number
      dest_zone:
        type: string
      disable_timer:
        type: integer
      door_param:
        type: integer
      doorid:
        type: integer
      doorisopen:
        type: integer
      guild:
        type: integer
      heading:
        type: number
      id:
        type: integer
      incline:
        type: integer
      invert_state:
        type: integer
      is_ldon_door:
        type: integer
      keyitem:
        type: integer
      lockpick:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      name:
        type: string
      nokeyring:
        type: integer
      opentype:
        type: integer
      pos_x:
        type: number
      pos_y:
        type: number
      pos_z:
        type: number
      size:
        type: integer
      triggerdoor:
        type: integer
      triggertype:
        type: integer
      version:
        type: integer
      zone:
        type: string
    type: object
  models.DynamicZone:
    properties:
      compass_x:
        type: number
      compass_y:
        type: number
      compass_z:
        type: number
      compass_zone_id:
        type: integer
      has_zone_in:
        type: integer
      id:
        type: integer
      instance_id:
        type: integer
      safe_return_heading:
        type: number
      safe_return_x:
        type: number
      safe_return_y:
        type: number
      safe_return_z:
        type: number
      safe_return_zone_id:
        type: integer
      type:
        type: integer
      zone_in_heading:
        type: number
      zone_in_x:
        type: number
      zone_in_y:
        type: number
      zone_in_z:
        type: number
    type: object
  models.Eventlog:
    properties:
      accountid:
        type: integer
      accountname:
        type: string
      charname:
        type: string
      description:
        type: string
      descriptiontype:
        type: string
      event_nid:
        type: integer
      id:
        type: integer
      status:
        type: integer
      target:
        type: string
      time:
        type: string
    type: object
  models.Expedition:
    properties:
      add_replay_on_join:
        type: integer
      dynamic_zone_id:
        type: integer
      expedition_name:
        type: string
      id:
        type: integer
      is_locked:
        type: integer
      leader_id:
        type: integer
      max_players:
        type: integer
      min_players:
        type: integer
      uuid:
        type: string
    type: object
  models.ExpeditionLockout:
    properties:
      duration:
        type: integer
      event_name:
        type: string
      expedition_id:
        type: integer
      expire_time:
        type: string
      from_expedition_uuid:
        type: string
      id:
        type: integer
    type: object
  models.ExpeditionMember:
    properties:
      character_id:
        type: integer
      expedition_id:
        type: integer
      id:
        type: integer
      is_current_member:
        type: integer
    type: object
  models.FactionList:
    properties:
      base:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  models.FactionListMod:
    properties:
      faction_id:
        type: integer
      id:
        type: integer
      mod:
        type: integer
      mod_name:
        type: string
    type: object
  models.FactionValue:
    properties:
      char_id:
        type: integer
      current_value:
        type: integer
      faction_id:
        type: integer
      temp:
        type: integer
    type: object
  models.Fishing:
    properties:
      chance:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      id:
        type: integer
      itemid:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      npc_chance:
        type: integer
      npc_id:
        type: integer
      skill_level:
        type: integer
      zoneid:
        type: integer
    type: object
  models.Forage:
    properties:
      chance:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      id:
        type: integer
      itemid:
        type: integer
      level:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      zoneid:
        type: integer
    type: object
  models.Friend:
    properties:
      charid:
        type: integer
      name:
        type: string
      type:
        type: integer
    type: object
  models.GlobalLoot:
    properties:
      bodytype:
        type: string
      class:
        type: string
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      description:
        type: string
      enabled:
        type: integer
      hot_zone:
        type: integer
      id:
        type: integer
      loottable_id:
        type: integer
      max_expansion:
        type: integer
      max_level:
        type: integer
      min_expansion:
        type: integer
      min_level:
        type: integer
      race:
        type: string
      raid:
        type: integer
      rare:
        type: integer
      zone:
        type: string
    type: object
  models.Goallist:
    properties:
      entry:
        type: integer
      listid:
        type: integer
    type: object
  models.Graveyard:
    properties:
      heading:
        type: number
      id:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
      zone_id:
        type: integer
    type: object
  models.Grid:
    properties:
      grid_entries:
        items:
          $ref: '#/definitions/models.GridEntry'
        type: array
      id:
        type: integer
      type:
        type: integer
      type_2:
        type: integer
      zoneid:
        type: integer
    type: object
  models.GridEntry:
    properties:
      centerpoint:
        type: integer
      gridid:
        type: integer
      heading:
        type: number
      number:
        type: integer
      pause:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
      zoneid:
        type: integer
    type: object
  models.GroundSpawn:
    properties:
      comment:
        type: string
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      heading:
        type: number
      id:
        type: integer
      item:
        type: integer
      max_allowed:
        type: integer
      max_expansion:
        type: integer
      max_x:
        type: number
      max_y:
        type: number
      max_z:
        type: number
      min_expansion:
        type: integer
      min_x:
        type: number
      min_y:
        type: number
      name:
        type: string
      respawn_timer:
        type: integer
      version:
        type: integer
      zoneid:
        type: integer
    type: object
  models.Guild:
    properties:
      channel:
        type: string
      guild_banks:
        items:
          $ref: '#/definitions/models.GuildBank'
        type: array
      guild_members:
        items:
          $ref: '#/definitions/models.GuildMember'
        type: array
      guild_ranks:
        items:
          $ref: '#/definitions/models.GuildRank'
        type: array
      id:
        type: integer
      leader:
        type: integer
      minstatus:
        type: integer
      motd:
        type: string
      motd_setter:
        type: string
      name:
        type: string
      tribute:
        type: integer
      url:
        type: string
    type: object
  models.GuildBank:
    properties:
      area:
        type: integer
      donator:
        type: string
      guildid:
        type: integer
      itemid:
        type: integer
      permissions:
        type: integer
      qty:
        type: integer
      slot:
        type: integer
      whofor:
        type: string
    type: object
  models.GuildMember:
    properties:
      alt:
        type: integer
      banker:
        type: integer
      char_id:
        type: integer
      guild_id:
        type: integer
      last_tribute:
        type: integer
      public_note:
        type: string
      rank:
        type: integer
      total_tribute:
        type: integer
      tribute_enable:
        type: integer
    type: object
  models.GuildRank:
    properties:
      can_demote:
        type: integer
      can_hear:
        type: integer
      can_invite:
        type: integer
      can_motd:
        type: integer
      can_promote:
        type: integer
      can_remove:
        type: integer
      can_speak:
        type: integer
      can_warpeace:
        type: integer
      guild_id:
        type: integer
      rank:
        type: integer
      title:
        type: string
    type: object
  models.Hacker:
    properties:
      account:
        type: string
      date:
        type: string
      hacked:
        type: string
      id:
        type: integer
      name:
        type: string
      zone:
        type: string
    type: object
  models.InstanceList:
    properties:
      duration:
        type: integer
      id:
        type: integer
      instance_list_players:
        items:
          $ref: '#/definitions/models.InstanceListPlayer'
        type: array
      is_global:
        type: integer
      never_expires:
        type: integer
      start_time:
        type: integer
      version:
        type: integer
      zone:
        type: integer
      zones:
        items:
          $ref: '#/definitions/models.Zone'
        type: array
    type: object
  models.InstanceListPlayer:
    properties:
      charid:
        type: integer
      id:
        type: integer
    type: object
  models.Inventory:
    properties:
      augslot_1:
        type: integer
      augslot_2:
        type: integer
      augslot_3:
        type: integer
      augslot_4:
        type: integer
      augslot_5:
        type: integer
      augslot_6:
        type: integer
      charges:
        type: integer
      charid:
        type: integer
      color:
        type: integer
      custom_data:
        type: string
      instnodrop:
        type: integer
      item:
        $ref: '#/definitions/models.Item'
      itemid:
        type: integer
      ornament_hero_model:
        type: integer
      ornamenticon:
        type: integer
      ornamentidfile:
        type: integer
      slotid:
        type: integer
    type: object
  models.Item:
    properties:
      aagi:
        type: integer
      ac:
        type: integer
      accuracy:
        type: integer
      acha:
        type: integer
      adex:
        type: integer
      aint:
        type: integer
      artifactflag:
        type: integer
      asta:
        type: integer
      astr:
        type: integer
      attack:
        type: integer
      attuneable:
        type: integer
      augdistiller:
        type: integer
      augrestrict:
        type: integer
      augslot_1_type:
        type: integer
      augslot_1_unk_2:
        type: integer
      augslot_1_visible:
        type: integer
      augslot_2_type:
        type: integer
      augslot_2_unk_2:
        type: integer
      augslot_2_visible:
        type: integer
      augslot_3_type:
        type: integer
      augslot_3_unk_2:
        type: integer
      augslot_3_visible:
        type: integer
      augslot_4_type:
        type: integer
      augslot_4_unk_2:
        type: integer
      augslot_4_visible:
        type: integer
      augslot_5_type:
        type: integer
      augslot_5_unk_2:
        type: integer
      augslot_5_visible:
        type: integer
      augslot_6_type:
        type: integer
      augslot_6_unk_2:
        type: integer
      augslot_6_visible:
        type: integer
      augtype:
        type: integer
      avoidance:
        type: integer
      awis:
        type: integer
      backstabdmg:
        type: integer
      bagsize:
        type: integer
      bagslots:
        type: integer
      bagtype:
        type: integer
      bagwr:
        type: integer
      banedmgamt:
        type: integer
      banedmgbody:
        type: integer
      banedmgrace:
        type: integer
      banedmgraceamt:
        type: integer
      bardeffect:
        type: integer
      bardeffecttype:
        type: integer
      bardlevel:
        type: integer
      bardlevel_2:
        type: integer
      bardname:
        type: string
      bardtype:
        type: integer
      bardunk_1:
        type: integer
      bardunk_2:
        type: integer
      bardunk_3:
        type: integer
      bardunk_4:
        type: integer
      bardunk_5:
        type: integer
      bardunk_7:
        type: integer
      bardvalue:
        type: integer
      benefitflag:
        type: integer
      book:
        type: integer
      booktype:
        type: integer
      casttime:
        type: integer
      casttime_:
        type: integer
      charmfile:
        type: string
      charmfileid:
        type: string
      clairvoyance:
        type: integer
      classes:
        type: integer
      clickeffect:
        type: integer
      clicklevel:
        type: integer
      clicklevel_2:
        type: integer
      clickname:
        type: string
      clicktype:
        type: integer
      clickunk_5:
        type: integer
      clickunk_6:
        type: string
      clickunk_7:
        type: integer
      color:
        type: integer
      combateffects:
        type: string
      comment:
        type: string
      cr:
        type: integer
      created:
        type: string
      damage:
        type: integer
      damageshield:
        type: integer
      deity:
        type: integer
      delay:
        type: integer
      discovered_items:
        items:
          $ref: '#/definitions/models.DiscoveredItem'
        type: array
      dotshielding:
        type: integer
      dr:
        type: integer
      dsmitigation:
        type: integer
      elemdmgamt:
        type: integer
      elemdmgtype:
        type: integer
      elitematerial:
        type: integer
      endur:
        type: integer
      enduranceregen:
        type: integer
      epicitem:
        type: integer
      evoid:
        type: integer
      evoitem:
        type: integer
      evolvinglevel:
        type: integer
      evomax:
        type: integer
      expendablearrow:
        type: integer
      extradmgamt:
        type: integer
      extradmgskill:
        type: integer
      factionamt_1:
        type: integer
      factionamt_2:
        type: integer
      factionamt_3:
        type: integer
      factionamt_4:
        type: integer
      factionmod_1:
        type: integer
      factionmod_2:
        type: integer
      factionmod_3:
        type: integer
      factionmod_4:
        type: integer
      favor:
        type: integer
      filename:
        type: string
      focuseffect:
        type: integer
      focuslevel:
        type: integer
      focuslevel_2:
        type: integer
      focusname:
        type: string
      focustype:
        type: integer
      focusunk_1:
        type: integer
      focusunk_2:
        type: integer
      focusunk_3:
        type: integer
      focusunk_4:
        type: integer
      focusunk_5:
        type: integer
      focusunk_6:
        type: string
      focusunk_7:
        type: integer
      fr:
        type: integer
      fvnodrop:
        type: integer
      guildfavor:
        type: integer
      haste:
        type: integer
      healamt:
        type: integer
      heirloom:
        type: integer
      heroic_agi:
        type: integer
      heroic_cha:
        type: integer
      heroic_cr:
        type: integer
      heroic_dex:
        type: integer
      heroic_dr:
        type: integer
      heroic_fr:
        type: integer
      heroic_int:
        type: integer
      heroic_mr:
        type: integer
      heroic_pr:
        type: integer
      heroic_sta:
        type: integer
      heroic_str:
        type: integer
      heroic_svcorrup:
        type: integer
      heroic_wis:
        type: integer
      herosforgemodel:
        type: integer
      hp:
        type: integer
      icon:
        type: integer
      id:
        type: integer
      idfile:
        type: string
      itemclass:
        type: integer
      itemtype:
        type: integer
      ldonprice:
        type: integer
      ldonsellbackrate:
        type: integer
      ldonsold:
        type: integer
      ldontheme:
        type: integer
      light:
        type: integer
      lore:
        type: string
      lorefile:
        type: string
      loregroup:
        type: integer
      magic:
        type: integer
      mana:
        type: integer
      manaregen:
        type: integer
      material:
        type: integer
      maxcharges:
        type: integer
      minstatus:
        type: integer
      mr:
        type: integer
      name:
        type: string
      nodrop:
        type: integer
      nopet:
        type: integer
      norent:
        type: integer
      notransfer:
        type: integer
      pendingloreflag:
        type: integer
      placeable:
        type: integer
      pointtype:
        type: integer
      potionbelt:
        type: integer
      potionbeltslots:
        type: integer
      powersourcecapacity:
        type: integer
      pr:
        type: integer
      price:
        type: integer
      proceffect:
        type: integer
      proclevel:
        type: integer
      proclevel_2:
        type: integer
      procname:
        type: string
      procrate:
        type: integer
      proctype:
        type: integer
      procunk_1:
        type: integer
      procunk_2:
        type: integer
      procunk_3:
        type: integer
      procunk_4:
        type: integer
      procunk_6:
        type: string
      procunk_7:
        type: integer
      purity:
        type: integer
      questitemflag:
        type: integer
      races:
        type: integer
      range:
        type: integer
      recastdelay:
        type: integer
      recasttype:
        type: integer
      reclevel:
        type: integer
      recskill:
        type: integer
      regen:
        type: integer
      reqlevel:
        type: integer
      scriptfileid:
        type: integer
      scrolleffect:
        type: integer
      scrolllevel:
        type: integer
      scrolllevel_2:
        type: integer
      scrollname:
        type: string
      scrolltype:
        type: integer
      scrollunk_1:
        type: integer
      scrollunk_2:
        type: integer
      scrollunk_3:
        type: integer
      scrollunk_4:
        type: integer
      scrollunk_5:
        type: integer
      scrollunk_6:
        type: string
      scrollunk_7:
        type: integer
      sellrate:
        type: number
      serialization:
        type: string
      serialized:
        type: string
      shielding:
        type: integer
      size:
        type: integer
      skillmodmax:
        type: integer
      skillmodtype:
        type: integer
      skillmodvalue:
        type: integer
      slots:
        type: integer
      source:
        type: string
      spelldmg:
        type: integer
      spellshield:
        type: integer
      stackable:
        type: integer
      stacksize:
        type: integer
      strikethrough:
        type: integer
      stunresist:
        type: integer
      subtype:
        type: integer
      summonedflag:
        type: integer
      svcorruption:
        type: integer
      tradeskills:
        type: integer
      unk_012:
        type: integer
      unk_013:
        type: integer
      unk_014:
        type: integer
      unk_033:
        type: integer
      unk_054:
        type: integer
      unk_059:
        type: integer
      unk_060:
        type: integer
      unk_120:
        type: integer
      unk_121:
        type: integer
      unk_123:
        type: integer
      unk_124:
        type: integer
      unk_127:
        type: integer
      unk_132:
        type: string
      unk_134:
        type: string
      unk_137:
        type: integer
      unk_142:
        type: integer
      unk_147:
        type: integer
      unk_152:
        type: integer
      unk_157:
        type: integer
      unk_193:
        type: integer
      unk_214:
        type: integer
      unk_220:
        type: integer
      unk_221:
        type: integer
      unk_223:
        type: integer
      unk_224:
        type: integer
      unk_225:
        type: integer
      unk_226:
        type: integer
      unk_227:
        type: integer
      unk_228:
        type: integer
      unk_229:
        type: integer
      unk_230:
        type: integer
      unk_231:
        type: integer
      unk_232:
        type: integer
      unk_233:
        type: integer
      unk_234:
        type: integer
      unk_236:
        type: integer
      unk_237:
        type: integer
      unk_238:
        type: integer
      unk_239:
        type: integer
      unk_240:
        type: integer
      unk_241:
        type: integer
      updated:
        type: string
      verified:
        type: string
      weight:
        type: integer
      worneffect:
        type: integer
      wornlevel:
        type: integer
      wornlevel_2:
        type: integer
      wornname:
        type: string
      worntype:
        type: integer
      wornunk_1:
        type: integer
      wornunk_2:
        type: integer
      wornunk_3:
        type: integer
      wornunk_4:
        type: integer
      wornunk_5:
        type: integer
      wornunk_6:
        type: string
      wornunk_7:
        type: integer
    type: object
  models.Keyring:
    properties:
      char_id:
        type: integer
      item_id:
        type: integer
    type: object
  models.LdonTrapEntry:
    properties:
      id:
        type: integer
      trap_id:
        type: integer
    type: object
  models.LdonTrapTemplate:
    properties:
      id:
        type: integer
      locked:
        type: integer
      skill:
        type: integer
      spell_id:
        type: integer
      type:
        type: integer
    type: object
  models.LoginAccount:
    properties:
      account_email:
        type: string
      account_name:
        type: string
      account_password:
        type: string
      created_at:
        type: string
      id:
        type: integer
      last_ip_address:
        type: string
      last_login_date:
        type: string
      source_loginserver:
        type: string
      updated_at:
        type: string
    type: object
  models.LoginApiToken:
    properties:
      can_read:
        type: integer
      can_write:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
    type: object
  models.LoginServerAdmin:
    properties:
      account_name:
        type: string
      account_password:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      registration_date:
        type: string
      registration_ip_address:
        type: string
    type: object
  models.LoginServerListType:
    properties:
      description:
        type: string
      id:
        type: integer
    type: object
  models.LoginWorldServer:
    properties:
      id:
        type: integer
      is_server_trusted:
        type: integer
      last_ip_address:
        type: string
      last_login_date:
        type: string
      login_server_admin_id:
        type: integer
      login_server_list_type_id:
        type: integer
      long_name:
        type: string
      note:
        type: string
      short_name:
        type: string
      tag_description:
        type: string
    type: object
  models.Lootdrop:
    properties:
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      id:
        type: integer
      lootdrop_entries:
        items:
          $ref: '#/definitions/models.LootdropEntry'
        type: array
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      name:
        type: string
    type: object
  models.LootdropEntry:
    properties:
      chance:
        type: number
      disabled_chance:
        type: number
      equip_item:
        type: integer
      item:
        $ref: '#/definitions/models.Item'
      item_charges:
        type: integer
      item_id:
        type: integer
      lootdrop_id:
        type: integer
      multiplier:
        type: integer
      npc_max_level:
        type: integer
      npc_min_level:
        type: integer
      trivial_max_level:
        type: integer
      trivial_min_level:
        type: integer
    type: object
  models.Loottable:
    properties:
      avgcoin:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      done:
        type: integer
      id:
        type: integer
      loottable_entries:
        items:
          $ref: '#/definitions/models.LoottableEntry'
        type: array
      max_expansion:
        type: integer
      maxcash:
        type: integer
      min_expansion:
        type: integer
      mincash:
        type: integer
      name:
        type: string
    type: object
  models.LoottableEntry:
    properties:
      droplimit:
        type: integer
      lootdrop_entries:
        items:
          $ref: '#/definitions/models.LootdropEntry'
        type: array
      lootdrop_id:
        type: integer
      loottable_id:
        type: integer
      mindrop:
        type: integer
      multiplier:
        type: integer
      probability:
        type: number
    type: object
  models.Mail:
    properties:
      body:
        type: string
      charid:
        type: integer
      from:
        type: string
      msgid:
        type: integer
      status:
        type: integer
      subject:
        type: string
      timestamp:
        type: integer
      to:
        type: string
    type: object
  models.Merchantlist:
    properties:
      alt_currency_cost:
        type: integer
      classes_required:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      faction_required:
        type: integer
      item:
        type: integer
      level_required:
        type: integer
      max_expansion:
        type: integer
      merchantid:
        type: integer
      min_expansion:
        type: integer
      probability:
        type: integer
      slot:
        type: integer
    type: object
  models.NameFilter:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.NpcEmote:
    properties:
      emoteid:
        type: integer
      event_:
        type: integer
      id:
        type: integer
      text:
        type: string
      type:
        type: integer
    type: object
  models.NpcFaction:
    properties:
      id:
        type: integer
      ignore_primary_assist:
        type: integer
      name:
        type: string
      npc_faction_entries:
        items:
          $ref: '#/definitions/models.NpcFactionEntry'
        type: array
      primaryfaction:
        type: integer
    type: object
  models.NpcFactionEntry:
    properties:
      faction_id:
        type: integer
      npc_faction_id:
        type: integer
      npc_value:
        type: integer
      temp:
        type: integer
      value:
        type: integer
    type: object
  models.NpcSpell:
    properties:
      attack_proc:
        type: integer
      defensive_proc:
        type: integer
      dproc_chance:
        type: integer
      engaged_b_other_chance:
        type: integer
      engaged_b_self_chance:
        type: integer
      engaged_d_chance:
        type: integer
      engaged_no_sp_recast_max:
        type: integer
      engaged_no_sp_recast_min:
        type: integer
      fail_recast:
        type: integer
      id:
        type: integer
      idle_b_chance:
        type: integer
      idle_no_sp_recast_max:
        type: integer
      idle_no_sp_recast_min:
        type: integer
      name:
        type: string
      npc_spells_entries:
        items:
          $ref: '#/definitions/models.NpcSpellsEntry'
        type: array
      parent_list:
        type: integer
      proc_chance:
        type: integer
      pursue_d_chance:
        type: integer
      pursue_no_sp_recast_max:
        type: integer
      pursue_no_sp_recast_min:
        type: integer
      range_proc:
        type: integer
      rproc_chance:
        type: integer
    type: object
  models.NpcSpellsEffect:
    properties:
      id:
        type: integer
      name:
        type: string
      npc_spells_effects_entries:
        items:
          $ref: '#/definitions/models.NpcSpellsEffectsEntry'
        type: array
      parent_list:
        type: integer
    type: object
  models.NpcSpellsEffectsEntry:
    properties:
      id:
        type: integer
      maxlevel:
        type: integer
      minlevel:
        type: integer
      npc_spells_effects_id:
        type: integer
      se_base:
        type: integer
      se_limit:
        type: integer
      se_max:
        type: integer
      spell_effect_id:
        type: integer
    type: object
  models.NpcSpellsEntry:
    properties:
      id:
        type: integer
      manacost:
        type: integer
      max_hp:
        type: integer
      maxlevel:
        type: integer
      min_hp:
        type: integer
      minlevel:
        type: integer
      npc_spells_id:
        type: integer
      priority:
        type: integer
      recast_delay:
        type: integer
      resist_adjust:
        type: integer
      spellid:
        type: integer
      type:
        type: integer
    type: object
  models.NpcType:
    properties:
      _int:
        type: integer
      ac:
        type: integer
      accuracy:
        type: integer
      adventure_template_id:
        type: integer
      aggroradius:
        type: integer
      agi:
        type: integer
      alt_currency_id:
        type: integer
      alternate_currency:
        $ref: '#/definitions/models.AlternateCurrency'
      always_aggro:
        type: integer
      ammo_idfile:
        type: string
      armortint_blue:
        type: integer
      armortint_green:
        type: integer
      armortint_id:
        type: integer
      armortint_red:
        type: integer
      armtexture:
        type: integer
      assistradius:
        type: integer
      atk:
        type: integer
      attack_count:
        type: integer
      attack_delay:
        type: integer
      attack_speed:
        type: number
      avoidance:
        type: integer
      bodytype:
        type: integer
      bracertexture:
        type: integer
      cha:
        type: integer
      charm_ac:
        type: integer
      charm_accuracy_rating:
        type: integer
      charm_atk:
        type: integer
      charm_attack_delay:
        type: integer
      charm_avoidance_rating:
        type: integer
      charm_max_dmg:
        type: integer
      charm_min_dmg:
        type: integer
      class:
        type: integer
      corrup:
        type: integer
      cr:
        type: integer
      d_melee_texture_1:
        type: integer
      d_melee_texture_2:
        type: integer
      dex:
        type: integer
      dr:
        type: integer
      drakkin_details:
        type: integer
      drakkin_heritage:
        type: integer
      drakkin_tattoo:
        type: integer
      emoteid:
        type: integer
      exclude:
        type: integer
      exp_mod:
        type: integer
      face:
        type: integer
      feettexture:
        type: integer
      findable:
        type: integer
      fixed:
        type: integer
      flymode:
        type: integer
      fr:
        type: integer
      gender:
        type: integer
      handtexture:
        type: integer
      healscale:
        type: number
      helmtexture:
        type: integer
      herosforgemodel:
        type: integer
      hp:
        type: integer
      hp_regen_rate:
        type: integer
      id:
        type: integer
      ignore_despawn:
        type: integer
      isbot:
        type: integer
      isquest:
        type: integer
      lastname:
        type: string
      legtexture:
        type: integer
      level:
        type: integer
      light:
        type: integer
      loottable_id:
        type: integer
      luclin_beard:
        type: integer
      luclin_beardcolor:
        type: integer
      luclin_eyecolor:
        type: integer
      luclin_eyecolor_2:
        type: integer
      luclin_haircolor:
        type: integer
      luclin_hairstyle:
        type: integer
      mana:
        type: integer
      mana_regen_rate:
        type: integer
      maxdmg:
        type: integer
      maxlevel:
        type: integer
      merchant_id:
        type: integer
      merchantlists:
        items:
          $ref: '#/definitions/models.Merchantlist'
        type: array
      mindmg:
        type: integer
      model:
        type: integer
      mr:
        type: integer
      name:
        type: string
      no_target_hotkey:
        type: integer
      npc_aggro:
        type: integer
      npc_emotes:
        items:
          $ref: '#/definitions/models.NpcEmote'
        type: array
      npc_faction_id:
        type: integer
      npc_factions:
        items:
          $ref: '#/definitions/models.NpcFaction'
        type: array
      npc_spells:
        items:
          $ref: '#/definitions/models.NpcSpell'
        type: array
      npc_spells_effects_id:
        type: integer
      npc_spells_id:
        type: integer
      npc_types_tint:
        $ref: '#/definitions/models.NpcTypesTint'
      npcspecialattks:
        type: string
      peqid:
        type: integer
      ph_r:
        type: integer
      pr:
        type: integer
      prim_melee_type:
        type: integer
      private_corpse:
        type: integer
      qglobal:
        type: integer
      race:
        type: integer
      raid_target:
        type: integer
      ranged_type:
        type: integer
      rare_spawn:
        type: integer
      runspeed:
        type: number
      scalerate:
        type: integer
      sec_melee_type:
        type: integer
      see_hide:
        type: integer
      see_improved_hide:
        type: integer
      see_invis:
        type: integer
      see_invis_undead:
        type: integer
      show_name:
        type: integer
      size:
        type: number
      skip_global_loot:
        type: integer
      slow_mitigation:
        type: integer
      spawn_limit:
        type: integer
      spawnentries:
        items:
          $ref: '#/definitions/models.Spawnentry'
        type: array
      special_abilities:
        type: string
      spellscale:
        type: number
      sta:
        type: integer
      str:
        type: integer
      stuck_behavior:
        type: integer
      texture:
        type: integer
      trackable:
        type: integer
      trap_template:
        type: integer
      underwater:
        type: integer
      unique_:
        type: integer
      unique_spawn_by_name:
        type: integer
      untargetable:
        type: integer
      version:
        type: integer
      walkspeed:
        type: integer
      wis:
        type: integer
    type: object
  models.NpcTypesTint:
    properties:
      blu_1_h:
        type: integer
      blu_2_c:
        type: integer
      blu_3_a:
        type: integer
      blu_4_b:
        type: integer
      blu_5_g:
        type: integer
      blu_6_l:
        type: integer
      blu_7_f:
        type: integer
      blu_8_x:
        type: integer
      blu_9_x:
        type: integer
      grn_1_h:
        type: integer
      grn_2_c:
        type: integer
      grn_3_a:
        type: integer
      grn_4_b:
        type: integer
      grn_5_g:
        type: integer
      grn_6_l:
        type: integer
      grn_7_f:
        type: integer
      grn_8_x:
        type: integer
      grn_9_x:
        type: integer
      id:
        type: integer
      red_1_h:
        type: integer
      red_2_c:
        type: integer
      red_3_a:
        type: integer
      red_4_b:
        type: integer
      red_5_g:
        type: integer
      red_6_l:
        type: integer
      red_7_f:
        type: integer
      red_8_x:
        type: integer
      red_9_x:
        type: integer
      tint_set_name:
        type: string
    type: object
  models.Object:
    properties:
      charges:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      display_name:
        type: string
      heading:
        type: number
      icon:
        type: integer
      id:
        type: integer
      itemid:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      objectname:
        type: string
      size:
        type: number
      tilt_x:
        type: number
      tilt_y:
        type: number
      type:
        type: integer
      unknown_08:
        type: integer
      unknown_10:
        type: integer
      unknown_20:
        type: integer
      unknown_24:
        type: integer
      unknown_60:
        type: integer
      unknown_64:
        type: integer
      unknown_68:
        type: integer
      unknown_72:
        type: integer
      unknown_76:
        type: integer
      unknown_84:
        type: integer
      version:
        type: integer
      xpos:
        type: number
      ypos:
        type: number
      zoneid:
        type: integer
      zpos:
        type: number
    type: object
  models.PlayerTitleset:
    properties:
      char_id:
        type: integer
      id:
        type: integer
      title_set:
        type: integer
    type: object
  models.QuestGlobal:
    properties:
      charid:
        type: integer
      expdate:
        type: integer
      name:
        type: string
      npcid:
        type: integer
      value:
        type: string
      zoneid:
        type: integer
    type: object
  models.Report:
    properties:
      id:
        type: integer
      name:
        type: string
      reported:
        type: string
      reported_text:
        type: string
    type: object
  models.RespawnTime:
    properties:
      duration:
        type: integer
      id:
        type: integer
      instance_id:
        type: integer
      start:
        type: integer
    type: object
  models.Saylink:
    properties:
      id:
        type: integer
      phrase:
        type: string
    type: object
  models.ServerDatabaseConnection:
    properties:
      content_db_host:
        type: string
      content_db_name:
        type: string
      content_db_password:
        type: string
      content_db_port:
        type: string
      content_db_username:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      created_from_ip:
        type: string
      db_host:
        type: string
      db_name:
        type: string
      db_password:
        type: string
      db_port:
        type: string
      db_username:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.ServerScheduledEvent:
    properties:
      created_at:
        type: string
      cron_expression:
        type: string
      day_end:
        type: integer
      day_start:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      event_data:
        type: string
      event_type:
        type: string
      hour_end:
        type: integer
      hour_start:
        type: integer
      id:
        type: integer
      minute_end:
        type: integer
      minute_start:
        type: integer
      month_end:
        type: integer
      month_start:
        type: integer
      year_end:
        type: integer
      year_start:
        type: integer
    type: object
  models.Sharedbank:
    properties:
      acctid:
        type: integer
      augslot_1:
        type: integer
      augslot_2:
        type: integer
      augslot_3:
        type: integer
      augslot_4:
        type: integer
      augslot_5:
        type: integer
      augslot_6:
        type: integer
      charges:
        type: integer
      custom_data:
        type: string
      itemid:
        type: integer
      slotid:
        type: integer
    type: object
  models.Spawn2:
    properties:
      _condition:
        type: integer
      animation:
        type: integer
      cond_value:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      enabled:
        type: integer
      heading:
        type: number
      id:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      path_when_zone_idle:
        type: integer
      pathgrid:
        type: integer
      respawntime:
        type: integer
      spawnentries:
        items:
          $ref: '#/definitions/models.Spawnentry'
        type: array
      spawngroup:
        $ref: '#/definitions/models.Spawngroup'
      spawngroup_id:
        type: integer
      variance:
        type: integer
      version:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
      zone:
        type: string
    type: object
  models.SpawnCondition:
    properties:
      id:
        type: integer
      name:
        type: string
      onchange:
        type: integer
      value:
        type: integer
      zone:
        type: string
    type: object
  models.SpawnConditionValue:
    properties:
      id:
        type: integer
      instance_id:
        type: integer
      value:
        type: integer
      zone:
        type: string
    type: object
  models.SpawnEvent:
    properties:
      action:
        type: integer
      argument:
        type: integer
      cond_id:
        type: integer
      enabled:
        type: integer
      id:
        type: integer
      name:
        type: string
      next_day:
        type: integer
      next_hour:
        type: integer
      next_minute:
        type: integer
      next_month:
        type: integer
      next_year:
        type: integer
      period:
        type: integer
      strict:
        type: integer
      zone:
        type: string
    type: object
  models.Spawnentry:
    properties:
      chance:
        type: integer
      condition_value_filter:
        type: integer
      npc_id:
        type: integer
      npc_type:
        $ref: '#/definitions/models.NpcType'
      spawngroup:
        $ref: '#/definitions/models.Spawngroup'
      spawngroup_id:
        type: integer
    type: object
  models.Spawngroup:
    properties:
      delay:
        type: integer
      despawn:
        type: integer
      despawn_timer:
        type: integer
      dist:
        type: number
      id:
        type: integer
      max_x:
        type: number
      max_y:
        type: number
      min_x:
        type: number
      min_y:
        type: number
      mindelay:
        type: integer
      name:
        type: string
      spawn_2:
        $ref: '#/definitions/models.Spawn2'
      spawn_limit:
        type: integer
      wp_spawns:
        type: integer
    type: object
  models.SpellBucket:
    properties:
      key:
        type: string
      spellid:
        type: integer
      value:
        type: string
    type: object
  models.SpellGlobal:
    properties:
      qglobal:
        type: string
      spell_name:
        type: string
      spellid:
        type: integer
      value:
        type: string
    type: object
  models.SpellsNew:
    properties:
      activated:
        type: integer
      ae_duration:
        type: integer
      aemaxtargets:
        type: integer
      allowrest:
        type: integer
      aoerange:
        type: integer
      aura:
        $ref: '#/definitions/models.Aura'
      basediff:
        type: integer
      blocked_spells:
        items:
          $ref: '#/definitions/models.BlockedSpell'
        type: array
      bonushate:
        type: integer
      buffduration:
        type: integer
      buffdurationformula:
        type: integer
      can_mgb:
        type: integer
      cast_not_standing:
        type: integer
      cast_on_other:
        type: string
      cast_on_you:
        type: string
      cast_restriction:
        type: integer
      cast_time:
        type: integer
      casting_anim:
        type: integer
      classes_1:
        type: integer
      classes_2:
        type: integer
      classes_3:
        type: integer
      classes_4:
        type: integer
      classes_5:
        type: integer
      classes_6:
        type: integer
      classes_7:
        type: integer
      classes_8:
        type: integer
      classes_9:
        type: integer
      classes_10:
        type: integer
      classes_11:
        type: integer
      classes_12:
        type: integer
      classes_13:
        type: integer
      classes_14:
        type: integer
      classes_15:
        type: integer
      classes_16:
        type: integer
      component_counts_1:
        type: integer
      component_counts_2:
        type: integer
      component_counts_3:
        type: integer
      component_counts_4:
        type: integer
      components_1:
        type: integer
      components_2:
        type: integer
      components_3:
        type: integer
      components_4:
        type: integer
      cone_start_angle:
        type: integer
      cone_stop_angle:
        type: integer
      damageshieldtypes:
        items:
          $ref: '#/definitions/models.Damageshieldtype'
        type: array
      deities_0:
        type: integer
      deities_1:
        type: integer
      deities_2:
        type: integer
      deities_3:
        type: integer
      deities_4:
        type: integer
      deities_5:
        type: integer
      deities_6:
        type: integer
      deities_7:
        type: integer
      deities_8:
        type: integer
      deities_9:
        type: integer
      deities_10:
        type: integer
      deities_11:
        type: integer
      deities_12:
        type: integer
      deities_13:
        type: integer
      deities_14:
        type: integer
      deities_15:
        type: integer
      deities_16:
        type: integer
      deleteable:
        type: integer
      descnum:
        type: integer
      disallow_sit:
        type: integer
      dot_stacking_exempt:
        type: integer
      effect_base_value_1:
        type: integer
      effect_base_value_2:
        type: integer
      effect_base_value_3:
        type: integer
      effect_base_value_4:
        type: integer
      effect_base_value_5:
        type: integer
      effect_base_value_6:
        type: integer
      effect_base_value_7:
        type: integer
      effect_base_value_8:
        type: integer
      effect_base_value_9:
        type: integer
      effect_base_value_10:
        type: integer
      effect_base_value_11:
        type: integer
      effect_base_value_12:
        type: integer
      effect_limit_value_1:
        type: integer
      effect_limit_value_2:
        type: integer
      effect_limit_value_3:
        type: integer
      effect_limit_value_4:
        type: integer
      effect_limit_value_5:
        type: integer
      effect_limit_value_6:
        type: integer
      effect_limit_value_7:
        type: integer
      effect_limit_value_8:
        type: integer
      effect_limit_value_9:
        type: integer
      effect_limit_value_10:
        type: integer
      effect_limit_value_11:
        type: integer
      effect_limit_value_12:
        type: integer
      effectdescnum:
        type: integer
      effectdescnum_2:
        type: integer
      effectid_1:
        type: integer
      effectid_2:
        type: integer
      effectid_3:
        type: integer
      effectid_4:
        type: integer
      effectid_5:
        type: integer
      effectid_6:
        type: integer
      effectid_7:
        type: integer
      effectid_8:
        type: integer
      effectid_9:
        type: integer
      effectid_10:
        type: integer
      effectid_11:
        type: integer
      effectid_12:
        type: integer
      endur_cost:
        type: integer
      endur_timer_index:
        type: integer
      endur_upkeep:
        type: integer
      environment_type:
        type: integer
      field_142:
        type: integer
      field_143:
        type: integer
      field_152:
        type: integer
      field_153:
        type: integer
      field_160:
        type: integer
      field_163:
        type: integer
      field_164:
        type: integer
      field_169:
        type: integer
      field_170:
        type: integer
      field_171:
        type: integer
      field_172:
        type: integer
      field_181:
        type: integer
      field_182:
        type: integer
      field_198:
        type: integer
      field_199:
        type: integer
      field_203:
        type: integer
      field_204:
        type: integer
      field_206:
        type: integer
      field_209:
        type: integer
      field_210:
        type: integer
      field_215:
        type: integer
      field_216:
        type: integer
      field_217:
        type: integer
      field_220:
        type: integer
      field_221:
        type: integer
      field_222:
        type: integer
      field_223:
        type: integer
      field_225:
        type: integer
      field_226:
        type: integer
      field_232:
        type: integer
      field_233:
        type: integer
      field_234:
        type: integer
      field_235:
        type: integer
      field_236:
        type: integer
      formula_1:
        type: integer
      formula_2:
        type: integer
      formula_3:
        type: integer
      formula_4:
        type: integer
      formula_5:
        type: integer
      formula_6:
        type: integer
      formula_7:
        type: integer
      formula_8:
        type: integer
      formula_9:
        type: integer
      formula_10:
        type: integer
      formula_11:
        type: integer
      formula_12:
        type: integer
      good_effect:
        type: integer
      hate_added:
        type: integer
      icon:
        type: integer
      id:
        type: integer
      in_combat:
        type: integer
      is_discipline:
        type: integer
      ldon_trap:
        type: integer
      light_type:
        type: integer
      mana:
        type: integer
      max_1:
        type: integer
      max_2:
        type: integer
      max_3:
        type: integer
      max_4:
        type: integer
      max_5:
        type: integer
      max_6:
        type: integer
      max_7:
        type: integer
      max_8:
        type: integer
      max_9:
        type: integer
      max_10:
        type: integer
      max_11:
        type: integer
      max_12:
        type: integer
      max_dist:
        type: number
      max_dist_mod:
        type: number
      max_resist:
        type: integer
      maxtargets:
        type: integer
      memicon:
        type: integer
      min_dist:
        type: number
      min_dist_mod:
        type: number
      min_range:
        type: integer
      min_resist:
        type: integer
      name:
        type: string
      new_icon:
        type: integer
      nimbuseffect:
        type: integer
      no_block:
        type: integer
      no_partial_resist:
        type: integer
      nodispell:
        type: integer
      noexpend_reagent_1:
        type: integer
      noexpend_reagent_2:
        type: integer
      noexpend_reagent_3:
        type: integer
      noexpend_reagent_4:
        type: integer
      not_extendable:
        type: integer
      npc_category:
        type: integer
      npc_no_los:
        type: integer
      npc_usefulness:
        type: integer
      numhits:
        type: integer
      numhitstype:
        type: integer
      other_casts:
        type: string
      outof_combat:
        type: integer
      pcnpc_only_flag:
        type: integer
      persistdeath:
        type: integer
      player_1:
        type: string
      pushback:
        type: integer
      pushup:
        type: integer
      pvpresistbase:
        type: integer
      pvpresistcalc:
        type: integer
      pvpresistcap:
        type: integer
      range:
        type: integer
      rank:
        type: integer
      recast_time:
        type: integer
      recourse_link:
        type: integer
      recovery_time:
        type: integer
      reflectable:
        type: integer
      resist_diff:
        type: integer
      resisttype:
        type: integer
      short_buff_box:
        type: integer
      skill:
        type: integer
      sneaking:
        type: integer
      songcap:
        type: integer
      spell_affect_index:
        type: integer
      spell_buckets:
        items:
          $ref: '#/definitions/models.SpellBucket'
        type: array
      spell_category:
        type: integer
      spell_fades:
        type: string
      spell_globals:
        items:
          $ref: '#/definitions/models.SpellGlobal'
        type: array
      spellanim:
        type: integer
      spellgroup:
        type: integer
      suspendable:
        type: integer
      target_anim:
        type: integer
      targettype:
        type: integer
      teleport_zone:
        type: string
      time_of_day:
        type: integer
      travel_type:
        type: integer
      typedescnum:
        type: integer
      uninterruptable:
        type: integer
      viral_range:
        type: integer
      viral_targets:
        type: integer
      viral_timer:
        type: integer
      you_cast:
        type: string
      zonetype:
        type: integer
    type: object
  models.StartingItem:
    properties:
      class:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      deityid:
        type: integer
      gm:
        type: integer
      id:
        type: integer
      item_charges:
        type: integer
      itemid:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      race:
        type: integer
      slot:
        type: integer
      zoneid:
        type: integer
    type: object
  models.Task:
    properties:
      cashreward:
        type: integer
      completion_emote:
        type: string
      description:
        type: string
      duration:
        type: integer
      duration_code:
        type: integer
      faction_reward:
        type: integer
      id:
        type: integer
      maxlevel:
        type: integer
      minlevel:
        type: integer
      repeatable:
        type: integer
      reward:
        type: string
      rewardid:
        type: integer
      rewardmethod:
        type: integer
      task_activities:
        items:
          $ref: '#/definitions/models.TaskActivity'
        type: array
      tasksets:
        items:
          $ref: '#/definitions/models.Taskset'
        type: array
      title:
        type: string
      type:
        type: integer
      xpreward:
        type: integer
    type: object
  models.TaskActivity:
    properties:
      activityid:
        type: integer
      activitytype:
        type: integer
      delivertonpc:
        type: integer
      description_override:
        type: string
      goalcount:
        type: integer
      goalid:
        type: integer
      goallists:
        items:
          $ref: '#/definitions/models.Goallist'
        type: array
      goalmethod:
        type: integer
      item_list:
        type: string
      npc_type:
        $ref: '#/definitions/models.NpcType'
      optional:
        type: integer
      skill_list:
        type: string
      spell_list:
        type: string
      step:
        type: integer
      target_name:
        type: string
      taskid:
        type: integer
      zones:
        type: string
    type: object
  models.Taskset:
    properties:
      id:
        type: integer
      taskid:
        type: integer
    type: object
  models.Timer:
    properties:
      char_id:
        type: integer
      duration:
        type: integer
      enable:
        type: integer
      start:
        type: integer
      type:
        type: integer
    type: object
  models.Title:
    properties:
      char_id:
        type: integer
      class:
        type: integer
      gender:
        type: integer
      id:
        type: integer
      item_id:
        type: integer
      max_aa_points:
        type: integer
      max_skill_value:
        type: integer
      min_aa_points:
        type: integer
      min_skill_value:
        type: integer
      prefix:
        type: string
      skill_id:
        type: integer
      status:
        type: integer
      suffix:
        type: string
      title_set:
        type: integer
    type: object
  models.Trader:
    properties:
      char_id:
        type: integer
      charges:
        type: integer
      item_cost:
        type: integer
      item_id:
        type: integer
      serialnumber:
        type: integer
      slot_id:
        type: integer
    type: object
  models.TradeskillRecipe:
    properties:
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      enabled:
        type: integer
      id:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      must_learn:
        type: integer
      name:
        type: string
      nofail:
        type: integer
      notes:
        type: string
      quest:
        type: integer
      replace_container:
        type: integer
      skillneeded:
        type: integer
      tradeskill:
        type: integer
      trivial:
        type: integer
    type: object
  models.TradeskillRecipeEntry:
    properties:
      componentcount:
        type: integer
      failcount:
        type: integer
      id:
        type: integer
      iscontainer:
        type: integer
      item_id:
        type: integer
      recipe_id:
        type: integer
      salvagecount:
        type: integer
      successcount:
        type: integer
    type: object
  models.Trap:
    properties:
      chance:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      despawn_when_triggered:
        type: integer
      effect:
        type: integer
      effectvalue:
        type: integer
      effectvalue_2:
        type: integer
      group:
        type: integer
      id:
        type: integer
      level:
        type: integer
      max_expansion:
        type: integer
      maxzdiff:
        type: number
      message:
        type: string
      min_expansion:
        type: integer
      radius:
        type: number
      respawn_time:
        type: integer
      respawn_var:
        type: integer
      skill:
        type: integer
      triggered_number:
        type: integer
      undetectable:
        type: integer
      version:
        type: integer
      x:
        type: integer
      "y":
        type: integer
      z:
        type: integer
      zone:
        type: string
    type: object
  models.Tribute:
    properties:
      descr:
        type: string
      id:
        type: integer
      isguild:
        type: integer
      name:
        type: string
      unknown:
        type: integer
    type: object
  models.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      owned_connections:
        items:
          $ref: '#/definitions/models.ServerDatabaseConnection'
        type: array
      provider:
        type: string
      updated_at:
        type: string
      user_connections:
        items:
          $ref: '#/definitions/models.UserServerDatabaseConnection'
        type: array
      user_name:
        type: string
    type: object
  models.UserServerDatabaseConnection:
    properties:
      active:
        type: integer
      created_at:
        type: string
      created_by:
        type: integer
      database_connection:
        $ref: '#/definitions/models.ServerDatabaseConnection'
      deleted_at:
        type: string
      id:
        type: integer
      server_database_connection_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Zone:
    properties:
      canbind:
        type: integer
      cancombat:
        type: integer
      canlevitate:
        type: integer
      castoutdoor:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      expansion:
        type: integer
      fast_regen_endurance:
        type: integer
      fast_regen_hp:
        type: integer
      fast_regen_mana:
        type: integer
      file_name:
        type: string
      flag_needed:
        type: string
      fog_blue:
        type: integer
      fog_blue_1:
        type: integer
      fog_blue_2:
        type: integer
      fog_blue_3:
        type: integer
      fog_blue_4:
        type: integer
      fog_density:
        type: number
      fog_green:
        type: integer
      fog_green_1:
        type: integer
      fog_green_2:
        type: integer
      fog_green_3:
        type: integer
      fog_green_4:
        type: integer
      fog_maxclip:
        type: number
      fog_maxclip_1:
        type: number
      fog_maxclip_2:
        type: number
      fog_maxclip_3:
        type: number
      fog_maxclip_4:
        type: number
      fog_minclip:
        type: number
      fog_minclip_1:
        type: number
      fog_minclip_2:
        type: number
      fog_minclip_3:
        type: number
      fog_minclip_4:
        type: number
      fog_red:
        type: integer
      fog_red_1:
        type: integer
      fog_red_2:
        type: integer
      fog_red_3:
        type: integer
      fog_red_4:
        type: integer
      graveyard_id:
        type: number
      gravity:
        type: number
      hotzone:
        type: integer
      id:
        type: integer
      insttype:
        type: integer
      long_name:
        type: string
      map_file_name:
        type: string
      max_expansion:
        type: integer
      max_movement_update_range:
        type: integer
      maxclients:
        type: integer
      maxclip:
        type: number
      min_expansion:
        type: integer
      min_level:
        type: integer
      min_status:
        type: integer
      minclip:
        type: number
      note:
        type: string
      npc_max_aggro_dist:
        type: integer
      peqzone:
        type: integer
      rain_chance_1:
        type: integer
      rain_chance_2:
        type: integer
      rain_chance_3:
        type: integer
      rain_chance_4:
        type: integer
      rain_duration_1:
        type: integer
      rain_duration_2:
        type: integer
      rain_duration_3:
        type: integer
      rain_duration_4:
        type: integer
      ruleset:
        type: integer
      safe_heading:
        type: number
      safe_x:
        type: number
      safe_y:
        type: number
      safe_z:
        type: number
      short_name:
        type: string
      shutdowndelay:
        type: integer
      sky:
        type: integer
      skylock:
        type: integer
      snow_chance_1:
        type: integer
      snow_chance_2:
        type: integer
      snow_chance_3:
        type: integer
      snow_chance_4:
        type: integer
      snow_duration_1:
        type: integer
      snow_duration_2:
        type: integer
      snow_duration_3:
        type: integer
      snow_duration_4:
        type: integer
      suspendbuffs:
        type: integer
      time_type:
        type: integer
      timezone:
        type: integer
      type:
        type: integer
      underworld:
        type: number
      underworld_teleport_index:
        type: integer
      version:
        type: integer
      walkspeed:
        type: number
      zone_exp_multiplier:
        type: number
      zoneidnumber:
        type: integer
      ztype:
        type: integer
    type: object
  models.ZoneFlag:
    properties:
      char_id:
        type: integer
      zone_id:
        type: integer
    type: object
  models.ZonePoint:
    properties:
      buffer:
        type: number
      client_version_mask:
        type: integer
      content_flags:
        type: string
      content_flags_disabled:
        type: string
      heading:
        type: number
      height:
        type: integer
      id:
        type: integer
      is_virtual:
        type: integer
      max_expansion:
        type: integer
      min_expansion:
        type: integer
      number:
        type: integer
      target_heading:
        type: number
      target_instance:
        type: integer
      target_x:
        type: number
      target_y:
        type: number
      target_z:
        type: number
      target_zone_id:
        type: integer
      version:
        type: integer
      width:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
      zone:
        type: string
      zoneinst:
        type: integer
    type: object
info:
  contact:
    email: akkadius1@gmail.com
    name: Akkadius
    url: TODO
  description: Spire API documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Spire
  version: "3.0"
paths:
  /aa_abilities:
    get:
      consumes:
      - application/json
      operationId: listAaAbilities
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaAbility'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists AaAbilities
      tags:
      - AaAbility
  /aa_abilities/bulk:
    post:
      consumes:
      - application/json
      operationId: getAaAbilitiesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaAbility'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AaAbilities in bulk
      tags:
      - AaAbility
  /aa_ability:
    put:
      consumes:
      - application/json
      operationId: createAaAbility
      parameters:
      - description: AaAbility
        in: body
        name: aa_ability
        required: true
        schema:
          $ref: '#/definitions/models.AaAbility'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaAbility'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates AaAbility
      tags:
      - AaAbility
  /aa_ability/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAaAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes AaAbility
      tags:
      - AaAbility
    get:
      consumes:
      - application/json
      operationId: getAaAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaAbility'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AaAbility
      tags:
      - AaAbility
    patch:
      consumes:
      - application/json
      operationId: updateAaAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: AaAbility
        in: body
        name: aa_ability
        required: true
        schema:
          $ref: '#/definitions/models.AaAbility'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaAbility'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates AaAbility
      tags:
      - AaAbility
  /aa_rank:
    put:
      consumes:
      - application/json
      operationId: createAaRank
      parameters:
      - description: AaRank
        in: body
        name: aa_rank
        required: true
        schema:
          $ref: '#/definitions/models.AaRank'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaRank'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates AaRank
      tags:
      - AaRank
  /aa_rank/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAaRank
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes AaRank
      tags:
      - AaRank
    get:
      consumes:
      - application/json
      operationId: getAaRank
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaRank'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AaRank
      tags:
      - AaRank
    patch:
      consumes:
      - application/json
      operationId: updateAaRank
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: AaRank
        in: body
        name: aa_rank
        required: true
        schema:
          $ref: '#/definitions/models.AaRank'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaRank'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates AaRank
      tags:
      - AaRank
  /aa_ranks:
    get:
      consumes:
      - application/json
      operationId: listAaRanks
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaRank'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists AaRanks
      tags:
      - AaRank
  /aa_ranks/bulk:
    post:
      consumes:
      - application/json
      operationId: getAaRanksBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AaRank'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AaRanks in bulk
      tags:
      - AaRank
  /account:
    put:
      consumes:
      - application/json
      operationId: createAccount
      parameters:
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Account
      tags:
      - Account
  /account/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAccount
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Account
      tags:
      - Account
    get:
      consumes:
      - application/json
      operationId: getAccount
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>AccountFlags<br>AccountIps<br>AccountRewards<br>BugReports<br>Sharedbanks
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Account
      tags:
      - Account
    patch:
      consumes:
      - application/json
      operationId: updateAccount
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Account
      tags:
      - Account
  /accounts:
    get:
      consumes:
      - application/json
      operationId: listAccounts
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>AccountFlags<br>AccountIps<br>AccountRewards<br>BugReports<br>Sharedbanks
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Accounts
      tags:
      - Account
  /accounts/bulk:
    post:
      consumes:
      - application/json
      operationId: getAccountsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Accounts in bulk
      tags:
      - Account
  /adventure_detail:
    put:
      consumes:
      - application/json
      operationId: createAdventureDetail
      parameters:
      - description: AdventureDetail
        in: body
        name: adventure_detail
        required: true
        schema:
          $ref: '#/definitions/models.AdventureDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureDetail'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates AdventureDetail
      tags:
      - AdventureDetail
  /adventure_detail/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAdventureDetail
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes AdventureDetail
      tags:
      - AdventureDetail
    get:
      consumes:
      - application/json
      operationId: getAdventureDetail
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureDetail'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureDetail
      tags:
      - AdventureDetail
    patch:
      consumes:
      - application/json
      operationId: updateAdventureDetail
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: AdventureDetail
        in: body
        name: adventure_detail
        required: true
        schema:
          $ref: '#/definitions/models.AdventureDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureDetail'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates AdventureDetail
      tags:
      - AdventureDetail
  /adventure_details:
    get:
      consumes:
      - application/json
      operationId: listAdventureDetails
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureDetail'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists AdventureDetails
      tags:
      - AdventureDetail
  /adventure_details/bulk:
    post:
      consumes:
      - application/json
      operationId: getAdventureDetailsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureDetail'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureDetails in bulk
      tags:
      - AdventureDetail
  /adventure_template:
    put:
      consumes:
      - application/json
      operationId: createAdventureTemplate
      parameters:
      - description: AdventureTemplate
        in: body
        name: adventure_template
        required: true
        schema:
          $ref: '#/definitions/models.AdventureTemplate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplate'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates AdventureTemplate
      tags:
      - AdventureTemplate
  /adventure_template/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAdventureTemplate
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes AdventureTemplate
      tags:
      - AdventureTemplate
    get:
      consumes:
      - application/json
      operationId: getAdventureTemplate
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplate'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureTemplate
      tags:
      - AdventureTemplate
    patch:
      consumes:
      - application/json
      operationId: updateAdventureTemplate
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: AdventureTemplate
        in: body
        name: adventure_template
        required: true
        schema:
          $ref: '#/definitions/models.AdventureTemplate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplate'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates AdventureTemplate
      tags:
      - AdventureTemplate
  /adventure_template_entries:
    get:
      consumes:
      - application/json
      operationId: listAdventureTemplateEntries
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists AdventureTemplateEntries
      tags:
      - AdventureTemplateEntry
  /adventure_template_entries/bulk:
    post:
      consumes:
      - application/json
      operationId: getAdventureTemplateEntriesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureTemplateEntries in bulk
      tags:
      - AdventureTemplateEntry
  /adventure_template_entry:
    put:
      consumes:
      - application/json
      operationId: createAdventureTemplateEntry
      parameters:
      - description: AdventureTemplateEntry
        in: body
        name: adventure_template_entry
        required: true
        schema:
          $ref: '#/definitions/models.AdventureTemplateEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntry'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates AdventureTemplateEntry
      tags:
      - AdventureTemplateEntry
  /adventure_template_entry/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAdventureTemplateEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes AdventureTemplateEntry
      tags:
      - AdventureTemplateEntry
    get:
      consumes:
      - application/json
      operationId: getAdventureTemplateEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntry'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureTemplateEntry
      tags:
      - AdventureTemplateEntry
    patch:
      consumes:
      - application/json
      operationId: updateAdventureTemplateEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: AdventureTemplateEntry
        in: body
        name: adventure_template_entry
        required: true
        schema:
          $ref: '#/definitions/models.AdventureTemplateEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntry'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates AdventureTemplateEntry
      tags:
      - AdventureTemplateEntry
  /adventure_template_entry_flavor:
    put:
      consumes:
      - application/json
      operationId: createAdventureTemplateEntryFlavor
      parameters:
      - description: AdventureTemplateEntryFlavor
        in: body
        name: adventure_template_entry_flavor
        required: true
        schema:
          $ref: '#/definitions/models.AdventureTemplateEntryFlavor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntryFlavor'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates AdventureTemplateEntryFlavor
      tags:
      - AdventureTemplateEntryFlavor
  /adventure_template_entry_flavor/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAdventureTemplateEntryFlavor
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes AdventureTemplateEntryFlavor
      tags:
      - AdventureTemplateEntryFlavor
    get:
      consumes:
      - application/json
      operationId: getAdventureTemplateEntryFlavor
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntryFlavor'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureTemplateEntryFlavor
      tags:
      - AdventureTemplateEntryFlavor
    patch:
      consumes:
      - application/json
      operationId: updateAdventureTemplateEntryFlavor
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: AdventureTemplateEntryFlavor
        in: body
        name: adventure_template_entry_flavor
        required: true
        schema:
          $ref: '#/definitions/models.AdventureTemplateEntryFlavor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntryFlavor'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates AdventureTemplateEntryFlavor
      tags:
      - AdventureTemplateEntryFlavor
  /adventure_template_entry_flavors:
    get:
      consumes:
      - application/json
      operationId: listAdventureTemplateEntryFlavors
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntryFlavor'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists AdventureTemplateEntryFlavors
      tags:
      - AdventureTemplateEntryFlavor
  /adventure_template_entry_flavors/bulk:
    post:
      consumes:
      - application/json
      operationId: getAdventureTemplateEntryFlavorsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplateEntryFlavor'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureTemplateEntryFlavors in bulk
      tags:
      - AdventureTemplateEntryFlavor
  /adventure_templates:
    get:
      consumes:
      - application/json
      operationId: listAdventureTemplates
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplate'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists AdventureTemplates
      tags:
      - AdventureTemplate
  /adventure_templates/bulk:
    post:
      consumes:
      - application/json
      operationId: getAdventureTemplatesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdventureTemplate'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AdventureTemplates in bulk
      tags:
      - AdventureTemplate
  /alternate_currencies:
    get:
      consumes:
      - application/json
      operationId: listAlternateCurrencies
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AlternateCurrency'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists AlternateCurrencies
      tags:
      - AlternateCurrency
  /alternate_currencies/bulk:
    post:
      consumes:
      - application/json
      operationId: getAlternateCurrenciesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AlternateCurrency'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AlternateCurrencies in bulk
      tags:
      - AlternateCurrency
  /alternate_currency:
    put:
      consumes:
      - application/json
      operationId: createAlternateCurrency
      parameters:
      - description: AlternateCurrency
        in: body
        name: alternate_currency
        required: true
        schema:
          $ref: '#/definitions/models.AlternateCurrency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AlternateCurrency'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates AlternateCurrency
      tags:
      - AlternateCurrency
  /alternate_currency/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteAlternateCurrency
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes AlternateCurrency
      tags:
      - AlternateCurrency
    get:
      consumes:
      - application/json
      operationId: getAlternateCurrency
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AlternateCurrency'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets AlternateCurrency
      tags:
      - AlternateCurrency
    patch:
      consumes:
      - application/json
      operationId: updateAlternateCurrency
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: AlternateCurrency
        in: body
        name: alternate_currency
        required: true
        schema:
          $ref: '#/definitions/models.AlternateCurrency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AlternateCurrency'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates AlternateCurrency
      tags:
      - AlternateCurrency
  /blocked_spell:
    put:
      consumes:
      - application/json
      operationId: createBlockedSpell
      parameters:
      - description: BlockedSpell
        in: body
        name: blocked_spell
        required: true
        schema:
          $ref: '#/definitions/models.BlockedSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BlockedSpell'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates BlockedSpell
      tags:
      - BlockedSpell
  /blocked_spell/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteBlockedSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes BlockedSpell
      tags:
      - BlockedSpell
    get:
      consumes:
      - application/json
      operationId: getBlockedSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BlockedSpell'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets BlockedSpell
      tags:
      - BlockedSpell
    patch:
      consumes:
      - application/json
      operationId: updateBlockedSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: BlockedSpell
        in: body
        name: blocked_spell
        required: true
        schema:
          $ref: '#/definitions/models.BlockedSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BlockedSpell'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates BlockedSpell
      tags:
      - BlockedSpell
  /blocked_spells:
    get:
      consumes:
      - application/json
      operationId: listBlockedSpells
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BlockedSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists BlockedSpells
      tags:
      - BlockedSpell
  /blocked_spells/bulk:
    post:
      consumes:
      - application/json
      operationId: getBlockedSpellsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BlockedSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets BlockedSpells in bulk
      tags:
      - BlockedSpell
  /bug:
    put:
      consumes:
      - application/json
      operationId: createBug
      parameters:
      - description: Bug
        in: body
        name: bug
        required: true
        schema:
          $ref: '#/definitions/models.Bug'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Bug'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Bug
      tags:
      - Bug
  /bug/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteBug
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Bug
      tags:
      - Bug
    get:
      consumes:
      - application/json
      operationId: getBug
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Bug'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Bug
      tags:
      - Bug
    patch:
      consumes:
      - application/json
      operationId: updateBug
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Bug
        in: body
        name: bug
        required: true
        schema:
          $ref: '#/definitions/models.Bug'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Bug'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Bug
      tags:
      - Bug
  /bug_report:
    put:
      consumes:
      - application/json
      operationId: createBugReport
      parameters:
      - description: BugReport
        in: body
        name: bug_report
        required: true
        schema:
          $ref: '#/definitions/models.BugReport'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BugReport'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates BugReport
      tags:
      - BugReport
  /bug_report/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteBugReport
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes BugReport
      tags:
      - BugReport
    get:
      consumes:
      - application/json
      operationId: getBugReport
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BugReport'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets BugReport
      tags:
      - BugReport
    patch:
      consumes:
      - application/json
      operationId: updateBugReport
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: BugReport
        in: body
        name: bug_report
        required: true
        schema:
          $ref: '#/definitions/models.BugReport'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BugReport'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates BugReport
      tags:
      - BugReport
  /bug_reports:
    get:
      consumes:
      - application/json
      operationId: listBugReports
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BugReport'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists BugReports
      tags:
      - BugReport
  /bug_reports/bulk:
    post:
      consumes:
      - application/json
      operationId: getBugReportsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BugReport'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets BugReports in bulk
      tags:
      - BugReport
  /bugs:
    get:
      consumes:
      - application/json
      operationId: listBugs
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Bug'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Bugs
      tags:
      - Bug
  /bugs/bulk:
    post:
      consumes:
      - application/json
      operationId: getBugsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Bug'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Bugs in bulk
      tags:
      - Bug
  /char_create_point_allocation:
    put:
      consumes:
      - application/json
      operationId: createCharCreatePointAllocation
      parameters:
      - description: CharCreatePointAllocation
        in: body
        name: char_create_point_allocation
        required: true
        schema:
          $ref: '#/definitions/models.CharCreatePointAllocation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharCreatePointAllocation'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharCreatePointAllocation
      tags:
      - CharCreatePointAllocation
  /char_create_point_allocation/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharCreatePointAllocation
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharCreatePointAllocation
      tags:
      - CharCreatePointAllocation
    get:
      consumes:
      - application/json
      operationId: getCharCreatePointAllocation
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharCreatePointAllocation'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharCreatePointAllocation
      tags:
      - CharCreatePointAllocation
    patch:
      consumes:
      - application/json
      operationId: updateCharCreatePointAllocation
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharCreatePointAllocation
        in: body
        name: char_create_point_allocation
        required: true
        schema:
          $ref: '#/definitions/models.CharCreatePointAllocation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharCreatePointAllocation'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharCreatePointAllocation
      tags:
      - CharCreatePointAllocation
  /char_create_point_allocations:
    get:
      consumes:
      - application/json
      operationId: listCharCreatePointAllocations
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharCreatePointAllocation'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharCreatePointAllocations
      tags:
      - CharCreatePointAllocation
  /char_create_point_allocations/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharCreatePointAllocationsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharCreatePointAllocation'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharCreatePointAllocations in bulk
      tags:
      - CharCreatePointAllocation
  /character_alternate_abilities:
    get:
      consumes:
      - application/json
      operationId: listCharacterAlternateAbilities
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAlternateAbility'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterAlternateAbilities
      tags:
      - CharacterAlternateAbility
  /character_alternate_abilities/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterAlternateAbilitiesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAlternateAbility'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterAlternateAbilities in bulk
      tags:
      - CharacterAlternateAbility
  /character_alternate_ability:
    put:
      consumes:
      - application/json
      operationId: createCharacterAlternateAbility
      parameters:
      - description: CharacterAlternateAbility
        in: body
        name: character_alternate_ability
        required: true
        schema:
          $ref: '#/definitions/models.CharacterAlternateAbility'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAlternateAbility'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterAlternateAbility
      tags:
      - CharacterAlternateAbility
  /character_alternate_ability/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterAlternateAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterAlternateAbility
      tags:
      - CharacterAlternateAbility
    get:
      consumes:
      - application/json
      operationId: getCharacterAlternateAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAlternateAbility'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterAlternateAbility
      tags:
      - CharacterAlternateAbility
    patch:
      consumes:
      - application/json
      operationId: updateCharacterAlternateAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterAlternateAbility
        in: body
        name: character_alternate_ability
        required: true
        schema:
          $ref: '#/definitions/models.CharacterAlternateAbility'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAlternateAbility'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterAlternateAbility
      tags:
      - CharacterAlternateAbility
  /character_aura:
    put:
      consumes:
      - application/json
      operationId: createCharacterAura
      parameters:
      - description: CharacterAura
        in: body
        name: character_aura
        required: true
        schema:
          $ref: '#/definitions/models.CharacterAura'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAura'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterAura
      tags:
      - CharacterAura
  /character_aura/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterAura
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterAura
      tags:
      - CharacterAura
    get:
      consumes:
      - application/json
      operationId: getCharacterAura
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAura'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterAura
      tags:
      - CharacterAura
    patch:
      consumes:
      - application/json
      operationId: updateCharacterAura
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterAura
        in: body
        name: character_aura
        required: true
        schema:
          $ref: '#/definitions/models.CharacterAura'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAura'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterAura
      tags:
      - CharacterAura
  /character_auras:
    get:
      consumes:
      - application/json
      operationId: listCharacterAuras
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAura'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterAuras
      tags:
      - CharacterAura
  /character_auras/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterAurasBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterAura'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterAuras in bulk
      tags:
      - CharacterAura
  /character_bandolier:
    put:
      consumes:
      - application/json
      operationId: createCharacterBandolier
      parameters:
      - description: CharacterBandolier
        in: body
        name: character_bandolier
        required: true
        schema:
          $ref: '#/definitions/models.CharacterBandolier'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBandolier'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterBandolier
      tags:
      - CharacterBandolier
  /character_bandolier/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterBandolier
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterBandolier
      tags:
      - CharacterBandolier
    get:
      consumes:
      - application/json
      operationId: getCharacterBandolier
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBandolier'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterBandolier
      tags:
      - CharacterBandolier
    patch:
      consumes:
      - application/json
      operationId: updateCharacterBandolier
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterBandolier
        in: body
        name: character_bandolier
        required: true
        schema:
          $ref: '#/definitions/models.CharacterBandolier'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBandolier'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterBandolier
      tags:
      - CharacterBandolier
  /character_bandoliers:
    get:
      consumes:
      - application/json
      operationId: listCharacterBandoliers
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBandolier'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterBandoliers
      tags:
      - CharacterBandolier
  /character_bandoliers/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterBandoliersBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBandolier'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterBandoliers in bulk
      tags:
      - CharacterBandolier
  /character_bind:
    put:
      consumes:
      - application/json
      operationId: createCharacterBind
      parameters:
      - description: CharacterBind
        in: body
        name: character_bind
        required: true
        schema:
          $ref: '#/definitions/models.CharacterBind'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBind'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterBind
      tags:
      - CharacterBind
  /character_bind/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterBind
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterBind
      tags:
      - CharacterBind
    get:
      consumes:
      - application/json
      operationId: getCharacterBind
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBind'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterBind
      tags:
      - CharacterBind
    patch:
      consumes:
      - application/json
      operationId: updateCharacterBind
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterBind
        in: body
        name: character_bind
        required: true
        schema:
          $ref: '#/definitions/models.CharacterBind'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBind'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterBind
      tags:
      - CharacterBind
  /character_binds:
    get:
      consumes:
      - application/json
      operationId: listCharacterBinds
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBind'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterBinds
      tags:
      - CharacterBind
  /character_binds/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterBindsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterBind'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterBinds in bulk
      tags:
      - CharacterBind
  /character_corpse:
    put:
      consumes:
      - application/json
      operationId: createCharacterCorpse
      parameters:
      - description: CharacterCorpse
        in: body
        name: character_corpse
        required: true
        schema:
          $ref: '#/definitions/models.CharacterCorpse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCorpse'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterCorpse
      tags:
      - CharacterCorpse
  /character_corpse/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterCorpse
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterCorpse
      tags:
      - CharacterCorpse
    get:
      consumes:
      - application/json
      operationId: getCharacterCorpse
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCorpse'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterCorpse
      tags:
      - CharacterCorpse
    patch:
      consumes:
      - application/json
      operationId: updateCharacterCorpse
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterCorpse
        in: body
        name: character_corpse
        required: true
        schema:
          $ref: '#/definitions/models.CharacterCorpse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCorpse'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterCorpse
      tags:
      - CharacterCorpse
  /character_corpses:
    get:
      consumes:
      - application/json
      operationId: listCharacterCorpses
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCorpse'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterCorpses
      tags:
      - CharacterCorpse
  /character_corpses/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterCorpsesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCorpse'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterCorpses in bulk
      tags:
      - CharacterCorpse
  /character_currencies:
    get:
      consumes:
      - application/json
      operationId: listCharacterCurrencies
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCurrency'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterCurrencies
      tags:
      - CharacterCurrency
  /character_currencies/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterCurrenciesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCurrency'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterCurrencies in bulk
      tags:
      - CharacterCurrency
  /character_currency:
    put:
      consumes:
      - application/json
      operationId: createCharacterCurrency
      parameters:
      - description: CharacterCurrency
        in: body
        name: character_currency
        required: true
        schema:
          $ref: '#/definitions/models.CharacterCurrency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCurrency'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterCurrency
      tags:
      - CharacterCurrency
  /character_currency/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterCurrency
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterCurrency
      tags:
      - CharacterCurrency
    get:
      consumes:
      - application/json
      operationId: getCharacterCurrency
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCurrency'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterCurrency
      tags:
      - CharacterCurrency
    patch:
      consumes:
      - application/json
      operationId: updateCharacterCurrency
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterCurrency
        in: body
        name: character_currency
        required: true
        schema:
          $ref: '#/definitions/models.CharacterCurrency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterCurrency'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterCurrency
      tags:
      - CharacterCurrency
  /character_data:
    get:
      consumes:
      - application/json
      operationId: listCharacterData
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>AdventureStats<br>Buyers<br>CharRecipeLists<br>CharacterActivities<br>CharacterAltCurrencies<br>CharacterAlternateAbilities<br>CharacterAuras<br>CharacterBandoliers<br>CharacterBinds<br>CharacterBuffs<br>CharacterCorpses<br>CharacterCurrencies<br>CharacterDisciplines<br>CharacterEnabledtasks<br>CharacterInspectMessages<br>CharacterItemRecasts<br>CharacterLanguages<br>CharacterLeadershipAbilities<br>CharacterMaterials<br>CharacterMemmedSpells<br>CharacterPetBuffs<br>CharacterPetInfos<br>CharacterPetInventories<br>CharacterPotionbelts<br>CharacterSkills<br>CharacterSpells<br>CharacterTasks<br>CharacterTributes<br>CompletedTasks<br>DataBuckets<br>FactionValues<br>Friends<br>Guild<br>Guild.GuildBanks<br>Guild.GuildMembers<br>Guild.GuildRanks<br>GuildMembers<br>InstanceListPlayers<br>Inventories<br>Inventories.Item<br>Inventories.Item.DiscoveredItems<br>Keyrings<br>Mail<br>PlayerTitlesets<br>QuestGlobals<br>Timers<br>Titles<br>Traders<br>ZoneFlags
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDatum'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterData
      tags:
      - CharacterDatum
  /character_data/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterDataBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDatum'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterData in bulk
      tags:
      - CharacterDatum
  /character_datum:
    put:
      consumes:
      - application/json
      operationId: createCharacterDatum
      parameters:
      - description: CharacterDatum
        in: body
        name: character_datum
        required: true
        schema:
          $ref: '#/definitions/models.CharacterDatum'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDatum'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterDatum
      tags:
      - CharacterDatum
  /character_datum/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterDatum
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterDatum
      tags:
      - CharacterDatum
    get:
      consumes:
      - application/json
      operationId: getCharacterDatum
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>AdventureStats<br>Buyers<br>CharRecipeLists<br>CharacterActivities<br>CharacterAltCurrencies<br>CharacterAlternateAbilities<br>CharacterAuras<br>CharacterBandoliers<br>CharacterBinds<br>CharacterBuffs<br>CharacterCorpses<br>CharacterCurrencies<br>CharacterDisciplines<br>CharacterEnabledtasks<br>CharacterInspectMessages<br>CharacterItemRecasts<br>CharacterLanguages<br>CharacterLeadershipAbilities<br>CharacterMaterials<br>CharacterMemmedSpells<br>CharacterPetBuffs<br>CharacterPetInfos<br>CharacterPetInventories<br>CharacterPotionbelts<br>CharacterSkills<br>CharacterSpells<br>CharacterTasks<br>CharacterTributes<br>CompletedTasks<br>DataBuckets<br>FactionValues<br>Friends<br>Guild<br>Guild.GuildBanks<br>Guild.GuildMembers<br>Guild.GuildRanks<br>GuildMembers<br>InstanceListPlayers<br>Inventories<br>Inventories.Item<br>Inventories.Item.DiscoveredItems<br>Keyrings<br>Mail<br>PlayerTitlesets<br>QuestGlobals<br>Timers<br>Titles<br>Traders<br>ZoneFlags
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDatum'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterDatum
      tags:
      - CharacterDatum
    patch:
      consumes:
      - application/json
      operationId: updateCharacterDatum
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterDatum
        in: body
        name: character_datum
        required: true
        schema:
          $ref: '#/definitions/models.CharacterDatum'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDatum'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterDatum
      tags:
      - CharacterDatum
  /character_discipline:
    put:
      consumes:
      - application/json
      operationId: createCharacterDiscipline
      parameters:
      - description: CharacterDiscipline
        in: body
        name: character_discipline
        required: true
        schema:
          $ref: '#/definitions/models.CharacterDiscipline'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDiscipline'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterDiscipline
      tags:
      - CharacterDiscipline
  /character_discipline/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterDiscipline
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterDiscipline
      tags:
      - CharacterDiscipline
    get:
      consumes:
      - application/json
      operationId: getCharacterDiscipline
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDiscipline'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterDiscipline
      tags:
      - CharacterDiscipline
    patch:
      consumes:
      - application/json
      operationId: updateCharacterDiscipline
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterDiscipline
        in: body
        name: character_discipline
        required: true
        schema:
          $ref: '#/definitions/models.CharacterDiscipline'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDiscipline'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterDiscipline
      tags:
      - CharacterDiscipline
  /character_disciplines:
    get:
      consumes:
      - application/json
      operationId: listCharacterDisciplines
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDiscipline'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterDisciplines
      tags:
      - CharacterDiscipline
  /character_disciplines/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterDisciplinesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterDiscipline'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterDisciplines in bulk
      tags:
      - CharacterDiscipline
  /character_expedition_lockout:
    put:
      consumes:
      - application/json
      operationId: createCharacterExpeditionLockout
      parameters:
      - description: CharacterExpeditionLockout
        in: body
        name: character_expedition_lockout
        required: true
        schema:
          $ref: '#/definitions/models.CharacterExpeditionLockout'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterExpeditionLockout'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterExpeditionLockout
      tags:
      - CharacterExpeditionLockout
  /character_expedition_lockout/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterExpeditionLockout
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterExpeditionLockout
      tags:
      - CharacterExpeditionLockout
    get:
      consumes:
      - application/json
      operationId: getCharacterExpeditionLockout
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterExpeditionLockout'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterExpeditionLockout
      tags:
      - CharacterExpeditionLockout
    patch:
      consumes:
      - application/json
      operationId: updateCharacterExpeditionLockout
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterExpeditionLockout
        in: body
        name: character_expedition_lockout
        required: true
        schema:
          $ref: '#/definitions/models.CharacterExpeditionLockout'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterExpeditionLockout'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterExpeditionLockout
      tags:
      - CharacterExpeditionLockout
  /character_expedition_lockouts:
    get:
      consumes:
      - application/json
      operationId: listCharacterExpeditionLockouts
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterExpeditionLockout'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterExpeditionLockouts
      tags:
      - CharacterExpeditionLockout
  /character_expedition_lockouts/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterExpeditionLockoutsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterExpeditionLockout'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterExpeditionLockouts in bulk
      tags:
      - CharacterExpeditionLockout
  /character_inspect_message:
    put:
      consumes:
      - application/json
      operationId: createCharacterInspectMessage
      parameters:
      - description: CharacterInspectMessage
        in: body
        name: character_inspect_message
        required: true
        schema:
          $ref: '#/definitions/models.CharacterInspectMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterInspectMessage'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterInspectMessage
      tags:
      - CharacterInspectMessage
  /character_inspect_message/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterInspectMessage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterInspectMessage
      tags:
      - CharacterInspectMessage
    get:
      consumes:
      - application/json
      operationId: getCharacterInspectMessage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterInspectMessage'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterInspectMessage
      tags:
      - CharacterInspectMessage
    patch:
      consumes:
      - application/json
      operationId: updateCharacterInspectMessage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterInspectMessage
        in: body
        name: character_inspect_message
        required: true
        schema:
          $ref: '#/definitions/models.CharacterInspectMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterInspectMessage'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterInspectMessage
      tags:
      - CharacterInspectMessage
  /character_inspect_messages:
    get:
      consumes:
      - application/json
      operationId: listCharacterInspectMessages
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterInspectMessage'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterInspectMessages
      tags:
      - CharacterInspectMessage
  /character_inspect_messages/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterInspectMessagesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterInspectMessage'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterInspectMessages in bulk
      tags:
      - CharacterInspectMessage
  /character_item_recast:
    put:
      consumes:
      - application/json
      operationId: createCharacterItemRecast
      parameters:
      - description: CharacterItemRecast
        in: body
        name: character_item_recast
        required: true
        schema:
          $ref: '#/definitions/models.CharacterItemRecast'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterItemRecast'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterItemRecast
      tags:
      - CharacterItemRecast
  /character_item_recast/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterItemRecast
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterItemRecast
      tags:
      - CharacterItemRecast
    get:
      consumes:
      - application/json
      operationId: getCharacterItemRecast
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterItemRecast'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterItemRecast
      tags:
      - CharacterItemRecast
    patch:
      consumes:
      - application/json
      operationId: updateCharacterItemRecast
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterItemRecast
        in: body
        name: character_item_recast
        required: true
        schema:
          $ref: '#/definitions/models.CharacterItemRecast'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterItemRecast'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterItemRecast
      tags:
      - CharacterItemRecast
  /character_item_recasts:
    get:
      consumes:
      - application/json
      operationId: listCharacterItemRecasts
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterItemRecast'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterItemRecasts
      tags:
      - CharacterItemRecast
  /character_item_recasts/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterItemRecastsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterItemRecast'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterItemRecasts in bulk
      tags:
      - CharacterItemRecast
  /character_language:
    put:
      consumes:
      - application/json
      operationId: createCharacterLanguage
      parameters:
      - description: CharacterLanguage
        in: body
        name: character_language
        required: true
        schema:
          $ref: '#/definitions/models.CharacterLanguage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLanguage'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterLanguage
      tags:
      - CharacterLanguage
  /character_language/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterLanguage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterLanguage
      tags:
      - CharacterLanguage
    get:
      consumes:
      - application/json
      operationId: getCharacterLanguage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLanguage'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterLanguage
      tags:
      - CharacterLanguage
    patch:
      consumes:
      - application/json
      operationId: updateCharacterLanguage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterLanguage
        in: body
        name: character_language
        required: true
        schema:
          $ref: '#/definitions/models.CharacterLanguage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLanguage'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterLanguage
      tags:
      - CharacterLanguage
  /character_languages:
    get:
      consumes:
      - application/json
      operationId: listCharacterLanguages
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLanguage'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterLanguages
      tags:
      - CharacterLanguage
  /character_languages/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterLanguagesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLanguage'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterLanguages in bulk
      tags:
      - CharacterLanguage
  /character_leadership_abilities:
    get:
      consumes:
      - application/json
      operationId: listCharacterLeadershipAbilities
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLeadershipAbility'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterLeadershipAbilities
      tags:
      - CharacterLeadershipAbility
  /character_leadership_abilities/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterLeadershipAbilitiesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLeadershipAbility'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterLeadershipAbilities in bulk
      tags:
      - CharacterLeadershipAbility
  /character_leadership_ability:
    put:
      consumes:
      - application/json
      operationId: createCharacterLeadershipAbility
      parameters:
      - description: CharacterLeadershipAbility
        in: body
        name: character_leadership_ability
        required: true
        schema:
          $ref: '#/definitions/models.CharacterLeadershipAbility'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLeadershipAbility'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterLeadershipAbility
      tags:
      - CharacterLeadershipAbility
  /character_leadership_ability/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterLeadershipAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterLeadershipAbility
      tags:
      - CharacterLeadershipAbility
    get:
      consumes:
      - application/json
      operationId: getCharacterLeadershipAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLeadershipAbility'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterLeadershipAbility
      tags:
      - CharacterLeadershipAbility
    patch:
      consumes:
      - application/json
      operationId: updateCharacterLeadershipAbility
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterLeadershipAbility
        in: body
        name: character_leadership_ability
        required: true
        schema:
          $ref: '#/definitions/models.CharacterLeadershipAbility'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterLeadershipAbility'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterLeadershipAbility
      tags:
      - CharacterLeadershipAbility
  /character_material:
    put:
      consumes:
      - application/json
      operationId: createCharacterMaterial
      parameters:
      - description: CharacterMaterial
        in: body
        name: character_material
        required: true
        schema:
          $ref: '#/definitions/models.CharacterMaterial'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMaterial'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterMaterial
      tags:
      - CharacterMaterial
  /character_material/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterMaterial
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterMaterial
      tags:
      - CharacterMaterial
    get:
      consumes:
      - application/json
      operationId: getCharacterMaterial
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMaterial'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterMaterial
      tags:
      - CharacterMaterial
    patch:
      consumes:
      - application/json
      operationId: updateCharacterMaterial
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterMaterial
        in: body
        name: character_material
        required: true
        schema:
          $ref: '#/definitions/models.CharacterMaterial'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMaterial'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterMaterial
      tags:
      - CharacterMaterial
  /character_materials:
    get:
      consumes:
      - application/json
      operationId: listCharacterMaterials
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMaterial'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterMaterials
      tags:
      - CharacterMaterial
  /character_materials/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterMaterialsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMaterial'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterMaterials in bulk
      tags:
      - CharacterMaterial
  /character_memmed_spell:
    put:
      consumes:
      - application/json
      operationId: createCharacterMemmedSpell
      parameters:
      - description: CharacterMemmedSpell
        in: body
        name: character_memmed_spell
        required: true
        schema:
          $ref: '#/definitions/models.CharacterMemmedSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMemmedSpell'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterMemmedSpell
      tags:
      - CharacterMemmedSpell
  /character_memmed_spell/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterMemmedSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterMemmedSpell
      tags:
      - CharacterMemmedSpell
    get:
      consumes:
      - application/json
      operationId: getCharacterMemmedSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMemmedSpell'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterMemmedSpell
      tags:
      - CharacterMemmedSpell
    patch:
      consumes:
      - application/json
      operationId: updateCharacterMemmedSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterMemmedSpell
        in: body
        name: character_memmed_spell
        required: true
        schema:
          $ref: '#/definitions/models.CharacterMemmedSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMemmedSpell'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterMemmedSpell
      tags:
      - CharacterMemmedSpell
  /character_memmed_spells:
    get:
      consumes:
      - application/json
      operationId: listCharacterMemmedSpells
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMemmedSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterMemmedSpells
      tags:
      - CharacterMemmedSpell
  /character_memmed_spells/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterMemmedSpellsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterMemmedSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterMemmedSpells in bulk
      tags:
      - CharacterMemmedSpell
  /character_potionbelt:
    put:
      consumes:
      - application/json
      operationId: createCharacterPotionbelt
      parameters:
      - description: CharacterPotionbelt
        in: body
        name: character_potionbelt
        required: true
        schema:
          $ref: '#/definitions/models.CharacterPotionbelt'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterPotionbelt'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterPotionbelt
      tags:
      - CharacterPotionbelt
  /character_potionbelt/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterPotionbelt
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterPotionbelt
      tags:
      - CharacterPotionbelt
    get:
      consumes:
      - application/json
      operationId: getCharacterPotionbelt
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterPotionbelt'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterPotionbelt
      tags:
      - CharacterPotionbelt
    patch:
      consumes:
      - application/json
      operationId: updateCharacterPotionbelt
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterPotionbelt
        in: body
        name: character_potionbelt
        required: true
        schema:
          $ref: '#/definitions/models.CharacterPotionbelt'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterPotionbelt'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterPotionbelt
      tags:
      - CharacterPotionbelt
  /character_potionbelts:
    get:
      consumes:
      - application/json
      operationId: listCharacterPotionbelts
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterPotionbelt'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterPotionbelts
      tags:
      - CharacterPotionbelt
  /character_potionbelts/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterPotionbeltsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterPotionbelt'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterPotionbelts in bulk
      tags:
      - CharacterPotionbelt
  /character_skill:
    put:
      consumes:
      - application/json
      operationId: createCharacterSkill
      parameters:
      - description: CharacterSkill
        in: body
        name: character_skill
        required: true
        schema:
          $ref: '#/definitions/models.CharacterSkill'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSkill'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterSkill
      tags:
      - CharacterSkill
  /character_skill/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterSkill
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterSkill
      tags:
      - CharacterSkill
    get:
      consumes:
      - application/json
      operationId: getCharacterSkill
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSkill'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterSkill
      tags:
      - CharacterSkill
    patch:
      consumes:
      - application/json
      operationId: updateCharacterSkill
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterSkill
        in: body
        name: character_skill
        required: true
        schema:
          $ref: '#/definitions/models.CharacterSkill'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSkill'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterSkill
      tags:
      - CharacterSkill
  /character_skills:
    get:
      consumes:
      - application/json
      operationId: listCharacterSkills
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSkill'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterSkills
      tags:
      - CharacterSkill
  /character_skills/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterSkillsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSkill'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterSkills in bulk
      tags:
      - CharacterSkill
  /character_spell:
    put:
      consumes:
      - application/json
      operationId: createCharacterSpell
      parameters:
      - description: CharacterSpell
        in: body
        name: character_spell
        required: true
        schema:
          $ref: '#/definitions/models.CharacterSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSpell'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates CharacterSpell
      tags:
      - CharacterSpell
  /character_spell/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCharacterSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes CharacterSpell
      tags:
      - CharacterSpell
    get:
      consumes:
      - application/json
      operationId: getCharacterSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSpell'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterSpell
      tags:
      - CharacterSpell
    patch:
      consumes:
      - application/json
      operationId: updateCharacterSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterSpell
        in: body
        name: character_spell
        required: true
        schema:
          $ref: '#/definitions/models.CharacterSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSpell'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates CharacterSpell
      tags:
      - CharacterSpell
  /character_spells:
    get:
      consumes:
      - application/json
      operationId: listCharacterSpells
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists CharacterSpells
      tags:
      - CharacterSpell
  /character_spells/bulk:
    post:
      consumes:
      - application/json
      operationId: getCharacterSpellsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CharacterSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets CharacterSpells in bulk
      tags:
      - CharacterSpell
  /content_flag:
    put:
      consumes:
      - application/json
      operationId: createContentFlag
      parameters:
      - description: ContentFlag
        in: body
        name: content_flag
        required: true
        schema:
          $ref: '#/definitions/models.ContentFlag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContentFlag'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates ContentFlag
      tags:
      - ContentFlag
  /content_flag/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteContentFlag
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes ContentFlag
      tags:
      - ContentFlag
    get:
      consumes:
      - application/json
      operationId: getContentFlag
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContentFlag'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ContentFlag
      tags:
      - ContentFlag
    patch:
      consumes:
      - application/json
      operationId: updateContentFlag
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: ContentFlag
        in: body
        name: content_flag
        required: true
        schema:
          $ref: '#/definitions/models.ContentFlag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContentFlag'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates ContentFlag
      tags:
      - ContentFlag
  /content_flags:
    get:
      consumes:
      - application/json
      operationId: listContentFlags
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContentFlag'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists ContentFlags
      tags:
      - ContentFlag
  /content_flags/bulk:
    post:
      consumes:
      - application/json
      operationId: getContentFlagsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContentFlag'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ContentFlags in bulk
      tags:
      - ContentFlag
  /data_bucket:
    put:
      consumes:
      - application/json
      operationId: createDataBucket
      parameters:
      - description: DataBucket
        in: body
        name: data_bucket
        required: true
        schema:
          $ref: '#/definitions/models.DataBucket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DataBucket'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates DataBucket
      tags:
      - DataBucket
  /data_bucket/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteDataBucket
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes DataBucket
      tags:
      - DataBucket
    get:
      consumes:
      - application/json
      operationId: getDataBucket
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DataBucket'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets DataBucket
      tags:
      - DataBucket
    patch:
      consumes:
      - application/json
      operationId: updateDataBucket
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: DataBucket
        in: body
        name: data_bucket
        required: true
        schema:
          $ref: '#/definitions/models.DataBucket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DataBucket'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates DataBucket
      tags:
      - DataBucket
  /data_buckets:
    get:
      consumes:
      - application/json
      operationId: listDataBuckets
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DataBucket'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists DataBuckets
      tags:
      - DataBucket
  /data_buckets/bulk:
    post:
      consumes:
      - application/json
      operationId: getDataBucketsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DataBucket'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets DataBuckets in bulk
      tags:
      - DataBucket
  /db_str:
    put:
      consumes:
      - application/json
      operationId: createDbStr
      parameters:
      - description: DbStr
        in: body
        name: db_str
        required: true
        schema:
          $ref: '#/definitions/models.DbStr'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DbStr'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates DbStr
      tags:
      - DbStr
  /db_str/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteDbStr
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes DbStr
      tags:
      - DbStr
    get:
      consumes:
      - application/json
      operationId: getDbStr
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DbStr'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets DbStr
      tags:
      - DbStr
    patch:
      consumes:
      - application/json
      operationId: updateDbStr
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: DbStr
        in: body
        name: db_str
        required: true
        schema:
          $ref: '#/definitions/models.DbStr'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DbStr'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates DbStr
      tags:
      - DbStr
  /db_strs:
    get:
      consumes:
      - application/json
      operationId: listDbStrs
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DbStr'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists DbStrs
      tags:
      - DbStr
  /db_strs/bulk:
    post:
      consumes:
      - application/json
      operationId: getDbStrsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DbStr'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets DbStrs in bulk
      tags:
      - DbStr
  /door:
    put:
      consumes:
      - application/json
      operationId: createDoor
      parameters:
      - description: Door
        in: body
        name: door
        required: true
        schema:
          $ref: '#/definitions/models.Door'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Door'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Door
      tags:
      - Door
  /door/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteDoor
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Door
      tags:
      - Door
    get:
      consumes:
      - application/json
      operationId: getDoor
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Door'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Door
      tags:
      - Door
    patch:
      consumes:
      - application/json
      operationId: updateDoor
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Door
        in: body
        name: door
        required: true
        schema:
          $ref: '#/definitions/models.Door'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Door'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Door
      tags:
      - Door
  /doors:
    get:
      consumes:
      - application/json
      operationId: listDoors
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Door'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Doors
      tags:
      - Door
  /doors/bulk:
    post:
      consumes:
      - application/json
      operationId: getDoorsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Door'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Doors in bulk
      tags:
      - Door
  /dynamic_zone:
    put:
      consumes:
      - application/json
      operationId: createDynamicZone
      parameters:
      - description: DynamicZone
        in: body
        name: dynamic_zone
        required: true
        schema:
          $ref: '#/definitions/models.DynamicZone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DynamicZone'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates DynamicZone
      tags:
      - DynamicZone
  /dynamic_zone/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteDynamicZone
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes DynamicZone
      tags:
      - DynamicZone
    get:
      consumes:
      - application/json
      operationId: getDynamicZone
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DynamicZone'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets DynamicZone
      tags:
      - DynamicZone
    patch:
      consumes:
      - application/json
      operationId: updateDynamicZone
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: DynamicZone
        in: body
        name: dynamic_zone
        required: true
        schema:
          $ref: '#/definitions/models.DynamicZone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DynamicZone'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates DynamicZone
      tags:
      - DynamicZone
  /dynamic_zones:
    get:
      consumes:
      - application/json
      operationId: listDynamicZones
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DynamicZone'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists DynamicZones
      tags:
      - DynamicZone
  /dynamic_zones/bulk:
    post:
      consumes:
      - application/json
      operationId: getDynamicZonesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DynamicZone'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets DynamicZones in bulk
      tags:
      - DynamicZone
  /eventlog:
    put:
      consumes:
      - application/json
      operationId: createEventlog
      parameters:
      - description: Eventlog
        in: body
        name: eventlog
        required: true
        schema:
          $ref: '#/definitions/models.Eventlog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Eventlog'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Eventlog
      tags:
      - Eventlog
  /eventlog/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteEventlog
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Eventlog
      tags:
      - Eventlog
    get:
      consumes:
      - application/json
      operationId: getEventlog
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Eventlog'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Eventlog
      tags:
      - Eventlog
    patch:
      consumes:
      - application/json
      operationId: updateEventlog
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Eventlog
        in: body
        name: eventlog
        required: true
        schema:
          $ref: '#/definitions/models.Eventlog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Eventlog'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Eventlog
      tags:
      - Eventlog
  /eventlogs:
    get:
      consumes:
      - application/json
      operationId: listEventlogs
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Eventlog'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Eventlogs
      tags:
      - Eventlog
  /eventlogs/bulk:
    post:
      consumes:
      - application/json
      operationId: getEventlogsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Eventlog'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Eventlogs in bulk
      tags:
      - Eventlog
  /expedition:
    put:
      consumes:
      - application/json
      operationId: createExpedition
      parameters:
      - description: Expedition
        in: body
        name: expedition
        required: true
        schema:
          $ref: '#/definitions/models.Expedition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Expedition'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Expedition
      tags:
      - Expedition
  /expedition/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteExpedition
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Expedition
      tags:
      - Expedition
    get:
      consumes:
      - application/json
      operationId: getExpedition
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Expedition'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Expedition
      tags:
      - Expedition
    patch:
      consumes:
      - application/json
      operationId: updateExpedition
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Expedition
        in: body
        name: expedition
        required: true
        schema:
          $ref: '#/definitions/models.Expedition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Expedition'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Expedition
      tags:
      - Expedition
  /expedition_lockout:
    put:
      consumes:
      - application/json
      operationId: createExpeditionLockout
      parameters:
      - description: ExpeditionLockout
        in: body
        name: expedition_lockout
        required: true
        schema:
          $ref: '#/definitions/models.ExpeditionLockout'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionLockout'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates ExpeditionLockout
      tags:
      - ExpeditionLockout
  /expedition_lockout/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteExpeditionLockout
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes ExpeditionLockout
      tags:
      - ExpeditionLockout
    get:
      consumes:
      - application/json
      operationId: getExpeditionLockout
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionLockout'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ExpeditionLockout
      tags:
      - ExpeditionLockout
    patch:
      consumes:
      - application/json
      operationId: updateExpeditionLockout
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: ExpeditionLockout
        in: body
        name: expedition_lockout
        required: true
        schema:
          $ref: '#/definitions/models.ExpeditionLockout'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionLockout'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates ExpeditionLockout
      tags:
      - ExpeditionLockout
  /expedition_lockouts:
    get:
      consumes:
      - application/json
      operationId: listExpeditionLockouts
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionLockout'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists ExpeditionLockouts
      tags:
      - ExpeditionLockout
  /expedition_lockouts/bulk:
    post:
      consumes:
      - application/json
      operationId: getExpeditionLockoutsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionLockout'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ExpeditionLockouts in bulk
      tags:
      - ExpeditionLockout
  /expedition_member:
    put:
      consumes:
      - application/json
      operationId: createExpeditionMember
      parameters:
      - description: ExpeditionMember
        in: body
        name: expedition_member
        required: true
        schema:
          $ref: '#/definitions/models.ExpeditionMember'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionMember'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates ExpeditionMember
      tags:
      - ExpeditionMember
  /expedition_member/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteExpeditionMember
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes ExpeditionMember
      tags:
      - ExpeditionMember
    get:
      consumes:
      - application/json
      operationId: getExpeditionMember
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionMember'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ExpeditionMember
      tags:
      - ExpeditionMember
    patch:
      consumes:
      - application/json
      operationId: updateExpeditionMember
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: ExpeditionMember
        in: body
        name: expedition_member
        required: true
        schema:
          $ref: '#/definitions/models.ExpeditionMember'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionMember'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates ExpeditionMember
      tags:
      - ExpeditionMember
  /expedition_members:
    get:
      consumes:
      - application/json
      operationId: listExpeditionMembers
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionMember'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists ExpeditionMembers
      tags:
      - ExpeditionMember
  /expedition_members/bulk:
    post:
      consumes:
      - application/json
      operationId: getExpeditionMembersBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ExpeditionMember'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ExpeditionMembers in bulk
      tags:
      - ExpeditionMember
  /expeditions:
    get:
      consumes:
      - application/json
      operationId: listExpeditions
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Expedition'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Expeditions
      tags:
      - Expedition
  /expeditions/bulk:
    post:
      consumes:
      - application/json
      operationId: getExpeditionsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Expedition'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Expeditions in bulk
      tags:
      - Expedition
  /faction_list:
    put:
      consumes:
      - application/json
      operationId: createFactionList
      parameters:
      - description: FactionList
        in: body
        name: faction_list
        required: true
        schema:
          $ref: '#/definitions/models.FactionList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionList'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates FactionList
      tags:
      - FactionList
  /faction_list/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteFactionList
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes FactionList
      tags:
      - FactionList
    get:
      consumes:
      - application/json
      operationId: getFactionList
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionList'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets FactionList
      tags:
      - FactionList
    patch:
      consumes:
      - application/json
      operationId: updateFactionList
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: FactionList
        in: body
        name: faction_list
        required: true
        schema:
          $ref: '#/definitions/models.FactionList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionList'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates FactionList
      tags:
      - FactionList
  /faction_list_mod:
    put:
      consumes:
      - application/json
      operationId: createFactionListMod
      parameters:
      - description: FactionListMod
        in: body
        name: faction_list_mod
        required: true
        schema:
          $ref: '#/definitions/models.FactionListMod'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionListMod'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates FactionListMod
      tags:
      - FactionListMod
  /faction_list_mod/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteFactionListMod
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes FactionListMod
      tags:
      - FactionListMod
    get:
      consumes:
      - application/json
      operationId: getFactionListMod
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionListMod'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets FactionListMod
      tags:
      - FactionListMod
    patch:
      consumes:
      - application/json
      operationId: updateFactionListMod
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: FactionListMod
        in: body
        name: faction_list_mod
        required: true
        schema:
          $ref: '#/definitions/models.FactionListMod'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionListMod'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates FactionListMod
      tags:
      - FactionListMod
  /faction_list_mods:
    get:
      consumes:
      - application/json
      operationId: listFactionListMods
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionListMod'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists FactionListMods
      tags:
      - FactionListMod
  /faction_list_mods/bulk:
    post:
      consumes:
      - application/json
      operationId: getFactionListModsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionListMod'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets FactionListMods in bulk
      tags:
      - FactionListMod
  /faction_lists:
    get:
      consumes:
      - application/json
      operationId: listFactionLists
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionList'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists FactionLists
      tags:
      - FactionList
  /faction_lists/bulk:
    post:
      consumes:
      - application/json
      operationId: getFactionListsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FactionList'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets FactionLists in bulk
      tags:
      - FactionList
  /fishing:
    put:
      consumes:
      - application/json
      operationId: createFishing
      parameters:
      - description: Fishing
        in: body
        name: fishing
        required: true
        schema:
          $ref: '#/definitions/models.Fishing'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Fishing'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Fishing
      tags:
      - Fishing
  /fishing/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteFishing
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Fishing
      tags:
      - Fishing
    get:
      consumes:
      - application/json
      operationId: getFishing
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Fishing'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Fishing
      tags:
      - Fishing
    patch:
      consumes:
      - application/json
      operationId: updateFishing
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Fishing
        in: body
        name: fishing
        required: true
        schema:
          $ref: '#/definitions/models.Fishing'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Fishing'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Fishing
      tags:
      - Fishing
  /fishings:
    get:
      consumes:
      - application/json
      operationId: listFishings
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Fishing'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Fishings
      tags:
      - Fishing
  /fishings/bulk:
    post:
      consumes:
      - application/json
      operationId: getFishingsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Fishing'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Fishings in bulk
      tags:
      - Fishing
  /forage:
    put:
      consumes:
      - application/json
      operationId: createForage
      parameters:
      - description: Forage
        in: body
        name: forage
        required: true
        schema:
          $ref: '#/definitions/models.Forage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Forage'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Forage
      tags:
      - Forage
  /forage/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteForage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Forage
      tags:
      - Forage
    get:
      consumes:
      - application/json
      operationId: getForage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Forage'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Forage
      tags:
      - Forage
    patch:
      consumes:
      - application/json
      operationId: updateForage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Forage
        in: body
        name: forage
        required: true
        schema:
          $ref: '#/definitions/models.Forage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Forage'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Forage
      tags:
      - Forage
  /forages:
    get:
      consumes:
      - application/json
      operationId: listForages
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Forage'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Forages
      tags:
      - Forage
  /forages/bulk:
    post:
      consumes:
      - application/json
      operationId: getForagesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Forage'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Forages in bulk
      tags:
      - Forage
  /global_loot:
    put:
      consumes:
      - application/json
      operationId: createGlobalLoot
      parameters:
      - description: GlobalLoot
        in: body
        name: global_loot
        required: true
        schema:
          $ref: '#/definitions/models.GlobalLoot'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GlobalLoot'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates GlobalLoot
      tags:
      - GlobalLoot
  /global_loot/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteGlobalLoot
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes GlobalLoot
      tags:
      - GlobalLoot
    get:
      consumes:
      - application/json
      operationId: getGlobalLoot
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GlobalLoot'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets GlobalLoot
      tags:
      - GlobalLoot
    patch:
      consumes:
      - application/json
      operationId: updateGlobalLoot
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: GlobalLoot
        in: body
        name: global_loot
        required: true
        schema:
          $ref: '#/definitions/models.GlobalLoot'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GlobalLoot'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates GlobalLoot
      tags:
      - GlobalLoot
  /global_loots:
    get:
      consumes:
      - application/json
      operationId: listGlobalLoots
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GlobalLoot'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists GlobalLoots
      tags:
      - GlobalLoot
  /global_loots/bulk:
    post:
      consumes:
      - application/json
      operationId: getGlobalLootsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GlobalLoot'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets GlobalLoots in bulk
      tags:
      - GlobalLoot
  /graveyard:
    put:
      consumes:
      - application/json
      operationId: createGraveyard
      parameters:
      - description: Graveyard
        in: body
        name: graveyard
        required: true
        schema:
          $ref: '#/definitions/models.Graveyard'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Graveyard'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Graveyard
      tags:
      - Graveyard
  /graveyard/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteGraveyard
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Graveyard
      tags:
      - Graveyard
    get:
      consumes:
      - application/json
      operationId: getGraveyard
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Graveyard'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Graveyard
      tags:
      - Graveyard
    patch:
      consumes:
      - application/json
      operationId: updateGraveyard
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Graveyard
        in: body
        name: graveyard
        required: true
        schema:
          $ref: '#/definitions/models.Graveyard'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Graveyard'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Graveyard
      tags:
      - Graveyard
  /graveyards:
    get:
      consumes:
      - application/json
      operationId: listGraveyards
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Graveyard'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Graveyards
      tags:
      - Graveyard
  /graveyards/bulk:
    post:
      consumes:
      - application/json
      operationId: getGraveyardsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Graveyard'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Graveyards in bulk
      tags:
      - Graveyard
  /grid:
    put:
      consumes:
      - application/json
      operationId: createGrid
      parameters:
      - description: Grid
        in: body
        name: grid
        required: true
        schema:
          $ref: '#/definitions/models.Grid'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Grid'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Grid
      tags:
      - Grid
  /grid/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteGrid
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Grid
      tags:
      - Grid
    get:
      consumes:
      - application/json
      operationId: getGrid
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>GridEntries
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Grid'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Grid
      tags:
      - Grid
    patch:
      consumes:
      - application/json
      operationId: updateGrid
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Grid
        in: body
        name: grid
        required: true
        schema:
          $ref: '#/definitions/models.Grid'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Grid'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Grid
      tags:
      - Grid
  /grids:
    get:
      consumes:
      - application/json
      operationId: listGrids
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>GridEntries
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Grid'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Grids
      tags:
      - Grid
  /grids/bulk:
    post:
      consumes:
      - application/json
      operationId: getGridsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Grid'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Grids in bulk
      tags:
      - Grid
  /ground_spawn:
    put:
      consumes:
      - application/json
      operationId: createGroundSpawn
      parameters:
      - description: GroundSpawn
        in: body
        name: ground_spawn
        required: true
        schema:
          $ref: '#/definitions/models.GroundSpawn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GroundSpawn'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates GroundSpawn
      tags:
      - GroundSpawn
  /ground_spawn/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteGroundSpawn
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes GroundSpawn
      tags:
      - GroundSpawn
    get:
      consumes:
      - application/json
      operationId: getGroundSpawn
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GroundSpawn'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets GroundSpawn
      tags:
      - GroundSpawn
    patch:
      consumes:
      - application/json
      operationId: updateGroundSpawn
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: GroundSpawn
        in: body
        name: ground_spawn
        required: true
        schema:
          $ref: '#/definitions/models.GroundSpawn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GroundSpawn'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates GroundSpawn
      tags:
      - GroundSpawn
  /ground_spawns:
    get:
      consumes:
      - application/json
      operationId: listGroundSpawns
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GroundSpawn'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists GroundSpawns
      tags:
      - GroundSpawn
  /ground_spawns/bulk:
    post:
      consumes:
      - application/json
      operationId: getGroundSpawnsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GroundSpawn'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets GroundSpawns in bulk
      tags:
      - GroundSpawn
  /guild:
    put:
      consumes:
      - application/json
      operationId: createGuild
      parameters:
      - description: Guild
        in: body
        name: guild
        required: true
        schema:
          $ref: '#/definitions/models.Guild'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Guild'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Guild
      tags:
      - Guild
  /guild/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteGuild
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Guild
      tags:
      - Guild
    get:
      consumes:
      - application/json
      operationId: getGuild
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>GuildBanks<br>GuildMembers<br>GuildRanks
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Guild'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Guild
      tags:
      - Guild
    patch:
      consumes:
      - application/json
      operationId: updateGuild
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Guild
        in: body
        name: guild
        required: true
        schema:
          $ref: '#/definitions/models.Guild'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Guild'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Guild
      tags:
      - Guild
  /guilds:
    get:
      consumes:
      - application/json
      operationId: listGuilds
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>GuildBanks<br>GuildMembers<br>GuildRanks
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Guild'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Guilds
      tags:
      - Guild
  /guilds/bulk:
    post:
      consumes:
      - application/json
      operationId: getGuildsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Guild'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Guilds in bulk
      tags:
      - Guild
  /hacker:
    put:
      consumes:
      - application/json
      operationId: createHacker
      parameters:
      - description: Hacker
        in: body
        name: hacker
        required: true
        schema:
          $ref: '#/definitions/models.Hacker'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hacker'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Hacker
      tags:
      - Hacker
  /hacker/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteHacker
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Hacker
      tags:
      - Hacker
    get:
      consumes:
      - application/json
      operationId: getHacker
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hacker'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Hacker
      tags:
      - Hacker
    patch:
      consumes:
      - application/json
      operationId: updateHacker
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Hacker
        in: body
        name: hacker
        required: true
        schema:
          $ref: '#/definitions/models.Hacker'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hacker'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Hacker
      tags:
      - Hacker
  /hackers:
    get:
      consumes:
      - application/json
      operationId: listHackers
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hacker'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Hackers
      tags:
      - Hacker
  /hackers/bulk:
    post:
      consumes:
      - application/json
      operationId: getHackersBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hacker'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Hackers in bulk
      tags:
      - Hacker
  /instance_list:
    put:
      consumes:
      - application/json
      operationId: createInstanceList
      parameters:
      - description: InstanceList
        in: body
        name: instance_list
        required: true
        schema:
          $ref: '#/definitions/models.InstanceList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceList'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates InstanceList
      tags:
      - InstanceList
  /instance_list/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteInstanceList
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes InstanceList
      tags:
      - InstanceList
    get:
      consumes:
      - application/json
      operationId: getInstanceList
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>InstanceListPlayers<br>Zones
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceList'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets InstanceList
      tags:
      - InstanceList
    patch:
      consumes:
      - application/json
      operationId: updateInstanceList
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: InstanceList
        in: body
        name: instance_list
        required: true
        schema:
          $ref: '#/definitions/models.InstanceList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceList'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates InstanceList
      tags:
      - InstanceList
  /instance_list_player:
    put:
      consumes:
      - application/json
      operationId: createInstanceListPlayer
      parameters:
      - description: InstanceListPlayer
        in: body
        name: instance_list_player
        required: true
        schema:
          $ref: '#/definitions/models.InstanceListPlayer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceListPlayer'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates InstanceListPlayer
      tags:
      - InstanceListPlayer
  /instance_list_player/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteInstanceListPlayer
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes InstanceListPlayer
      tags:
      - InstanceListPlayer
    get:
      consumes:
      - application/json
      operationId: getInstanceListPlayer
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceListPlayer'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets InstanceListPlayer
      tags:
      - InstanceListPlayer
    patch:
      consumes:
      - application/json
      operationId: updateInstanceListPlayer
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: InstanceListPlayer
        in: body
        name: instance_list_player
        required: true
        schema:
          $ref: '#/definitions/models.InstanceListPlayer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceListPlayer'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates InstanceListPlayer
      tags:
      - InstanceListPlayer
  /instance_list_players:
    get:
      consumes:
      - application/json
      operationId: listInstanceListPlayers
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceListPlayer'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists InstanceListPlayers
      tags:
      - InstanceListPlayer
  /instance_list_players/bulk:
    post:
      consumes:
      - application/json
      operationId: getInstanceListPlayersBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceListPlayer'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets InstanceListPlayers in bulk
      tags:
      - InstanceListPlayer
  /instance_lists:
    get:
      consumes:
      - application/json
      operationId: listInstanceLists
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>InstanceListPlayers<br>Zones
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceList'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists InstanceLists
      tags:
      - InstanceList
  /instance_lists/bulk:
    post:
      consumes:
      - application/json
      operationId: getInstanceListsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstanceList'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets InstanceLists in bulk
      tags:
      - InstanceList
  /item:
    put:
      consumes:
      - application/json
      operationId: createItem
      parameters:
      - description: Item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Item
      tags:
      - Item
  /item/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteItem
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Item
      tags:
      - Item
    get:
      consumes:
      - application/json
      operationId: getItem
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>DiscoveredItems
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Item
      tags:
      - Item
    patch:
      consumes:
      - application/json
      operationId: updateItem
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Item
      tags:
      - Item
  /items:
    get:
      consumes:
      - application/json
      operationId: listItems
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>DiscoveredItems
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Items
      tags:
      - Item
  /items/bulk:
    post:
      consumes:
      - application/json
      operationId: getItemsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Items in bulk
      tags:
      - Item
  /ldon_trap_entries:
    get:
      consumes:
      - application/json
      operationId: listLdonTrapEntries
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists LdonTrapEntries
      tags:
      - LdonTrapEntry
  /ldon_trap_entries/bulk:
    post:
      consumes:
      - application/json
      operationId: getLdonTrapEntriesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LdonTrapEntries in bulk
      tags:
      - LdonTrapEntry
  /ldon_trap_entry:
    put:
      consumes:
      - application/json
      operationId: createLdonTrapEntry
      parameters:
      - description: LdonTrapEntry
        in: body
        name: ldon_trap_entry
        required: true
        schema:
          $ref: '#/definitions/models.LdonTrapEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapEntry'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates LdonTrapEntry
      tags:
      - LdonTrapEntry
  /ldon_trap_entry/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLdonTrapEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes LdonTrapEntry
      tags:
      - LdonTrapEntry
    get:
      consumes:
      - application/json
      operationId: getLdonTrapEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapEntry'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LdonTrapEntry
      tags:
      - LdonTrapEntry
    patch:
      consumes:
      - application/json
      operationId: updateLdonTrapEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: LdonTrapEntry
        in: body
        name: ldon_trap_entry
        required: true
        schema:
          $ref: '#/definitions/models.LdonTrapEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapEntry'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates LdonTrapEntry
      tags:
      - LdonTrapEntry
  /ldon_trap_template:
    put:
      consumes:
      - application/json
      operationId: createLdonTrapTemplate
      parameters:
      - description: LdonTrapTemplate
        in: body
        name: ldon_trap_template
        required: true
        schema:
          $ref: '#/definitions/models.LdonTrapTemplate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapTemplate'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates LdonTrapTemplate
      tags:
      - LdonTrapTemplate
  /ldon_trap_template/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLdonTrapTemplate
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes LdonTrapTemplate
      tags:
      - LdonTrapTemplate
    get:
      consumes:
      - application/json
      operationId: getLdonTrapTemplate
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapTemplate'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LdonTrapTemplate
      tags:
      - LdonTrapTemplate
    patch:
      consumes:
      - application/json
      operationId: updateLdonTrapTemplate
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: LdonTrapTemplate
        in: body
        name: ldon_trap_template
        required: true
        schema:
          $ref: '#/definitions/models.LdonTrapTemplate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapTemplate'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates LdonTrapTemplate
      tags:
      - LdonTrapTemplate
  /ldon_trap_templates:
    get:
      consumes:
      - application/json
      operationId: listLdonTrapTemplates
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapTemplate'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists LdonTrapTemplates
      tags:
      - LdonTrapTemplate
  /ldon_trap_templates/bulk:
    post:
      consumes:
      - application/json
      operationId: getLdonTrapTemplatesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LdonTrapTemplate'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LdonTrapTemplates in bulk
      tags:
      - LdonTrapTemplate
  /login_account:
    put:
      consumes:
      - application/json
      operationId: createLoginAccount
      parameters:
      - description: LoginAccount
        in: body
        name: login_account
        required: true
        schema:
          $ref: '#/definitions/models.LoginAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginAccount'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates LoginAccount
      tags:
      - LoginAccount
  /login_account/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLoginAccount
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes LoginAccount
      tags:
      - LoginAccount
    get:
      consumes:
      - application/json
      operationId: getLoginAccount
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginAccount'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginAccount
      tags:
      - LoginAccount
    patch:
      consumes:
      - application/json
      operationId: updateLoginAccount
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: LoginAccount
        in: body
        name: login_account
        required: true
        schema:
          $ref: '#/definitions/models.LoginAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginAccount'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates LoginAccount
      tags:
      - LoginAccount
  /login_accounts:
    get:
      consumes:
      - application/json
      operationId: listLoginAccounts
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginAccount'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists LoginAccounts
      tags:
      - LoginAccount
  /login_accounts/bulk:
    post:
      consumes:
      - application/json
      operationId: getLoginAccountsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginAccount'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginAccounts in bulk
      tags:
      - LoginAccount
  /login_api_token:
    put:
      consumes:
      - application/json
      operationId: createLoginApiToken
      parameters:
      - description: LoginApiToken
        in: body
        name: login_api_token
        required: true
        schema:
          $ref: '#/definitions/models.LoginApiToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginApiToken'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates LoginApiToken
      tags:
      - LoginApiToken
  /login_api_token/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLoginApiToken
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes LoginApiToken
      tags:
      - LoginApiToken
    get:
      consumes:
      - application/json
      operationId: getLoginApiToken
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginApiToken'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginApiToken
      tags:
      - LoginApiToken
    patch:
      consumes:
      - application/json
      operationId: updateLoginApiToken
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: LoginApiToken
        in: body
        name: login_api_token
        required: true
        schema:
          $ref: '#/definitions/models.LoginApiToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginApiToken'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates LoginApiToken
      tags:
      - LoginApiToken
  /login_api_tokens:
    get:
      consumes:
      - application/json
      operationId: listLoginApiTokens
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginApiToken'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists LoginApiTokens
      tags:
      - LoginApiToken
  /login_api_tokens/bulk:
    post:
      consumes:
      - application/json
      operationId: getLoginApiTokensBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginApiToken'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginApiTokens in bulk
      tags:
      - LoginApiToken
  /login_server_admin:
    put:
      consumes:
      - application/json
      operationId: createLoginServerAdmin
      parameters:
      - description: LoginServerAdmin
        in: body
        name: login_server_admin
        required: true
        schema:
          $ref: '#/definitions/models.LoginServerAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerAdmin'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates LoginServerAdmin
      tags:
      - LoginServerAdmin
  /login_server_admin/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLoginServerAdmin
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes LoginServerAdmin
      tags:
      - LoginServerAdmin
    get:
      consumes:
      - application/json
      operationId: getLoginServerAdmin
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerAdmin'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginServerAdmin
      tags:
      - LoginServerAdmin
    patch:
      consumes:
      - application/json
      operationId: updateLoginServerAdmin
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: LoginServerAdmin
        in: body
        name: login_server_admin
        required: true
        schema:
          $ref: '#/definitions/models.LoginServerAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerAdmin'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates LoginServerAdmin
      tags:
      - LoginServerAdmin
  /login_server_admins:
    get:
      consumes:
      - application/json
      operationId: listLoginServerAdmins
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerAdmin'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists LoginServerAdmins
      tags:
      - LoginServerAdmin
  /login_server_admins/bulk:
    post:
      consumes:
      - application/json
      operationId: getLoginServerAdminsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerAdmin'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginServerAdmins in bulk
      tags:
      - LoginServerAdmin
  /login_server_list_type:
    put:
      consumes:
      - application/json
      operationId: createLoginServerListType
      parameters:
      - description: LoginServerListType
        in: body
        name: login_server_list_type
        required: true
        schema:
          $ref: '#/definitions/models.LoginServerListType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerListType'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates LoginServerListType
      tags:
      - LoginServerListType
  /login_server_list_type/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLoginServerListType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes LoginServerListType
      tags:
      - LoginServerListType
    get:
      consumes:
      - application/json
      operationId: getLoginServerListType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerListType'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginServerListType
      tags:
      - LoginServerListType
    patch:
      consumes:
      - application/json
      operationId: updateLoginServerListType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: LoginServerListType
        in: body
        name: login_server_list_type
        required: true
        schema:
          $ref: '#/definitions/models.LoginServerListType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerListType'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates LoginServerListType
      tags:
      - LoginServerListType
  /login_server_list_types:
    get:
      consumes:
      - application/json
      operationId: listLoginServerListTypes
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerListType'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists LoginServerListTypes
      tags:
      - LoginServerListType
  /login_server_list_types/bulk:
    post:
      consumes:
      - application/json
      operationId: getLoginServerListTypesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginServerListType'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginServerListTypes in bulk
      tags:
      - LoginServerListType
  /login_world_server:
    put:
      consumes:
      - application/json
      operationId: createLoginWorldServer
      parameters:
      - description: LoginWorldServer
        in: body
        name: login_world_server
        required: true
        schema:
          $ref: '#/definitions/models.LoginWorldServer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginWorldServer'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates LoginWorldServer
      tags:
      - LoginWorldServer
  /login_world_server/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLoginWorldServer
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes LoginWorldServer
      tags:
      - LoginWorldServer
    get:
      consumes:
      - application/json
      operationId: getLoginWorldServer
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginWorldServer'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginWorldServer
      tags:
      - LoginWorldServer
    patch:
      consumes:
      - application/json
      operationId: updateLoginWorldServer
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: LoginWorldServer
        in: body
        name: login_world_server
        required: true
        schema:
          $ref: '#/definitions/models.LoginWorldServer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginWorldServer'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates LoginWorldServer
      tags:
      - LoginWorldServer
  /login_world_servers:
    get:
      consumes:
      - application/json
      operationId: listLoginWorldServers
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginWorldServer'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists LoginWorldServers
      tags:
      - LoginWorldServer
  /login_world_servers/bulk:
    post:
      consumes:
      - application/json
      operationId: getLoginWorldServersBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LoginWorldServer'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets LoginWorldServers in bulk
      tags:
      - LoginWorldServer
  /lootdrop:
    put:
      consumes:
      - application/json
      operationId: createLootdrop
      parameters:
      - description: Lootdrop
        in: body
        name: lootdrop
        required: true
        schema:
          $ref: '#/definitions/models.Lootdrop'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Lootdrop'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Lootdrop
      tags:
      - Lootdrop
  /lootdrop/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLootdrop
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Lootdrop
      tags:
      - Lootdrop
    get:
      consumes:
      - application/json
      operationId: getLootdrop
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>LootdropEntries<br>LootdropEntries.Item<br>LootdropEntries.Item.DiscoveredItems
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Lootdrop'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Lootdrop
      tags:
      - Lootdrop
    patch:
      consumes:
      - application/json
      operationId: updateLootdrop
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Lootdrop
        in: body
        name: lootdrop
        required: true
        schema:
          $ref: '#/definitions/models.Lootdrop'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Lootdrop'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Lootdrop
      tags:
      - Lootdrop
  /lootdrops:
    get:
      consumes:
      - application/json
      operationId: listLootdrops
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>LootdropEntries<br>LootdropEntries.Item<br>LootdropEntries.Item.DiscoveredItems
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Lootdrop'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Lootdrops
      tags:
      - Lootdrop
  /lootdrops/bulk:
    post:
      consumes:
      - application/json
      operationId: getLootdropsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Lootdrop'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Lootdrops in bulk
      tags:
      - Lootdrop
  /loottable:
    put:
      consumes:
      - application/json
      operationId: createLoottable
      parameters:
      - description: Loottable
        in: body
        name: loottable
        required: true
        schema:
          $ref: '#/definitions/models.Loottable'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Loottable'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Loottable
      tags:
      - Loottable
  /loottable/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteLoottable
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Loottable
      tags:
      - Loottable
    get:
      consumes:
      - application/json
      operationId: getLoottable
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>LoottableEntries<br>LoottableEntries.LootdropEntries<br>LoottableEntries.LootdropEntries.Item<br>LoottableEntries.LootdropEntries.Item.DiscoveredItems
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Loottable'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Loottable
      tags:
      - Loottable
    patch:
      consumes:
      - application/json
      operationId: updateLoottable
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Loottable
        in: body
        name: loottable
        required: true
        schema:
          $ref: '#/definitions/models.Loottable'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Loottable'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Loottable
      tags:
      - Loottable
  /loottables:
    get:
      consumes:
      - application/json
      operationId: listLoottables
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>LoottableEntries<br>LoottableEntries.LootdropEntries<br>LoottableEntries.LootdropEntries.Item<br>LoottableEntries.LootdropEntries.Item.DiscoveredItems
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Loottable'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Loottables
      tags:
      - Loottable
  /loottables/bulk:
    post:
      consumes:
      - application/json
      operationId: getLoottablesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Loottable'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Loottables in bulk
      tags:
      - Loottable
  /me:
    get:
      consumes:
      - application/json
      operationId: me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Returns current logged in user information
      tags:
      - Me
  /name_filter:
    put:
      consumes:
      - application/json
      operationId: createNameFilter
      parameters:
      - description: NameFilter
        in: body
        name: name_filter
        required: true
        schema:
          $ref: '#/definitions/models.NameFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NameFilter'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NameFilter
      tags:
      - NameFilter
  /name_filter/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNameFilter
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NameFilter
      tags:
      - NameFilter
    get:
      consumes:
      - application/json
      operationId: getNameFilter
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NameFilter'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NameFilter
      tags:
      - NameFilter
    patch:
      consumes:
      - application/json
      operationId: updateNameFilter
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NameFilter
        in: body
        name: name_filter
        required: true
        schema:
          $ref: '#/definitions/models.NameFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NameFilter'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NameFilter
      tags:
      - NameFilter
  /name_filters:
    get:
      consumes:
      - application/json
      operationId: listNameFilters
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NameFilter'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NameFilters
      tags:
      - NameFilter
  /name_filters/bulk:
    post:
      consumes:
      - application/json
      operationId: getNameFiltersBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NameFilter'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NameFilters in bulk
      tags:
      - NameFilter
  /npc_emote:
    put:
      consumes:
      - application/json
      operationId: createNpcEmote
      parameters:
      - description: NpcEmote
        in: body
        name: npc_emote
        required: true
        schema:
          $ref: '#/definitions/models.NpcEmote'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcEmote'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcEmote
      tags:
      - NpcEmote
  /npc_emote/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcEmote
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcEmote
      tags:
      - NpcEmote
    get:
      consumes:
      - application/json
      operationId: getNpcEmote
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcEmote'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcEmote
      tags:
      - NpcEmote
    patch:
      consumes:
      - application/json
      operationId: updateNpcEmote
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcEmote
        in: body
        name: npc_emote
        required: true
        schema:
          $ref: '#/definitions/models.NpcEmote'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcEmote'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcEmote
      tags:
      - NpcEmote
  /npc_emotes:
    get:
      consumes:
      - application/json
      operationId: listNpcEmotes
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcEmote'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcEmotes
      tags:
      - NpcEmote
  /npc_emotes/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcEmotesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcEmote'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcEmotes in bulk
      tags:
      - NpcEmote
  /npc_faction:
    put:
      consumes:
      - application/json
      operationId: createNpcFaction
      parameters:
      - description: NpcFaction
        in: body
        name: npc_faction
        required: true
        schema:
          $ref: '#/definitions/models.NpcFaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcFaction'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcFaction
      tags:
      - NpcFaction
  /npc_faction/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcFaction
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcFaction
      tags:
      - NpcFaction
    get:
      consumes:
      - application/json
      operationId: getNpcFaction
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>NpcFactionEntries
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcFaction'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcFaction
      tags:
      - NpcFaction
    patch:
      consumes:
      - application/json
      operationId: updateNpcFaction
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcFaction
        in: body
        name: npc_faction
        required: true
        schema:
          $ref: '#/definitions/models.NpcFaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcFaction'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcFaction
      tags:
      - NpcFaction
  /npc_factions:
    get:
      consumes:
      - application/json
      operationId: listNpcFactions
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>NpcFactionEntries
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcFaction'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcFactions
      tags:
      - NpcFaction
  /npc_factions/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcFactionsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcFaction'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcFactions in bulk
      tags:
      - NpcFaction
  /npc_spell:
    put:
      consumes:
      - application/json
      operationId: createNpcSpell
      parameters:
      - description: NpcSpell
        in: body
        name: npc_spell
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpell'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcSpell
      tags:
      - NpcSpell
  /npc_spell/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcSpell
      tags:
      - NpcSpell
    get:
      consumes:
      - application/json
      operationId: getNpcSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>NpcSpellsEntries
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpell'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpell
      tags:
      - NpcSpell
    patch:
      consumes:
      - application/json
      operationId: updateNpcSpell
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcSpell
        in: body
        name: npc_spell
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpell'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpell'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcSpell
      tags:
      - NpcSpell
  /npc_spells:
    get:
      consumes:
      - application/json
      operationId: listNpcSpells
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>NpcSpellsEntries
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcSpells
      tags:
      - NpcSpell
  /npc_spells/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcSpellsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpell'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpells in bulk
      tags:
      - NpcSpell
  /npc_spells_effect:
    put:
      consumes:
      - application/json
      operationId: createNpcSpellsEffect
      parameters:
      - description: NpcSpellsEffect
        in: body
        name: npc_spells_effect
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpellsEffect'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffect'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcSpellsEffect
      tags:
      - NpcSpellsEffect
  /npc_spells_effect/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcSpellsEffect
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcSpellsEffect
      tags:
      - NpcSpellsEffect
    get:
      consumes:
      - application/json
      operationId: getNpcSpellsEffect
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>NpcSpellsEffectsEntries
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffect'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpellsEffect
      tags:
      - NpcSpellsEffect
    patch:
      consumes:
      - application/json
      operationId: updateNpcSpellsEffect
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcSpellsEffect
        in: body
        name: npc_spells_effect
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpellsEffect'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffect'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcSpellsEffect
      tags:
      - NpcSpellsEffect
  /npc_spells_effects:
    get:
      consumes:
      - application/json
      operationId: listNpcSpellsEffects
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>NpcSpellsEffectsEntries
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffect'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcSpellsEffects
      tags:
      - NpcSpellsEffect
  /npc_spells_effects/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcSpellsEffectsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffect'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpellsEffects in bulk
      tags:
      - NpcSpellsEffect
  /npc_spells_effects_entries:
    get:
      consumes:
      - application/json
      operationId: listNpcSpellsEffectsEntries
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffectsEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcSpellsEffectsEntries
      tags:
      - NpcSpellsEffectsEntry
  /npc_spells_effects_entries/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcSpellsEffectsEntriesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffectsEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpellsEffectsEntries in bulk
      tags:
      - NpcSpellsEffectsEntry
  /npc_spells_effects_entry:
    put:
      consumes:
      - application/json
      operationId: createNpcSpellsEffectsEntry
      parameters:
      - description: NpcSpellsEffectsEntry
        in: body
        name: npc_spells_effects_entry
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpellsEffectsEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffectsEntry'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcSpellsEffectsEntry
      tags:
      - NpcSpellsEffectsEntry
  /npc_spells_effects_entry/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcSpellsEffectsEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcSpellsEffectsEntry
      tags:
      - NpcSpellsEffectsEntry
    get:
      consumes:
      - application/json
      operationId: getNpcSpellsEffectsEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffectsEntry'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpellsEffectsEntry
      tags:
      - NpcSpellsEffectsEntry
    patch:
      consumes:
      - application/json
      operationId: updateNpcSpellsEffectsEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcSpellsEffectsEntry
        in: body
        name: npc_spells_effects_entry
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpellsEffectsEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEffectsEntry'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcSpellsEffectsEntry
      tags:
      - NpcSpellsEffectsEntry
  /npc_spells_entries:
    get:
      consumes:
      - application/json
      operationId: listNpcSpellsEntries
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcSpellsEntries
      tags:
      - NpcSpellsEntry
  /npc_spells_entries/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcSpellsEntriesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpellsEntries in bulk
      tags:
      - NpcSpellsEntry
  /npc_spells_entry:
    put:
      consumes:
      - application/json
      operationId: createNpcSpellsEntry
      parameters:
      - description: NpcSpellsEntry
        in: body
        name: npc_spells_entry
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpellsEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEntry'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcSpellsEntry
      tags:
      - NpcSpellsEntry
  /npc_spells_entry/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcSpellsEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcSpellsEntry
      tags:
      - NpcSpellsEntry
    get:
      consumes:
      - application/json
      operationId: getNpcSpellsEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEntry'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcSpellsEntry
      tags:
      - NpcSpellsEntry
    patch:
      consumes:
      - application/json
      operationId: updateNpcSpellsEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcSpellsEntry
        in: body
        name: npc_spells_entry
        required: true
        schema:
          $ref: '#/definitions/models.NpcSpellsEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcSpellsEntry'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcSpellsEntry
      tags:
      - NpcSpellsEntry
  /npc_type:
    put:
      consumes:
      - application/json
      operationId: createNpcType
      parameters:
      - description: NpcType
        in: body
        name: npc_type
        required: true
        schema:
          $ref: '#/definitions/models.NpcType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcType'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcType
      tags:
      - NpcType
  /npc_type/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcType
      tags:
      - NpcType
    get:
      consumes:
      - application/json
      operationId: getNpcType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>AlternateCurrency<br>Merchantlists<br>NpcEmotes<br>NpcFactions<br>NpcFactions.NpcFactionEntries<br>NpcSpells<br>NpcSpells.NpcSpellsEntries<br>NpcTypesTint<br>Spawnentries<br>Spawnentries.Spawngroup<br>Spawnentries.Spawngroup.Spawn2
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcType'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcType
      tags:
      - NpcType
    patch:
      consumes:
      - application/json
      operationId: updateNpcType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcType
        in: body
        name: npc_type
        required: true
        schema:
          $ref: '#/definitions/models.NpcType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcType'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcType
      tags:
      - NpcType
  /npc_types:
    get:
      consumes:
      - application/json
      operationId: listNpcTypes
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>AlternateCurrency<br>Merchantlists<br>NpcEmotes<br>NpcFactions<br>NpcFactions.NpcFactionEntries<br>NpcSpells<br>NpcSpells.NpcSpellsEntries<br>NpcTypesTint<br>Spawnentries<br>Spawnentries.Spawngroup<br>Spawnentries.Spawngroup.Spawn2
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcType'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcTypes
      tags:
      - NpcType
  /npc_types/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcTypesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcType'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcTypes in bulk
      tags:
      - NpcType
  /npc_types_tint:
    put:
      consumes:
      - application/json
      operationId: createNpcTypesTint
      parameters:
      - description: NpcTypesTint
        in: body
        name: npc_types_tint
        required: true
        schema:
          $ref: '#/definitions/models.NpcTypesTint'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcTypesTint'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates NpcTypesTint
      tags:
      - NpcTypesTint
  /npc_types_tint/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteNpcTypesTint
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes NpcTypesTint
      tags:
      - NpcTypesTint
    get:
      consumes:
      - application/json
      operationId: getNpcTypesTint
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcTypesTint'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcTypesTint
      tags:
      - NpcTypesTint
    patch:
      consumes:
      - application/json
      operationId: updateNpcTypesTint
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: NpcTypesTint
        in: body
        name: npc_types_tint
        required: true
        schema:
          $ref: '#/definitions/models.NpcTypesTint'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcTypesTint'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates NpcTypesTint
      tags:
      - NpcTypesTint
  /npc_types_tints:
    get:
      consumes:
      - application/json
      operationId: listNpcTypesTints
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcTypesTint'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists NpcTypesTints
      tags:
      - NpcTypesTint
  /npc_types_tints/bulk:
    post:
      consumes:
      - application/json
      operationId: getNpcTypesTintsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NpcTypesTint'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets NpcTypesTints in bulk
      tags:
      - NpcTypesTint
  /object:
    put:
      consumes:
      - application/json
      operationId: createObject
      parameters:
      - description: Object
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Object'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Object
      tags:
      - Object
  /object/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteObject
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Object
      tags:
      - Object
    get:
      consumes:
      - application/json
      operationId: getObject
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Object'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Object
      tags:
      - Object
    patch:
      consumes:
      - application/json
      operationId: updateObject
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Object
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Object'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Object
      tags:
      - Object
  /objects:
    get:
      consumes:
      - application/json
      operationId: listObjects
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Object'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Objects
      tags:
      - Object
  /objects/bulk:
    post:
      consumes:
      - application/json
      operationId: getObjectsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Object'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Objects in bulk
      tags:
      - Object
  /player_titleset:
    put:
      consumes:
      - application/json
      operationId: createPlayerTitleset
      parameters:
      - description: PlayerTitleset
        in: body
        name: player_titleset
        required: true
        schema:
          $ref: '#/definitions/models.PlayerTitleset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlayerTitleset'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates PlayerTitleset
      tags:
      - PlayerTitleset
  /player_titleset/{id}:
    delete:
      consumes:
      - application/json
      operationId: deletePlayerTitleset
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes PlayerTitleset
      tags:
      - PlayerTitleset
    get:
      consumes:
      - application/json
      operationId: getPlayerTitleset
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlayerTitleset'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets PlayerTitleset
      tags:
      - PlayerTitleset
    patch:
      consumes:
      - application/json
      operationId: updatePlayerTitleset
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: PlayerTitleset
        in: body
        name: player_titleset
        required: true
        schema:
          $ref: '#/definitions/models.PlayerTitleset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlayerTitleset'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates PlayerTitleset
      tags:
      - PlayerTitleset
  /player_titlesets:
    get:
      consumes:
      - application/json
      operationId: listPlayerTitlesets
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlayerTitleset'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists PlayerTitlesets
      tags:
      - PlayerTitleset
  /player_titlesets/bulk:
    post:
      consumes:
      - application/json
      operationId: getPlayerTitlesetsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlayerTitleset'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets PlayerTitlesets in bulk
      tags:
      - PlayerTitleset
  /report:
    put:
      consumes:
      - application/json
      operationId: createReport
      parameters:
      - description: Report
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/models.Report'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Report
      tags:
      - Report
  /report/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteReport
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Report
      tags:
      - Report
    get:
      consumes:
      - application/json
      operationId: getReport
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Report
      tags:
      - Report
    patch:
      consumes:
      - application/json
      operationId: updateReport
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Report
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/models.Report'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Report
      tags:
      - Report
  /reports:
    get:
      consumes:
      - application/json
      operationId: listReports
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Reports
      tags:
      - Report
  /reports/bulk:
    post:
      consumes:
      - application/json
      operationId: getReportsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Reports in bulk
      tags:
      - Report
  /respawn_time:
    put:
      consumes:
      - application/json
      operationId: createRespawnTime
      parameters:
      - description: RespawnTime
        in: body
        name: respawn_time
        required: true
        schema:
          $ref: '#/definitions/models.RespawnTime'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RespawnTime'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates RespawnTime
      tags:
      - RespawnTime
  /respawn_time/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteRespawnTime
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes RespawnTime
      tags:
      - RespawnTime
    get:
      consumes:
      - application/json
      operationId: getRespawnTime
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RespawnTime'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets RespawnTime
      tags:
      - RespawnTime
    patch:
      consumes:
      - application/json
      operationId: updateRespawnTime
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: RespawnTime
        in: body
        name: respawn_time
        required: true
        schema:
          $ref: '#/definitions/models.RespawnTime'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RespawnTime'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates RespawnTime
      tags:
      - RespawnTime
  /respawn_times:
    get:
      consumes:
      - application/json
      operationId: listRespawnTimes
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RespawnTime'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists RespawnTimes
      tags:
      - RespawnTime
  /respawn_times/bulk:
    post:
      consumes:
      - application/json
      operationId: getRespawnTimesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RespawnTime'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets RespawnTimes in bulk
      tags:
      - RespawnTime
  /saylink:
    put:
      consumes:
      - application/json
      operationId: createSaylink
      parameters:
      - description: Saylink
        in: body
        name: saylink
        required: true
        schema:
          $ref: '#/definitions/models.Saylink'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Saylink'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Saylink
      tags:
      - Saylink
  /saylink/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteSaylink
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Saylink
      tags:
      - Saylink
    get:
      consumes:
      - application/json
      operationId: getSaylink
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Saylink'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Saylink
      tags:
      - Saylink
    patch:
      consumes:
      - application/json
      operationId: updateSaylink
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Saylink
        in: body
        name: saylink
        required: true
        schema:
          $ref: '#/definitions/models.Saylink'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Saylink'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Saylink
      tags:
      - Saylink
  /saylinks:
    get:
      consumes:
      - application/json
      operationId: listSaylinks
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Saylink'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Saylinks
      tags:
      - Saylink
  /saylinks/bulk:
    post:
      consumes:
      - application/json
      operationId: getSaylinksBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Saylink'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Saylinks in bulk
      tags:
      - Saylink
  /server_scheduled_event:
    put:
      consumes:
      - application/json
      operationId: createServerScheduledEvent
      parameters:
      - description: ServerScheduledEvent
        in: body
        name: server_scheduled_event
        required: true
        schema:
          $ref: '#/definitions/models.ServerScheduledEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerScheduledEvent'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates ServerScheduledEvent
      tags:
      - ServerScheduledEvent
  /server_scheduled_event/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteServerScheduledEvent
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes ServerScheduledEvent
      tags:
      - ServerScheduledEvent
    get:
      consumes:
      - application/json
      operationId: getServerScheduledEvent
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerScheduledEvent'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ServerScheduledEvent
      tags:
      - ServerScheduledEvent
    patch:
      consumes:
      - application/json
      operationId: updateServerScheduledEvent
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: ServerScheduledEvent
        in: body
        name: server_scheduled_event
        required: true
        schema:
          $ref: '#/definitions/models.ServerScheduledEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerScheduledEvent'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates ServerScheduledEvent
      tags:
      - ServerScheduledEvent
  /server_scheduled_events:
    get:
      consumes:
      - application/json
      operationId: listServerScheduledEvents
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerScheduledEvent'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists ServerScheduledEvents
      tags:
      - ServerScheduledEvent
  /server_scheduled_events/bulk:
    post:
      consumes:
      - application/json
      operationId: getServerScheduledEventsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerScheduledEvent'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ServerScheduledEvents in bulk
      tags:
      - ServerScheduledEvent
  /spawn_2:
    put:
      consumes:
      - application/json
      operationId: createSpawn2
      parameters:
      - description: Spawn2
        in: body
        name: spawn_2
        required: true
        schema:
          $ref: '#/definitions/models.Spawn2'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawn2'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Spawn2
      tags:
      - Spawn2
  /spawn_2/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteSpawn2
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Spawn2
      tags:
      - Spawn2
    get:
      consumes:
      - application/json
      operationId: getSpawn2
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>Spawnentries<br>Spawnentries.NpcType<br>Spawnentries.NpcType.AlternateCurrency<br>Spawnentries.NpcType.Merchantlists<br>Spawnentries.NpcType.NpcFactions<br>Spawnentries.NpcType.NpcFactions.NpcFactionEntries<br>Spawnentries.NpcType.NpcSpells<br>Spawnentries.NpcType.NpcSpells.NpcSpellsEntries<br>Spawnentries.Spawngroup<br>Spawnentries.Spawngroup.Spawn2<br>Spawngroup
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawn2'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Spawn2
      tags:
      - Spawn2
    patch:
      consumes:
      - application/json
      operationId: updateSpawn2
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Spawn2
        in: body
        name: spawn_2
        required: true
        schema:
          $ref: '#/definitions/models.Spawn2'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawn2'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Spawn2
      tags:
      - Spawn2
  /spawn_2s:
    get:
      consumes:
      - application/json
      operationId: listSpawn2s
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>Spawnentries<br>Spawnentries.NpcType<br>Spawnentries.NpcType.AlternateCurrency<br>Spawnentries.NpcType.Merchantlists<br>Spawnentries.NpcType.NpcFactions<br>Spawnentries.NpcType.NpcFactions.NpcFactionEntries<br>Spawnentries.NpcType.NpcSpells<br>Spawnentries.NpcType.NpcSpells.NpcSpellsEntries<br>Spawnentries.Spawngroup<br>Spawnentries.Spawngroup.Spawn2<br>Spawngroup
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawn2'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Spawn2s
      tags:
      - Spawn2
  /spawn_2s/bulk:
    post:
      consumes:
      - application/json
      operationId: getSpawn2sBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawn2'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Spawn2s in bulk
      tags:
      - Spawn2
  /spawn_condition:
    put:
      consumes:
      - application/json
      operationId: createSpawnCondition
      parameters:
      - description: SpawnCondition
        in: body
        name: spawn_condition
        required: true
        schema:
          $ref: '#/definitions/models.SpawnCondition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnCondition'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates SpawnCondition
      tags:
      - SpawnCondition
  /spawn_condition/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteSpawnCondition
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes SpawnCondition
      tags:
      - SpawnCondition
    get:
      consumes:
      - application/json
      operationId: getSpawnCondition
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnCondition'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpawnCondition
      tags:
      - SpawnCondition
    patch:
      consumes:
      - application/json
      operationId: updateSpawnCondition
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: SpawnCondition
        in: body
        name: spawn_condition
        required: true
        schema:
          $ref: '#/definitions/models.SpawnCondition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnCondition'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates SpawnCondition
      tags:
      - SpawnCondition
  /spawn_condition_value:
    put:
      consumes:
      - application/json
      operationId: createSpawnConditionValue
      parameters:
      - description: SpawnConditionValue
        in: body
        name: spawn_condition_value
        required: true
        schema:
          $ref: '#/definitions/models.SpawnConditionValue'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnConditionValue'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates SpawnConditionValue
      tags:
      - SpawnConditionValue
  /spawn_condition_value/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteSpawnConditionValue
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes SpawnConditionValue
      tags:
      - SpawnConditionValue
    get:
      consumes:
      - application/json
      operationId: getSpawnConditionValue
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnConditionValue'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpawnConditionValue
      tags:
      - SpawnConditionValue
    patch:
      consumes:
      - application/json
      operationId: updateSpawnConditionValue
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: SpawnConditionValue
        in: body
        name: spawn_condition_value
        required: true
        schema:
          $ref: '#/definitions/models.SpawnConditionValue'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnConditionValue'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates SpawnConditionValue
      tags:
      - SpawnConditionValue
  /spawn_condition_values:
    get:
      consumes:
      - application/json
      operationId: listSpawnConditionValues
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnConditionValue'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists SpawnConditionValues
      tags:
      - SpawnConditionValue
  /spawn_condition_values/bulk:
    post:
      consumes:
      - application/json
      operationId: getSpawnConditionValuesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnConditionValue'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpawnConditionValues in bulk
      tags:
      - SpawnConditionValue
  /spawn_conditions:
    get:
      consumes:
      - application/json
      operationId: listSpawnConditions
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnCondition'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists SpawnConditions
      tags:
      - SpawnCondition
  /spawn_conditions/bulk:
    post:
      consumes:
      - application/json
      operationId: getSpawnConditionsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnCondition'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpawnConditions in bulk
      tags:
      - SpawnCondition
  /spawn_event:
    put:
      consumes:
      - application/json
      operationId: createSpawnEvent
      parameters:
      - description: SpawnEvent
        in: body
        name: spawn_event
        required: true
        schema:
          $ref: '#/definitions/models.SpawnEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnEvent'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates SpawnEvent
      tags:
      - SpawnEvent
  /spawn_event/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteSpawnEvent
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes SpawnEvent
      tags:
      - SpawnEvent
    get:
      consumes:
      - application/json
      operationId: getSpawnEvent
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnEvent'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpawnEvent
      tags:
      - SpawnEvent
    patch:
      consumes:
      - application/json
      operationId: updateSpawnEvent
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: SpawnEvent
        in: body
        name: spawn_event
        required: true
        schema:
          $ref: '#/definitions/models.SpawnEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnEvent'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates SpawnEvent
      tags:
      - SpawnEvent
  /spawn_events:
    get:
      consumes:
      - application/json
      operationId: listSpawnEvents
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnEvent'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists SpawnEvents
      tags:
      - SpawnEvent
  /spawn_events/bulk:
    post:
      consumes:
      - application/json
      operationId: getSpawnEventsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpawnEvent'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpawnEvents in bulk
      tags:
      - SpawnEvent
  /spawngroup:
    put:
      consumes:
      - application/json
      operationId: createSpawngroup
      parameters:
      - description: Spawngroup
        in: body
        name: spawngroup
        required: true
        schema:
          $ref: '#/definitions/models.Spawngroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawngroup'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Spawngroup
      tags:
      - Spawngroup
  /spawngroup/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteSpawngroup
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Spawngroup
      tags:
      - Spawngroup
    get:
      consumes:
      - application/json
      operationId: getSpawngroup
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>Spawn2
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawngroup'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Spawngroup
      tags:
      - Spawngroup
    patch:
      consumes:
      - application/json
      operationId: updateSpawngroup
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Spawngroup
        in: body
        name: spawngroup
        required: true
        schema:
          $ref: '#/definitions/models.Spawngroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawngroup'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Spawngroup
      tags:
      - Spawngroup
  /spawngroups:
    get:
      consumes:
      - application/json
      operationId: listSpawngroups
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>Spawn2
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawngroup'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Spawngroups
      tags:
      - Spawngroup
  /spawngroups/bulk:
    post:
      consumes:
      - application/json
      operationId: getSpawngroupsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spawngroup'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Spawngroups in bulk
      tags:
      - Spawngroup
  /spells_new:
    put:
      consumes:
      - application/json
      operationId: createSpellsNew
      parameters:
      - description: SpellsNew
        in: body
        name: spells_new
        required: true
        schema:
          $ref: '#/definitions/models.SpellsNew'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpellsNew'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates SpellsNew
      tags:
      - SpellsNew
  /spells_new/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteSpellsNew
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes SpellsNew
      tags:
      - SpellsNew
    get:
      consumes:
      - application/json
      operationId: getSpellsNew
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>Aura<br>BlockedSpells<br>Damageshieldtypes<br>SpellBuckets<br>SpellGlobals
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpellsNew'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpellsNew
      tags:
      - SpellsNew
    patch:
      consumes:
      - application/json
      operationId: updateSpellsNew
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: SpellsNew
        in: body
        name: spells_new
        required: true
        schema:
          $ref: '#/definitions/models.SpellsNew'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpellsNew'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates SpellsNew
      tags:
      - SpellsNew
  /spells_news:
    get:
      consumes:
      - application/json
      operationId: listSpellsNews
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>Aura<br>BlockedSpells<br>Damageshieldtypes<br>SpellBuckets<br>SpellGlobals
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpellsNew'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists SpellsNews
      tags:
      - SpellsNew
  /spells_news/bulk:
    post:
      consumes:
      - application/json
      operationId: getSpellsNewsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpellsNew'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets SpellsNews in bulk
      tags:
      - SpellsNew
  /starting_item:
    put:
      consumes:
      - application/json
      operationId: createStartingItem
      parameters:
      - description: StartingItem
        in: body
        name: starting_item
        required: true
        schema:
          $ref: '#/definitions/models.StartingItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StartingItem'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates StartingItem
      tags:
      - StartingItem
  /starting_item/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteStartingItem
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes StartingItem
      tags:
      - StartingItem
    get:
      consumes:
      - application/json
      operationId: getStartingItem
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StartingItem'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets StartingItem
      tags:
      - StartingItem
    patch:
      consumes:
      - application/json
      operationId: updateStartingItem
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: StartingItem
        in: body
        name: starting_item
        required: true
        schema:
          $ref: '#/definitions/models.StartingItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StartingItem'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates StartingItem
      tags:
      - StartingItem
  /starting_items:
    get:
      consumes:
      - application/json
      operationId: listStartingItems
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StartingItem'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists StartingItems
      tags:
      - StartingItem
  /starting_items/bulk:
    post:
      consumes:
      - application/json
      operationId: getStartingItemsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StartingItem'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets StartingItems in bulk
      tags:
      - StartingItem
  /task:
    put:
      consumes:
      - application/json
      operationId: createTask
      parameters:
      - description: Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Task
      tags:
      - Task
  /task/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteTask
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Task
      tags:
      - Task
    get:
      consumes:
      - application/json
      operationId: getTask
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>TaskActivities<br>TaskActivities.Goallists<br>TaskActivities.NpcType<br>TaskActivities.NpcType.AlternateCurrency<br>TaskActivities.NpcType.Merchantlists<br>TaskActivities.NpcType.NpcEmotes<br>TaskActivities.NpcType.NpcFactions<br>TaskActivities.NpcType.NpcFactions.NpcFactionEntries<br>TaskActivities.NpcType.NpcSpells<br>TaskActivities.NpcType.NpcSpells.NpcSpellsEntries<br>TaskActivities.NpcType.NpcTypesTint<br>TaskActivities.NpcType.Spawnentries<br>TaskActivities.NpcType.Spawnentries.Spawngroup<br>TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2<br>Tasksets
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Task
      tags:
      - Task
    patch:
      consumes:
      - application/json
      operationId: updateTask
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Task
      tags:
      - Task
  /tasks:
    get:
      consumes:
      - application/json
      operationId: listTasks
      parameters:
      - description: Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names <h4>Relationships</h4>TaskActivities<br>TaskActivities.Goallists<br>TaskActivities.NpcType<br>TaskActivities.NpcType.AlternateCurrency<br>TaskActivities.NpcType.Merchantlists<br>TaskActivities.NpcType.NpcEmotes<br>TaskActivities.NpcType.NpcFactions<br>TaskActivities.NpcType.NpcFactions.NpcFactionEntries<br>TaskActivities.NpcType.NpcSpells<br>TaskActivities.NpcType.NpcSpells.NpcSpellsEntries<br>TaskActivities.NpcType.NpcTypesTint<br>TaskActivities.NpcType.Spawnentries<br>TaskActivities.NpcType.Spawnentries.Spawngroup<br>TaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2<br>Tasksets
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Tasks
      tags:
      - Task
  /tasks/bulk:
    post:
      consumes:
      - application/json
      operationId: getTasksBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Tasks in bulk
      tags:
      - Task
  /taskset:
    put:
      consumes:
      - application/json
      operationId: createTaskset
      parameters:
      - description: Taskset
        in: body
        name: taskset
        required: true
        schema:
          $ref: '#/definitions/models.Taskset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Taskset'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Taskset
      tags:
      - Taskset
  /taskset/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteTaskset
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Taskset
      tags:
      - Taskset
    get:
      consumes:
      - application/json
      operationId: getTaskset
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Taskset'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Taskset
      tags:
      - Taskset
    patch:
      consumes:
      - application/json
      operationId: updateTaskset
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Taskset
        in: body
        name: taskset
        required: true
        schema:
          $ref: '#/definitions/models.Taskset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Taskset'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Taskset
      tags:
      - Taskset
  /tasksets:
    get:
      consumes:
      - application/json
      operationId: listTasksets
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Taskset'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Tasksets
      tags:
      - Taskset
  /tasksets/bulk:
    post:
      consumes:
      - application/json
      operationId: getTasksetsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Taskset'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Tasksets in bulk
      tags:
      - Taskset
  /title:
    put:
      consumes:
      - application/json
      operationId: createTitle
      parameters:
      - description: Title
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/models.Title'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Title'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Title
      tags:
      - Title
  /title/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteTitle
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Title
      tags:
      - Title
    get:
      consumes:
      - application/json
      operationId: getTitle
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Title'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Title
      tags:
      - Title
    patch:
      consumes:
      - application/json
      operationId: updateTitle
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Title
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/models.Title'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Title'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Title
      tags:
      - Title
  /titles:
    get:
      consumes:
      - application/json
      operationId: listTitles
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Title'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Titles
      tags:
      - Title
  /titles/bulk:
    post:
      consumes:
      - application/json
      operationId: getTitlesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Title'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Titles in bulk
      tags:
      - Title
  /tradeskill_recipe:
    put:
      consumes:
      - application/json
      operationId: createTradeskillRecipe
      parameters:
      - description: TradeskillRecipe
        in: body
        name: tradeskill_recipe
        required: true
        schema:
          $ref: '#/definitions/models.TradeskillRecipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipe'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates TradeskillRecipe
      tags:
      - TradeskillRecipe
  /tradeskill_recipe/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteTradeskillRecipe
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes TradeskillRecipe
      tags:
      - TradeskillRecipe
    get:
      consumes:
      - application/json
      operationId: getTradeskillRecipe
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipe'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets TradeskillRecipe
      tags:
      - TradeskillRecipe
    patch:
      consumes:
      - application/json
      operationId: updateTradeskillRecipe
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: TradeskillRecipe
        in: body
        name: tradeskill_recipe
        required: true
        schema:
          $ref: '#/definitions/models.TradeskillRecipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipe'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates TradeskillRecipe
      tags:
      - TradeskillRecipe
  /tradeskill_recipe_entries:
    get:
      consumes:
      - application/json
      operationId: listTradeskillRecipeEntries
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipeEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists TradeskillRecipeEntries
      tags:
      - TradeskillRecipeEntry
  /tradeskill_recipe_entries/bulk:
    post:
      consumes:
      - application/json
      operationId: getTradeskillRecipeEntriesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipeEntry'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets TradeskillRecipeEntries in bulk
      tags:
      - TradeskillRecipeEntry
  /tradeskill_recipe_entry:
    put:
      consumes:
      - application/json
      operationId: createTradeskillRecipeEntry
      parameters:
      - description: TradeskillRecipeEntry
        in: body
        name: tradeskill_recipe_entry
        required: true
        schema:
          $ref: '#/definitions/models.TradeskillRecipeEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipeEntry'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates TradeskillRecipeEntry
      tags:
      - TradeskillRecipeEntry
  /tradeskill_recipe_entry/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteTradeskillRecipeEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes TradeskillRecipeEntry
      tags:
      - TradeskillRecipeEntry
    get:
      consumes:
      - application/json
      operationId: getTradeskillRecipeEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipeEntry'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets TradeskillRecipeEntry
      tags:
      - TradeskillRecipeEntry
    patch:
      consumes:
      - application/json
      operationId: updateTradeskillRecipeEntry
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: TradeskillRecipeEntry
        in: body
        name: tradeskill_recipe_entry
        required: true
        schema:
          $ref: '#/definitions/models.TradeskillRecipeEntry'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipeEntry'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates TradeskillRecipeEntry
      tags:
      - TradeskillRecipeEntry
  /tradeskill_recipes:
    get:
      consumes:
      - application/json
      operationId: listTradeskillRecipes
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipe'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists TradeskillRecipes
      tags:
      - TradeskillRecipe
  /tradeskill_recipes/bulk:
    post:
      consumes:
      - application/json
      operationId: getTradeskillRecipesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TradeskillRecipe'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets TradeskillRecipes in bulk
      tags:
      - TradeskillRecipe
  /trap:
    put:
      consumes:
      - application/json
      operationId: createTrap
      parameters:
      - description: Trap
        in: body
        name: trap
        required: true
        schema:
          $ref: '#/definitions/models.Trap'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trap'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Trap
      tags:
      - Trap
  /trap/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteTrap
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Trap
      tags:
      - Trap
    get:
      consumes:
      - application/json
      operationId: getTrap
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trap'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Trap
      tags:
      - Trap
    patch:
      consumes:
      - application/json
      operationId: updateTrap
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Trap
        in: body
        name: trap
        required: true
        schema:
          $ref: '#/definitions/models.Trap'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trap'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Trap
      tags:
      - Trap
  /traps:
    get:
      consumes:
      - application/json
      operationId: listTraps
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trap'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Traps
      tags:
      - Trap
  /traps/bulk:
    post:
      consumes:
      - application/json
      operationId: getTrapsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trap'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Traps in bulk
      tags:
      - Trap
  /tribute:
    put:
      consumes:
      - application/json
      operationId: createTribute
      parameters:
      - description: Tribute
        in: body
        name: tribute
        required: true
        schema:
          $ref: '#/definitions/models.Tribute'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tribute'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Tribute
      tags:
      - Tribute
  /tribute/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteTribute
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Tribute
      tags:
      - Tribute
    get:
      consumes:
      - application/json
      operationId: getTribute
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tribute'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Tribute
      tags:
      - Tribute
    patch:
      consumes:
      - application/json
      operationId: updateTribute
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Tribute
        in: body
        name: tribute
        required: true
        schema:
          $ref: '#/definitions/models.Tribute'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tribute'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Tribute
      tags:
      - Tribute
  /tributes:
    get:
      consumes:
      - application/json
      operationId: listTributes
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tribute'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Tributes
      tags:
      - Tribute
  /tributes/bulk:
    post:
      consumes:
      - application/json
      operationId: getTributesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tribute'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Tributes in bulk
      tags:
      - Tribute
  /zone:
    put:
      consumes:
      - application/json
      operationId: createZone
      parameters:
      - description: Zone
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/models.Zone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Zone'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates Zone
      tags:
      - Zone
  /zone/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteZone
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes Zone
      tags:
      - Zone
    get:
      consumes:
      - application/json
      operationId: getZone
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Zone'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Zone
      tags:
      - Zone
    patch:
      consumes:
      - application/json
      operationId: updateZone
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Zone
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/models.Zone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Zone'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates Zone
      tags:
      - Zone
  /zone_point:
    put:
      consumes:
      - application/json
      operationId: createZonePoint
      parameters:
      - description: ZonePoint
        in: body
        name: zone_point
        required: true
        schema:
          $ref: '#/definitions/models.ZonePoint'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ZonePoint'
            type: array
        "500":
          description: Error inserting entity
          schema:
            type: string
      summary: Creates ZonePoint
      tags:
      - ZonePoint
  /zone_point/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteZonePoint
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Entity deleted successfully
          schema:
            type: string
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error deleting entity
          schema:
            type: string
      summary: Deletes ZonePoint
      tags:
      - ZonePoint
    get:
      consumes:
      - application/json
      operationId: getZonePoint
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ZonePoint'
            type: array
        "404":
          description: Entity not found
          schema:
            type: string
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ZonePoint
      tags:
      - ZonePoint
    patch:
      consumes:
      - application/json
      operationId: updateZonePoint
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: ZonePoint
        in: body
        name: zone_point
        required: true
        schema:
          $ref: '#/definitions/models.ZonePoint'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ZonePoint'
            type: array
        "404":
          description: Cannot find entity
          schema:
            type: string
        "500":
          description: Error updating entity
          schema:
            type: string
      summary: Updates ZonePoint
      tags:
      - ZonePoint
  /zone_points:
    get:
      consumes:
      - application/json
      operationId: listZonePoints
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ZonePoint'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists ZonePoints
      tags:
      - ZonePoint
  /zone_points/bulk:
    post:
      consumes:
      - application/json
      operationId: getZonePointsBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ZonePoint'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets ZonePoints in bulk
      tags:
      - ZonePoint
  /zones:
    get:
      consumes:
      - application/json
      operationId: listZones
      parameters:
      - description: 'Relationships [all] for all [number] for depth of relationships
          to load or [.] separated relationship names '
        in: query
        name: includes
        type: string
      - description: 'Filter on specific fields. Multiple conditions [.] separated
          Example: col_like_value.col2__val2'
        in: query
        name: where
        type: string
      - description: 'Filter on specific fields (Chained ors). Multiple conditions
          [.] separated Example: col_like_value.col2__val2'
        in: query
        name: whereOr
        type: string
      - description: 'Rows to limit in response (Default: 10,000)'
        in: query
        name: limit
        type: string
      - description: Order by [field]
        in: query
        name: orderBy
        type: string
      - description: Order by field direction
        in: query
        name: orderDirection
        type: string
      - description: Column names [.] separated to fetch specific fields in response
        in: query
        name: select
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Zone'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Lists Zones
      tags:
      - Zone
  /zones/bulk:
    post:
      consumes:
      - application/json
      operationId: getZonesBulk
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/crudcontrollers.BulkFetchByIdsGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Zone'
            type: array
        "500":
          description: Bad query request
          schema:
            type: string
      summary: Gets Zones in bulk
      tags:
      - Zone
swagger: "2.0"
