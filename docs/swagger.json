{
    "swagger": "2.0",
    "info": {
        "description": "Spire API documentation",
        "title": "Spire",
        "contact": {
            "name": "Akkadius",
            "url": "TODO",
            "email": "akkadius1@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "3.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/aa_abilities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaAbility"
                ],
                "summary": "Lists AaAbilities",
                "operationId": "listAaAbilities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaAbility"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/aa_ability": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaAbility"
                ],
                "summary": "Creates AaAbility",
                "operationId": "createAaAbility",
                "parameters": [
                    {
                        "description": "AaAbility",
                        "name": "aa_ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AaAbility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaAbility"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/aa_ability/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaAbility"
                ],
                "summary": "Gets AaAbility",
                "operationId": "getAaAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaAbility"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaAbility"
                ],
                "summary": "Deletes AaAbility",
                "operationId": "deleteAaAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaAbility"
                ],
                "summary": "Updates AaAbility",
                "operationId": "updateAaAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AaAbility",
                        "name": "aa_ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AaAbility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaAbility"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/aa_rank": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaRank"
                ],
                "summary": "Creates AaRank",
                "operationId": "createAaRank",
                "parameters": [
                    {
                        "description": "AaRank",
                        "name": "aa_rank",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AaRank"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaRank"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/aa_rank/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaRank"
                ],
                "summary": "Gets AaRank",
                "operationId": "getAaRank",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaRank"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaRank"
                ],
                "summary": "Deletes AaRank",
                "operationId": "deleteAaRank",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaRank"
                ],
                "summary": "Updates AaRank",
                "operationId": "updateAaRank",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AaRank",
                        "name": "aa_rank",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AaRank"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaRank"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/aa_ranks": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AaRank"
                ],
                "summary": "Lists AaRanks",
                "operationId": "listAaRanks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AaRank"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/account": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Creates Account",
                "operationId": "createAccount",
                "parameters": [
                    {
                        "description": "Account",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Account"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/account/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Gets Account",
                "operationId": "getAccount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAccountFlags\u003cbr\u003eAccountIps\u003cbr\u003eAccountRewards\u003cbr\u003eBugReports\u003cbr\u003eSharedbanks",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Account"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Deletes Account",
                "operationId": "deleteAccount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Updates Account",
                "operationId": "updateAccount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Account",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Account"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/accounts": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Lists Accounts",
                "operationId": "listAccounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAccountFlags\u003cbr\u003eAccountIps\u003cbr\u003eAccountRewards\u003cbr\u003eBugReports\u003cbr\u003eSharedbanks",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Account"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_detail": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureDetail"
                ],
                "summary": "Creates AdventureDetail",
                "operationId": "createAdventureDetail",
                "parameters": [
                    {
                        "description": "AdventureDetail",
                        "name": "adventure_detail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureDetail"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_detail/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureDetail"
                ],
                "summary": "Gets AdventureDetail",
                "operationId": "getAdventureDetail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureDetail"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureDetail"
                ],
                "summary": "Deletes AdventureDetail",
                "operationId": "deleteAdventureDetail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureDetail"
                ],
                "summary": "Updates AdventureDetail",
                "operationId": "updateAdventureDetail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AdventureDetail",
                        "name": "adventure_detail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureDetail"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_details": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureDetail"
                ],
                "summary": "Lists AdventureDetails",
                "operationId": "listAdventureDetails",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureDetail"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplate"
                ],
                "summary": "Creates AdventureTemplate",
                "operationId": "createAdventureTemplate",
                "parameters": [
                    {
                        "description": "AdventureTemplate",
                        "name": "adventure_template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplate"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplate"
                ],
                "summary": "Gets AdventureTemplate",
                "operationId": "getAdventureTemplate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplate"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplate"
                ],
                "summary": "Deletes AdventureTemplate",
                "operationId": "deleteAdventureTemplate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplate"
                ],
                "summary": "Updates AdventureTemplate",
                "operationId": "updateAdventureTemplate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AdventureTemplate",
                        "name": "adventure_template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplate"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template_entries": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntry"
                ],
                "summary": "Lists AdventureTemplateEntries",
                "operationId": "listAdventureTemplateEntries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template_entry": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntry"
                ],
                "summary": "Creates AdventureTemplateEntry",
                "operationId": "createAdventureTemplateEntry",
                "parameters": [
                    {
                        "description": "AdventureTemplateEntry",
                        "name": "adventure_template_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureTemplateEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template_entry/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntry"
                ],
                "summary": "Gets AdventureTemplateEntry",
                "operationId": "getAdventureTemplateEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntry"
                ],
                "summary": "Deletes AdventureTemplateEntry",
                "operationId": "deleteAdventureTemplateEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntry"
                ],
                "summary": "Updates AdventureTemplateEntry",
                "operationId": "updateAdventureTemplateEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AdventureTemplateEntry",
                        "name": "adventure_template_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureTemplateEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template_entry_flavor": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntryFlavor"
                ],
                "summary": "Creates AdventureTemplateEntryFlavor",
                "operationId": "createAdventureTemplateEntryFlavor",
                "parameters": [
                    {
                        "description": "AdventureTemplateEntryFlavor",
                        "name": "adventure_template_entry_flavor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureTemplateEntryFlavor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntryFlavor"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template_entry_flavor/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntryFlavor"
                ],
                "summary": "Gets AdventureTemplateEntryFlavor",
                "operationId": "getAdventureTemplateEntryFlavor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntryFlavor"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntryFlavor"
                ],
                "summary": "Deletes AdventureTemplateEntryFlavor",
                "operationId": "deleteAdventureTemplateEntryFlavor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntryFlavor"
                ],
                "summary": "Updates AdventureTemplateEntryFlavor",
                "operationId": "updateAdventureTemplateEntryFlavor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AdventureTemplateEntryFlavor",
                        "name": "adventure_template_entry_flavor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdventureTemplateEntryFlavor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntryFlavor"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_template_entry_flavors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplateEntryFlavor"
                ],
                "summary": "Lists AdventureTemplateEntryFlavors",
                "operationId": "listAdventureTemplateEntryFlavors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplateEntryFlavor"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/adventure_templates": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdventureTemplate"
                ],
                "summary": "Lists AdventureTemplates",
                "operationId": "listAdventureTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdventureTemplate"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/alternate_currencies": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AlternateCurrency"
                ],
                "summary": "Lists AlternateCurrencies",
                "operationId": "listAlternateCurrencies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AlternateCurrency"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/alternate_currency": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AlternateCurrency"
                ],
                "summary": "Creates AlternateCurrency",
                "operationId": "createAlternateCurrency",
                "parameters": [
                    {
                        "description": "AlternateCurrency",
                        "name": "alternate_currency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AlternateCurrency"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AlternateCurrency"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/alternate_currency/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AlternateCurrency"
                ],
                "summary": "Gets AlternateCurrency",
                "operationId": "getAlternateCurrency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AlternateCurrency"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AlternateCurrency"
                ],
                "summary": "Deletes AlternateCurrency",
                "operationId": "deleteAlternateCurrency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AlternateCurrency"
                ],
                "summary": "Updates AlternateCurrency",
                "operationId": "updateAlternateCurrency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AlternateCurrency",
                        "name": "alternate_currency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AlternateCurrency"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AlternateCurrency"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blocked_spell": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlockedSpell"
                ],
                "summary": "Creates BlockedSpell",
                "operationId": "createBlockedSpell",
                "parameters": [
                    {
                        "description": "BlockedSpell",
                        "name": "blocked_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BlockedSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BlockedSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blocked_spell/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlockedSpell"
                ],
                "summary": "Gets BlockedSpell",
                "operationId": "getBlockedSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BlockedSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlockedSpell"
                ],
                "summary": "Deletes BlockedSpell",
                "operationId": "deleteBlockedSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlockedSpell"
                ],
                "summary": "Updates BlockedSpell",
                "operationId": "updateBlockedSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "BlockedSpell",
                        "name": "blocked_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BlockedSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BlockedSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blocked_spells": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlockedSpell"
                ],
                "summary": "Lists BlockedSpells",
                "operationId": "listBlockedSpells",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BlockedSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bug": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bug"
                ],
                "summary": "Creates Bug",
                "operationId": "createBug",
                "parameters": [
                    {
                        "description": "Bug",
                        "name": "bug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Bug"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Bug"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bug/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bug"
                ],
                "summary": "Gets Bug",
                "operationId": "getBug",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Bug"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bug"
                ],
                "summary": "Deletes Bug",
                "operationId": "deleteBug",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bug"
                ],
                "summary": "Updates Bug",
                "operationId": "updateBug",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bug",
                        "name": "bug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Bug"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Bug"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bug_report": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BugReport"
                ],
                "summary": "Creates BugReport",
                "operationId": "createBugReport",
                "parameters": [
                    {
                        "description": "BugReport",
                        "name": "bug_report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BugReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BugReport"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bug_report/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BugReport"
                ],
                "summary": "Gets BugReport",
                "operationId": "getBugReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BugReport"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BugReport"
                ],
                "summary": "Deletes BugReport",
                "operationId": "deleteBugReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BugReport"
                ],
                "summary": "Updates BugReport",
                "operationId": "updateBugReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "BugReport",
                        "name": "bug_report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BugReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BugReport"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bug_reports": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BugReport"
                ],
                "summary": "Lists BugReports",
                "operationId": "listBugReports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BugReport"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bugs": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bug"
                ],
                "summary": "Lists Bugs",
                "operationId": "listBugs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Bug"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/char_create_point_allocation": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharCreatePointAllocation"
                ],
                "summary": "Creates CharCreatePointAllocation",
                "operationId": "createCharCreatePointAllocation",
                "parameters": [
                    {
                        "description": "CharCreatePointAllocation",
                        "name": "char_create_point_allocation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharCreatePointAllocation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharCreatePointAllocation"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/char_create_point_allocation/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharCreatePointAllocation"
                ],
                "summary": "Gets CharCreatePointAllocation",
                "operationId": "getCharCreatePointAllocation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharCreatePointAllocation"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharCreatePointAllocation"
                ],
                "summary": "Deletes CharCreatePointAllocation",
                "operationId": "deleteCharCreatePointAllocation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharCreatePointAllocation"
                ],
                "summary": "Updates CharCreatePointAllocation",
                "operationId": "updateCharCreatePointAllocation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharCreatePointAllocation",
                        "name": "char_create_point_allocation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharCreatePointAllocation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharCreatePointAllocation"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/char_create_point_allocations": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharCreatePointAllocation"
                ],
                "summary": "Lists CharCreatePointAllocations",
                "operationId": "listCharCreatePointAllocations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharCreatePointAllocation"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_alternate_abilities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAlternateAbility"
                ],
                "summary": "Lists CharacterAlternateAbilities",
                "operationId": "listCharacterAlternateAbilities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAlternateAbility"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_alternate_ability": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAlternateAbility"
                ],
                "summary": "Creates CharacterAlternateAbility",
                "operationId": "createCharacterAlternateAbility",
                "parameters": [
                    {
                        "description": "CharacterAlternateAbility",
                        "name": "character_alternate_ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterAlternateAbility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAlternateAbility"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_alternate_ability/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAlternateAbility"
                ],
                "summary": "Gets CharacterAlternateAbility",
                "operationId": "getCharacterAlternateAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAlternateAbility"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAlternateAbility"
                ],
                "summary": "Deletes CharacterAlternateAbility",
                "operationId": "deleteCharacterAlternateAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAlternateAbility"
                ],
                "summary": "Updates CharacterAlternateAbility",
                "operationId": "updateCharacterAlternateAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterAlternateAbility",
                        "name": "character_alternate_ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterAlternateAbility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAlternateAbility"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_aura": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAura"
                ],
                "summary": "Creates CharacterAura",
                "operationId": "createCharacterAura",
                "parameters": [
                    {
                        "description": "CharacterAura",
                        "name": "character_aura",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterAura"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAura"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_aura/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAura"
                ],
                "summary": "Gets CharacterAura",
                "operationId": "getCharacterAura",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAura"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAura"
                ],
                "summary": "Deletes CharacterAura",
                "operationId": "deleteCharacterAura",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAura"
                ],
                "summary": "Updates CharacterAura",
                "operationId": "updateCharacterAura",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterAura",
                        "name": "character_aura",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterAura"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAura"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_auras": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterAura"
                ],
                "summary": "Lists CharacterAuras",
                "operationId": "listCharacterAuras",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterAura"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_bandolier": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBandolier"
                ],
                "summary": "Creates CharacterBandolier",
                "operationId": "createCharacterBandolier",
                "parameters": [
                    {
                        "description": "CharacterBandolier",
                        "name": "character_bandolier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterBandolier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBandolier"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_bandolier/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBandolier"
                ],
                "summary": "Gets CharacterBandolier",
                "operationId": "getCharacterBandolier",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBandolier"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBandolier"
                ],
                "summary": "Deletes CharacterBandolier",
                "operationId": "deleteCharacterBandolier",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBandolier"
                ],
                "summary": "Updates CharacterBandolier",
                "operationId": "updateCharacterBandolier",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterBandolier",
                        "name": "character_bandolier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterBandolier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBandolier"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_bandoliers": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBandolier"
                ],
                "summary": "Lists CharacterBandoliers",
                "operationId": "listCharacterBandoliers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBandolier"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_bind": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBind"
                ],
                "summary": "Creates CharacterBind",
                "operationId": "createCharacterBind",
                "parameters": [
                    {
                        "description": "CharacterBind",
                        "name": "character_bind",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterBind"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBind"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_bind/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBind"
                ],
                "summary": "Gets CharacterBind",
                "operationId": "getCharacterBind",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBind"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBind"
                ],
                "summary": "Deletes CharacterBind",
                "operationId": "deleteCharacterBind",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBind"
                ],
                "summary": "Updates CharacterBind",
                "operationId": "updateCharacterBind",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterBind",
                        "name": "character_bind",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterBind"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBind"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_binds": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterBind"
                ],
                "summary": "Lists CharacterBinds",
                "operationId": "listCharacterBinds",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterBind"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_corpse": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCorpse"
                ],
                "summary": "Creates CharacterCorpse",
                "operationId": "createCharacterCorpse",
                "parameters": [
                    {
                        "description": "CharacterCorpse",
                        "name": "character_corpse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterCorpse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCorpse"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_corpse/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCorpse"
                ],
                "summary": "Gets CharacterCorpse",
                "operationId": "getCharacterCorpse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCorpse"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCorpse"
                ],
                "summary": "Deletes CharacterCorpse",
                "operationId": "deleteCharacterCorpse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCorpse"
                ],
                "summary": "Updates CharacterCorpse",
                "operationId": "updateCharacterCorpse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterCorpse",
                        "name": "character_corpse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterCorpse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCorpse"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_corpses": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCorpse"
                ],
                "summary": "Lists CharacterCorpses",
                "operationId": "listCharacterCorpses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCorpse"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_currencies": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCurrency"
                ],
                "summary": "Lists CharacterCurrencies",
                "operationId": "listCharacterCurrencies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCurrency"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_currency": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCurrency"
                ],
                "summary": "Creates CharacterCurrency",
                "operationId": "createCharacterCurrency",
                "parameters": [
                    {
                        "description": "CharacterCurrency",
                        "name": "character_currency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterCurrency"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCurrency"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_currency/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCurrency"
                ],
                "summary": "Gets CharacterCurrency",
                "operationId": "getCharacterCurrency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCurrency"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCurrency"
                ],
                "summary": "Deletes CharacterCurrency",
                "operationId": "deleteCharacterCurrency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterCurrency"
                ],
                "summary": "Updates CharacterCurrency",
                "operationId": "updateCharacterCurrency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterCurrency",
                        "name": "character_currency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterCurrency"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterCurrency"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_data": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDatum"
                ],
                "summary": "Lists CharacterData",
                "operationId": "listCharacterData",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAdventureStats\u003cbr\u003eBuyers\u003cbr\u003eCharRecipeLists\u003cbr\u003eCharacterActivities\u003cbr\u003eCharacterAltCurrencies\u003cbr\u003eCharacterAlternateAbilities\u003cbr\u003eCharacterAuras\u003cbr\u003eCharacterBandoliers\u003cbr\u003eCharacterBinds\u003cbr\u003eCharacterBuffs\u003cbr\u003eCharacterCorpses\u003cbr\u003eCharacterCurrencies\u003cbr\u003eCharacterDisciplines\u003cbr\u003eCharacterEnabledtasks\u003cbr\u003eCharacterInspectMessages\u003cbr\u003eCharacterItemRecasts\u003cbr\u003eCharacterLanguages\u003cbr\u003eCharacterLeadershipAbilities\u003cbr\u003eCharacterMaterials\u003cbr\u003eCharacterMemmedSpells\u003cbr\u003eCharacterPetBuffs\u003cbr\u003eCharacterPetInfos\u003cbr\u003eCharacterPetInventories\u003cbr\u003eCharacterPotionbelts\u003cbr\u003eCharacterSkills\u003cbr\u003eCharacterSpells\u003cbr\u003eCharacterTasks\u003cbr\u003eCharacterTributes\u003cbr\u003eCompletedTasks\u003cbr\u003eDataBuckets\u003cbr\u003eFactionValues\u003cbr\u003eFriends\u003cbr\u003eGuild\u003cbr\u003eGuild.GuildBanks\u003cbr\u003eGuild.GuildMembers\u003cbr\u003eGuild.GuildRanks\u003cbr\u003eGuildMembers\u003cbr\u003eInstanceListPlayers\u003cbr\u003eInventories\u003cbr\u003eInventories.Item\u003cbr\u003eInventories.Item.DiscoveredItems\u003cbr\u003eKeyrings\u003cbr\u003eMail\u003cbr\u003ePlayerTitlesets\u003cbr\u003eQuestGlobals\u003cbr\u003eTimers\u003cbr\u003eTitles\u003cbr\u003eTraders\u003cbr\u003eZoneFlags",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDatum"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_datum": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDatum"
                ],
                "summary": "Creates CharacterDatum",
                "operationId": "createCharacterDatum",
                "parameters": [
                    {
                        "description": "CharacterDatum",
                        "name": "character_datum",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterDatum"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDatum"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_datum/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDatum"
                ],
                "summary": "Gets CharacterDatum",
                "operationId": "getCharacterDatum",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAdventureStats\u003cbr\u003eBuyers\u003cbr\u003eCharRecipeLists\u003cbr\u003eCharacterActivities\u003cbr\u003eCharacterAltCurrencies\u003cbr\u003eCharacterAlternateAbilities\u003cbr\u003eCharacterAuras\u003cbr\u003eCharacterBandoliers\u003cbr\u003eCharacterBinds\u003cbr\u003eCharacterBuffs\u003cbr\u003eCharacterCorpses\u003cbr\u003eCharacterCurrencies\u003cbr\u003eCharacterDisciplines\u003cbr\u003eCharacterEnabledtasks\u003cbr\u003eCharacterInspectMessages\u003cbr\u003eCharacterItemRecasts\u003cbr\u003eCharacterLanguages\u003cbr\u003eCharacterLeadershipAbilities\u003cbr\u003eCharacterMaterials\u003cbr\u003eCharacterMemmedSpells\u003cbr\u003eCharacterPetBuffs\u003cbr\u003eCharacterPetInfos\u003cbr\u003eCharacterPetInventories\u003cbr\u003eCharacterPotionbelts\u003cbr\u003eCharacterSkills\u003cbr\u003eCharacterSpells\u003cbr\u003eCharacterTasks\u003cbr\u003eCharacterTributes\u003cbr\u003eCompletedTasks\u003cbr\u003eDataBuckets\u003cbr\u003eFactionValues\u003cbr\u003eFriends\u003cbr\u003eGuild\u003cbr\u003eGuild.GuildBanks\u003cbr\u003eGuild.GuildMembers\u003cbr\u003eGuild.GuildRanks\u003cbr\u003eGuildMembers\u003cbr\u003eInstanceListPlayers\u003cbr\u003eInventories\u003cbr\u003eInventories.Item\u003cbr\u003eInventories.Item.DiscoveredItems\u003cbr\u003eKeyrings\u003cbr\u003eMail\u003cbr\u003ePlayerTitlesets\u003cbr\u003eQuestGlobals\u003cbr\u003eTimers\u003cbr\u003eTitles\u003cbr\u003eTraders\u003cbr\u003eZoneFlags",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDatum"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDatum"
                ],
                "summary": "Deletes CharacterDatum",
                "operationId": "deleteCharacterDatum",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDatum"
                ],
                "summary": "Updates CharacterDatum",
                "operationId": "updateCharacterDatum",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterDatum",
                        "name": "character_datum",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterDatum"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDatum"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_discipline": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDiscipline"
                ],
                "summary": "Creates CharacterDiscipline",
                "operationId": "createCharacterDiscipline",
                "parameters": [
                    {
                        "description": "CharacterDiscipline",
                        "name": "character_discipline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterDiscipline"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDiscipline"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_discipline/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDiscipline"
                ],
                "summary": "Gets CharacterDiscipline",
                "operationId": "getCharacterDiscipline",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDiscipline"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDiscipline"
                ],
                "summary": "Deletes CharacterDiscipline",
                "operationId": "deleteCharacterDiscipline",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDiscipline"
                ],
                "summary": "Updates CharacterDiscipline",
                "operationId": "updateCharacterDiscipline",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterDiscipline",
                        "name": "character_discipline",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterDiscipline"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDiscipline"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_disciplines": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterDiscipline"
                ],
                "summary": "Lists CharacterDisciplines",
                "operationId": "listCharacterDisciplines",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterDiscipline"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_expedition_lockout": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterExpeditionLockout"
                ],
                "summary": "Creates CharacterExpeditionLockout",
                "operationId": "createCharacterExpeditionLockout",
                "parameters": [
                    {
                        "description": "CharacterExpeditionLockout",
                        "name": "character_expedition_lockout",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterExpeditionLockout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterExpeditionLockout"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_expedition_lockout/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterExpeditionLockout"
                ],
                "summary": "Gets CharacterExpeditionLockout",
                "operationId": "getCharacterExpeditionLockout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterExpeditionLockout"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterExpeditionLockout"
                ],
                "summary": "Deletes CharacterExpeditionLockout",
                "operationId": "deleteCharacterExpeditionLockout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterExpeditionLockout"
                ],
                "summary": "Updates CharacterExpeditionLockout",
                "operationId": "updateCharacterExpeditionLockout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterExpeditionLockout",
                        "name": "character_expedition_lockout",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterExpeditionLockout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterExpeditionLockout"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_expedition_lockouts": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterExpeditionLockout"
                ],
                "summary": "Lists CharacterExpeditionLockouts",
                "operationId": "listCharacterExpeditionLockouts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterExpeditionLockout"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_inspect_message": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterInspectMessage"
                ],
                "summary": "Creates CharacterInspectMessage",
                "operationId": "createCharacterInspectMessage",
                "parameters": [
                    {
                        "description": "CharacterInspectMessage",
                        "name": "character_inspect_message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterInspectMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterInspectMessage"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_inspect_message/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterInspectMessage"
                ],
                "summary": "Gets CharacterInspectMessage",
                "operationId": "getCharacterInspectMessage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterInspectMessage"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterInspectMessage"
                ],
                "summary": "Deletes CharacterInspectMessage",
                "operationId": "deleteCharacterInspectMessage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterInspectMessage"
                ],
                "summary": "Updates CharacterInspectMessage",
                "operationId": "updateCharacterInspectMessage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterInspectMessage",
                        "name": "character_inspect_message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterInspectMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterInspectMessage"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_inspect_messages": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterInspectMessage"
                ],
                "summary": "Lists CharacterInspectMessages",
                "operationId": "listCharacterInspectMessages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterInspectMessage"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_item_recast": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterItemRecast"
                ],
                "summary": "Creates CharacterItemRecast",
                "operationId": "createCharacterItemRecast",
                "parameters": [
                    {
                        "description": "CharacterItemRecast",
                        "name": "character_item_recast",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterItemRecast"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterItemRecast"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_item_recast/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterItemRecast"
                ],
                "summary": "Gets CharacterItemRecast",
                "operationId": "getCharacterItemRecast",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterItemRecast"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterItemRecast"
                ],
                "summary": "Deletes CharacterItemRecast",
                "operationId": "deleteCharacterItemRecast",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterItemRecast"
                ],
                "summary": "Updates CharacterItemRecast",
                "operationId": "updateCharacterItemRecast",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterItemRecast",
                        "name": "character_item_recast",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterItemRecast"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterItemRecast"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_item_recasts": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterItemRecast"
                ],
                "summary": "Lists CharacterItemRecasts",
                "operationId": "listCharacterItemRecasts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterItemRecast"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_language": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLanguage"
                ],
                "summary": "Creates CharacterLanguage",
                "operationId": "createCharacterLanguage",
                "parameters": [
                    {
                        "description": "CharacterLanguage",
                        "name": "character_language",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterLanguage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLanguage"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_language/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLanguage"
                ],
                "summary": "Gets CharacterLanguage",
                "operationId": "getCharacterLanguage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLanguage"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLanguage"
                ],
                "summary": "Deletes CharacterLanguage",
                "operationId": "deleteCharacterLanguage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLanguage"
                ],
                "summary": "Updates CharacterLanguage",
                "operationId": "updateCharacterLanguage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterLanguage",
                        "name": "character_language",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterLanguage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLanguage"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_languages": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLanguage"
                ],
                "summary": "Lists CharacterLanguages",
                "operationId": "listCharacterLanguages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLanguage"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_leadership_abilities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLeadershipAbility"
                ],
                "summary": "Lists CharacterLeadershipAbilities",
                "operationId": "listCharacterLeadershipAbilities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLeadershipAbility"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_leadership_ability": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLeadershipAbility"
                ],
                "summary": "Creates CharacterLeadershipAbility",
                "operationId": "createCharacterLeadershipAbility",
                "parameters": [
                    {
                        "description": "CharacterLeadershipAbility",
                        "name": "character_leadership_ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterLeadershipAbility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLeadershipAbility"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_leadership_ability/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLeadershipAbility"
                ],
                "summary": "Gets CharacterLeadershipAbility",
                "operationId": "getCharacterLeadershipAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLeadershipAbility"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLeadershipAbility"
                ],
                "summary": "Deletes CharacterLeadershipAbility",
                "operationId": "deleteCharacterLeadershipAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterLeadershipAbility"
                ],
                "summary": "Updates CharacterLeadershipAbility",
                "operationId": "updateCharacterLeadershipAbility",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterLeadershipAbility",
                        "name": "character_leadership_ability",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterLeadershipAbility"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterLeadershipAbility"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_material": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMaterial"
                ],
                "summary": "Creates CharacterMaterial",
                "operationId": "createCharacterMaterial",
                "parameters": [
                    {
                        "description": "CharacterMaterial",
                        "name": "character_material",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterMaterial"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMaterial"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_material/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMaterial"
                ],
                "summary": "Gets CharacterMaterial",
                "operationId": "getCharacterMaterial",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMaterial"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMaterial"
                ],
                "summary": "Deletes CharacterMaterial",
                "operationId": "deleteCharacterMaterial",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMaterial"
                ],
                "summary": "Updates CharacterMaterial",
                "operationId": "updateCharacterMaterial",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterMaterial",
                        "name": "character_material",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterMaterial"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMaterial"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_materials": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMaterial"
                ],
                "summary": "Lists CharacterMaterials",
                "operationId": "listCharacterMaterials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMaterial"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_memmed_spell": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMemmedSpell"
                ],
                "summary": "Creates CharacterMemmedSpell",
                "operationId": "createCharacterMemmedSpell",
                "parameters": [
                    {
                        "description": "CharacterMemmedSpell",
                        "name": "character_memmed_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterMemmedSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMemmedSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_memmed_spell/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMemmedSpell"
                ],
                "summary": "Gets CharacterMemmedSpell",
                "operationId": "getCharacterMemmedSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMemmedSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMemmedSpell"
                ],
                "summary": "Deletes CharacterMemmedSpell",
                "operationId": "deleteCharacterMemmedSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMemmedSpell"
                ],
                "summary": "Updates CharacterMemmedSpell",
                "operationId": "updateCharacterMemmedSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterMemmedSpell",
                        "name": "character_memmed_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterMemmedSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMemmedSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_memmed_spells": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterMemmedSpell"
                ],
                "summary": "Lists CharacterMemmedSpells",
                "operationId": "listCharacterMemmedSpells",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterMemmedSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_potionbelt": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterPotionbelt"
                ],
                "summary": "Creates CharacterPotionbelt",
                "operationId": "createCharacterPotionbelt",
                "parameters": [
                    {
                        "description": "CharacterPotionbelt",
                        "name": "character_potionbelt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterPotionbelt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterPotionbelt"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_potionbelt/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterPotionbelt"
                ],
                "summary": "Gets CharacterPotionbelt",
                "operationId": "getCharacterPotionbelt",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterPotionbelt"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterPotionbelt"
                ],
                "summary": "Deletes CharacterPotionbelt",
                "operationId": "deleteCharacterPotionbelt",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterPotionbelt"
                ],
                "summary": "Updates CharacterPotionbelt",
                "operationId": "updateCharacterPotionbelt",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterPotionbelt",
                        "name": "character_potionbelt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterPotionbelt"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterPotionbelt"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_potionbelts": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterPotionbelt"
                ],
                "summary": "Lists CharacterPotionbelts",
                "operationId": "listCharacterPotionbelts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterPotionbelt"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_skill": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSkill"
                ],
                "summary": "Creates CharacterSkill",
                "operationId": "createCharacterSkill",
                "parameters": [
                    {
                        "description": "CharacterSkill",
                        "name": "character_skill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterSkill"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSkill"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_skill/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSkill"
                ],
                "summary": "Gets CharacterSkill",
                "operationId": "getCharacterSkill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSkill"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSkill"
                ],
                "summary": "Deletes CharacterSkill",
                "operationId": "deleteCharacterSkill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSkill"
                ],
                "summary": "Updates CharacterSkill",
                "operationId": "updateCharacterSkill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterSkill",
                        "name": "character_skill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterSkill"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSkill"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_skills": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSkill"
                ],
                "summary": "Lists CharacterSkills",
                "operationId": "listCharacterSkills",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSkill"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_spell": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSpell"
                ],
                "summary": "Creates CharacterSpell",
                "operationId": "createCharacterSpell",
                "parameters": [
                    {
                        "description": "CharacterSpell",
                        "name": "character_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_spell/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSpell"
                ],
                "summary": "Gets CharacterSpell",
                "operationId": "getCharacterSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSpell"
                ],
                "summary": "Deletes CharacterSpell",
                "operationId": "deleteCharacterSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSpell"
                ],
                "summary": "Updates CharacterSpell",
                "operationId": "updateCharacterSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CharacterSpell",
                        "name": "character_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CharacterSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/character_spells": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CharacterSpell"
                ],
                "summary": "Lists CharacterSpells",
                "operationId": "listCharacterSpells",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CharacterSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/content_flag": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ContentFlag"
                ],
                "summary": "Creates ContentFlag",
                "operationId": "createContentFlag",
                "parameters": [
                    {
                        "description": "ContentFlag",
                        "name": "content_flag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContentFlag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ContentFlag"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/content_flag/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ContentFlag"
                ],
                "summary": "Gets ContentFlag",
                "operationId": "getContentFlag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ContentFlag"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ContentFlag"
                ],
                "summary": "Deletes ContentFlag",
                "operationId": "deleteContentFlag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ContentFlag"
                ],
                "summary": "Updates ContentFlag",
                "operationId": "updateContentFlag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ContentFlag",
                        "name": "content_flag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContentFlag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ContentFlag"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/content_flags": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ContentFlag"
                ],
                "summary": "Lists ContentFlags",
                "operationId": "listContentFlags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ContentFlag"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data_bucket": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataBucket"
                ],
                "summary": "Creates DataBucket",
                "operationId": "createDataBucket",
                "parameters": [
                    {
                        "description": "DataBucket",
                        "name": "data_bucket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DataBucket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataBucket"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data_bucket/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataBucket"
                ],
                "summary": "Gets DataBucket",
                "operationId": "getDataBucket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataBucket"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataBucket"
                ],
                "summary": "Deletes DataBucket",
                "operationId": "deleteDataBucket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataBucket"
                ],
                "summary": "Updates DataBucket",
                "operationId": "updateDataBucket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "DataBucket",
                        "name": "data_bucket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DataBucket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataBucket"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data_buckets": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataBucket"
                ],
                "summary": "Lists DataBuckets",
                "operationId": "listDataBuckets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataBucket"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/db_str": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DbStr"
                ],
                "summary": "Creates DbStr",
                "operationId": "createDbStr",
                "parameters": [
                    {
                        "description": "DbStr",
                        "name": "db_str",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DbStr"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DbStr"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/db_str/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DbStr"
                ],
                "summary": "Gets DbStr",
                "operationId": "getDbStr",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DbStr"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DbStr"
                ],
                "summary": "Deletes DbStr",
                "operationId": "deleteDbStr",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DbStr"
                ],
                "summary": "Updates DbStr",
                "operationId": "updateDbStr",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "DbStr",
                        "name": "db_str",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DbStr"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DbStr"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/db_strs": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DbStr"
                ],
                "summary": "Lists DbStrs",
                "operationId": "listDbStrs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DbStr"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/door": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Door"
                ],
                "summary": "Creates Door",
                "operationId": "createDoor",
                "parameters": [
                    {
                        "description": "Door",
                        "name": "door",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Door"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Door"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/door/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Door"
                ],
                "summary": "Gets Door",
                "operationId": "getDoor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Door"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Door"
                ],
                "summary": "Deletes Door",
                "operationId": "deleteDoor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Door"
                ],
                "summary": "Updates Door",
                "operationId": "updateDoor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Door",
                        "name": "door",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Door"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Door"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/doors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Door"
                ],
                "summary": "Lists Doors",
                "operationId": "listDoors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Door"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dynamic_zone": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DynamicZone"
                ],
                "summary": "Creates DynamicZone",
                "operationId": "createDynamicZone",
                "parameters": [
                    {
                        "description": "DynamicZone",
                        "name": "dynamic_zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DynamicZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DynamicZone"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dynamic_zone/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DynamicZone"
                ],
                "summary": "Gets DynamicZone",
                "operationId": "getDynamicZone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DynamicZone"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DynamicZone"
                ],
                "summary": "Deletes DynamicZone",
                "operationId": "deleteDynamicZone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DynamicZone"
                ],
                "summary": "Updates DynamicZone",
                "operationId": "updateDynamicZone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "DynamicZone",
                        "name": "dynamic_zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DynamicZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DynamicZone"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dynamic_zones": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DynamicZone"
                ],
                "summary": "Lists DynamicZones",
                "operationId": "listDynamicZones",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DynamicZone"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eventlog": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Eventlog"
                ],
                "summary": "Creates Eventlog",
                "operationId": "createEventlog",
                "parameters": [
                    {
                        "description": "Eventlog",
                        "name": "eventlog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Eventlog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Eventlog"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eventlog/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Eventlog"
                ],
                "summary": "Gets Eventlog",
                "operationId": "getEventlog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Eventlog"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Eventlog"
                ],
                "summary": "Deletes Eventlog",
                "operationId": "deleteEventlog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Eventlog"
                ],
                "summary": "Updates Eventlog",
                "operationId": "updateEventlog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Eventlog",
                        "name": "eventlog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Eventlog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Eventlog"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/eventlogs": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Eventlog"
                ],
                "summary": "Lists Eventlogs",
                "operationId": "listEventlogs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Eventlog"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Expedition"
                ],
                "summary": "Creates Expedition",
                "operationId": "createExpedition",
                "parameters": [
                    {
                        "description": "Expedition",
                        "name": "expedition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Expedition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Expedition"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Expedition"
                ],
                "summary": "Gets Expedition",
                "operationId": "getExpedition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Expedition"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Expedition"
                ],
                "summary": "Deletes Expedition",
                "operationId": "deleteExpedition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Expedition"
                ],
                "summary": "Updates Expedition",
                "operationId": "updateExpedition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Expedition",
                        "name": "expedition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Expedition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Expedition"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition_lockout": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionLockout"
                ],
                "summary": "Creates ExpeditionLockout",
                "operationId": "createExpeditionLockout",
                "parameters": [
                    {
                        "description": "ExpeditionLockout",
                        "name": "expedition_lockout",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ExpeditionLockout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionLockout"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition_lockout/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionLockout"
                ],
                "summary": "Gets ExpeditionLockout",
                "operationId": "getExpeditionLockout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionLockout"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionLockout"
                ],
                "summary": "Deletes ExpeditionLockout",
                "operationId": "deleteExpeditionLockout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionLockout"
                ],
                "summary": "Updates ExpeditionLockout",
                "operationId": "updateExpeditionLockout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ExpeditionLockout",
                        "name": "expedition_lockout",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ExpeditionLockout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionLockout"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition_lockouts": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionLockout"
                ],
                "summary": "Lists ExpeditionLockouts",
                "operationId": "listExpeditionLockouts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionLockout"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition_member": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionMember"
                ],
                "summary": "Creates ExpeditionMember",
                "operationId": "createExpeditionMember",
                "parameters": [
                    {
                        "description": "ExpeditionMember",
                        "name": "expedition_member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ExpeditionMember"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionMember"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition_member/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionMember"
                ],
                "summary": "Gets ExpeditionMember",
                "operationId": "getExpeditionMember",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionMember"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionMember"
                ],
                "summary": "Deletes ExpeditionMember",
                "operationId": "deleteExpeditionMember",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionMember"
                ],
                "summary": "Updates ExpeditionMember",
                "operationId": "updateExpeditionMember",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ExpeditionMember",
                        "name": "expedition_member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ExpeditionMember"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionMember"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expedition_members": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExpeditionMember"
                ],
                "summary": "Lists ExpeditionMembers",
                "operationId": "listExpeditionMembers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExpeditionMember"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/expeditions": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Expedition"
                ],
                "summary": "Lists Expeditions",
                "operationId": "listExpeditions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Expedition"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/faction_list": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionList"
                ],
                "summary": "Creates FactionList",
                "operationId": "createFactionList",
                "parameters": [
                    {
                        "description": "FactionList",
                        "name": "faction_list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FactionList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionList"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/faction_list/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionList"
                ],
                "summary": "Gets FactionList",
                "operationId": "getFactionList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionList"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionList"
                ],
                "summary": "Deletes FactionList",
                "operationId": "deleteFactionList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionList"
                ],
                "summary": "Updates FactionList",
                "operationId": "updateFactionList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "FactionList",
                        "name": "faction_list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FactionList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionList"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/faction_list_mod": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionListMod"
                ],
                "summary": "Creates FactionListMod",
                "operationId": "createFactionListMod",
                "parameters": [
                    {
                        "description": "FactionListMod",
                        "name": "faction_list_mod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FactionListMod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionListMod"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/faction_list_mod/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionListMod"
                ],
                "summary": "Gets FactionListMod",
                "operationId": "getFactionListMod",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionListMod"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionListMod"
                ],
                "summary": "Deletes FactionListMod",
                "operationId": "deleteFactionListMod",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionListMod"
                ],
                "summary": "Updates FactionListMod",
                "operationId": "updateFactionListMod",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "FactionListMod",
                        "name": "faction_list_mod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FactionListMod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionListMod"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/faction_list_mods": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionListMod"
                ],
                "summary": "Lists FactionListMods",
                "operationId": "listFactionListMods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionListMod"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/faction_lists": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FactionList"
                ],
                "summary": "Lists FactionLists",
                "operationId": "listFactionLists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FactionList"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fishing": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fishing"
                ],
                "summary": "Creates Fishing",
                "operationId": "createFishing",
                "parameters": [
                    {
                        "description": "Fishing",
                        "name": "fishing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Fishing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Fishing"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fishing/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fishing"
                ],
                "summary": "Gets Fishing",
                "operationId": "getFishing",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Fishing"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fishing"
                ],
                "summary": "Deletes Fishing",
                "operationId": "deleteFishing",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fishing"
                ],
                "summary": "Updates Fishing",
                "operationId": "updateFishing",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fishing",
                        "name": "fishing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Fishing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Fishing"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fishings": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fishing"
                ],
                "summary": "Lists Fishings",
                "operationId": "listFishings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Fishing"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forage": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forage"
                ],
                "summary": "Creates Forage",
                "operationId": "createForage",
                "parameters": [
                    {
                        "description": "Forage",
                        "name": "forage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Forage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Forage"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forage/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forage"
                ],
                "summary": "Gets Forage",
                "operationId": "getForage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Forage"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forage"
                ],
                "summary": "Deletes Forage",
                "operationId": "deleteForage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forage"
                ],
                "summary": "Updates Forage",
                "operationId": "updateForage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Forage",
                        "name": "forage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Forage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Forage"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forages": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forage"
                ],
                "summary": "Lists Forages",
                "operationId": "listForages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Forage"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/global_loot": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GlobalLoot"
                ],
                "summary": "Creates GlobalLoot",
                "operationId": "createGlobalLoot",
                "parameters": [
                    {
                        "description": "GlobalLoot",
                        "name": "global_loot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GlobalLoot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GlobalLoot"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/global_loot/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GlobalLoot"
                ],
                "summary": "Gets GlobalLoot",
                "operationId": "getGlobalLoot",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GlobalLoot"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GlobalLoot"
                ],
                "summary": "Deletes GlobalLoot",
                "operationId": "deleteGlobalLoot",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GlobalLoot"
                ],
                "summary": "Updates GlobalLoot",
                "operationId": "updateGlobalLoot",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "GlobalLoot",
                        "name": "global_loot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GlobalLoot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GlobalLoot"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/global_loots": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GlobalLoot"
                ],
                "summary": "Lists GlobalLoots",
                "operationId": "listGlobalLoots",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GlobalLoot"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/graveyard": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graveyard"
                ],
                "summary": "Creates Graveyard",
                "operationId": "createGraveyard",
                "parameters": [
                    {
                        "description": "Graveyard",
                        "name": "graveyard",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Graveyard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Graveyard"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/graveyard/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graveyard"
                ],
                "summary": "Gets Graveyard",
                "operationId": "getGraveyard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Graveyard"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graveyard"
                ],
                "summary": "Deletes Graveyard",
                "operationId": "deleteGraveyard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graveyard"
                ],
                "summary": "Updates Graveyard",
                "operationId": "updateGraveyard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Graveyard",
                        "name": "graveyard",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Graveyard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Graveyard"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/graveyards": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graveyard"
                ],
                "summary": "Lists Graveyards",
                "operationId": "listGraveyards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Graveyard"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/grid": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grid"
                ],
                "summary": "Creates Grid",
                "operationId": "createGrid",
                "parameters": [
                    {
                        "description": "Grid",
                        "name": "grid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Grid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Grid"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/grid/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grid"
                ],
                "summary": "Gets Grid",
                "operationId": "getGrid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eGridEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Grid"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grid"
                ],
                "summary": "Deletes Grid",
                "operationId": "deleteGrid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grid"
                ],
                "summary": "Updates Grid",
                "operationId": "updateGrid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Grid",
                        "name": "grid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Grid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Grid"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/grids": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grid"
                ],
                "summary": "Lists Grids",
                "operationId": "listGrids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eGridEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Grid"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ground_spawn": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroundSpawn"
                ],
                "summary": "Creates GroundSpawn",
                "operationId": "createGroundSpawn",
                "parameters": [
                    {
                        "description": "GroundSpawn",
                        "name": "ground_spawn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GroundSpawn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GroundSpawn"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ground_spawn/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroundSpawn"
                ],
                "summary": "Gets GroundSpawn",
                "operationId": "getGroundSpawn",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GroundSpawn"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroundSpawn"
                ],
                "summary": "Deletes GroundSpawn",
                "operationId": "deleteGroundSpawn",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroundSpawn"
                ],
                "summary": "Updates GroundSpawn",
                "operationId": "updateGroundSpawn",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "GroundSpawn",
                        "name": "ground_spawn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GroundSpawn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GroundSpawn"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ground_spawns": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroundSpawn"
                ],
                "summary": "Lists GroundSpawns",
                "operationId": "listGroundSpawns",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GroundSpawn"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/guild": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild"
                ],
                "summary": "Creates Guild",
                "operationId": "createGuild",
                "parameters": [
                    {
                        "description": "Guild",
                        "name": "guild",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Guild"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Guild"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/guild/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild"
                ],
                "summary": "Gets Guild",
                "operationId": "getGuild",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eGuildBanks\u003cbr\u003eGuildMembers\u003cbr\u003eGuildRanks",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Guild"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild"
                ],
                "summary": "Deletes Guild",
                "operationId": "deleteGuild",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild"
                ],
                "summary": "Updates Guild",
                "operationId": "updateGuild",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Guild",
                        "name": "guild",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Guild"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Guild"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/guilds": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild"
                ],
                "summary": "Lists Guilds",
                "operationId": "listGuilds",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eGuildBanks\u003cbr\u003eGuildMembers\u003cbr\u003eGuildRanks",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Guild"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/hacker": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hacker"
                ],
                "summary": "Creates Hacker",
                "operationId": "createHacker",
                "parameters": [
                    {
                        "description": "Hacker",
                        "name": "hacker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Hacker"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Hacker"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/hacker/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hacker"
                ],
                "summary": "Gets Hacker",
                "operationId": "getHacker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Hacker"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hacker"
                ],
                "summary": "Deletes Hacker",
                "operationId": "deleteHacker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hacker"
                ],
                "summary": "Updates Hacker",
                "operationId": "updateHacker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Hacker",
                        "name": "hacker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Hacker"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Hacker"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/hackers": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hacker"
                ],
                "summary": "Lists Hackers",
                "operationId": "listHackers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Hacker"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/instance_list": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceList"
                ],
                "summary": "Creates InstanceList",
                "operationId": "createInstanceList",
                "parameters": [
                    {
                        "description": "InstanceList",
                        "name": "instance_list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InstanceList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceList"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/instance_list/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceList"
                ],
                "summary": "Gets InstanceList",
                "operationId": "getInstanceList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eInstanceListPlayers\u003cbr\u003eZones",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceList"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceList"
                ],
                "summary": "Deletes InstanceList",
                "operationId": "deleteInstanceList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceList"
                ],
                "summary": "Updates InstanceList",
                "operationId": "updateInstanceList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "InstanceList",
                        "name": "instance_list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InstanceList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceList"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/instance_list_player": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceListPlayer"
                ],
                "summary": "Creates InstanceListPlayer",
                "operationId": "createInstanceListPlayer",
                "parameters": [
                    {
                        "description": "InstanceListPlayer",
                        "name": "instance_list_player",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InstanceListPlayer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceListPlayer"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/instance_list_player/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceListPlayer"
                ],
                "summary": "Gets InstanceListPlayer",
                "operationId": "getInstanceListPlayer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceListPlayer"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceListPlayer"
                ],
                "summary": "Deletes InstanceListPlayer",
                "operationId": "deleteInstanceListPlayer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceListPlayer"
                ],
                "summary": "Updates InstanceListPlayer",
                "operationId": "updateInstanceListPlayer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "InstanceListPlayer",
                        "name": "instance_list_player",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InstanceListPlayer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceListPlayer"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/instance_list_players": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceListPlayer"
                ],
                "summary": "Lists InstanceListPlayers",
                "operationId": "listInstanceListPlayers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceListPlayer"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/instance_lists": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InstanceList"
                ],
                "summary": "Lists InstanceLists",
                "operationId": "listInstanceLists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eInstanceListPlayers\u003cbr\u003eZones",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InstanceList"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/item": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Creates Item",
                "operationId": "createItem",
                "parameters": [
                    {
                        "description": "Item",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Item"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/item/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Gets Item",
                "operationId": "getItem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eDiscoveredItems",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Item"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Deletes Item",
                "operationId": "deleteItem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Updates Item",
                "operationId": "updateItem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Item"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/items": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Lists Items",
                "operationId": "listItems",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eDiscoveredItems",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Item"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ldon_trap_entries": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapEntry"
                ],
                "summary": "Lists LdonTrapEntries",
                "operationId": "listLdonTrapEntries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ldon_trap_entry": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapEntry"
                ],
                "summary": "Creates LdonTrapEntry",
                "operationId": "createLdonTrapEntry",
                "parameters": [
                    {
                        "description": "LdonTrapEntry",
                        "name": "ldon_trap_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LdonTrapEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ldon_trap_entry/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapEntry"
                ],
                "summary": "Gets LdonTrapEntry",
                "operationId": "getLdonTrapEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapEntry"
                ],
                "summary": "Deletes LdonTrapEntry",
                "operationId": "deleteLdonTrapEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapEntry"
                ],
                "summary": "Updates LdonTrapEntry",
                "operationId": "updateLdonTrapEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LdonTrapEntry",
                        "name": "ldon_trap_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LdonTrapEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ldon_trap_template": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapTemplate"
                ],
                "summary": "Creates LdonTrapTemplate",
                "operationId": "createLdonTrapTemplate",
                "parameters": [
                    {
                        "description": "LdonTrapTemplate",
                        "name": "ldon_trap_template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LdonTrapTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapTemplate"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ldon_trap_template/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapTemplate"
                ],
                "summary": "Gets LdonTrapTemplate",
                "operationId": "getLdonTrapTemplate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapTemplate"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapTemplate"
                ],
                "summary": "Deletes LdonTrapTemplate",
                "operationId": "deleteLdonTrapTemplate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapTemplate"
                ],
                "summary": "Updates LdonTrapTemplate",
                "operationId": "updateLdonTrapTemplate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LdonTrapTemplate",
                        "name": "ldon_trap_template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LdonTrapTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapTemplate"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ldon_trap_templates": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LdonTrapTemplate"
                ],
                "summary": "Lists LdonTrapTemplates",
                "operationId": "listLdonTrapTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LdonTrapTemplate"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_account": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginAccount"
                ],
                "summary": "Creates LoginAccount",
                "operationId": "createLoginAccount",
                "parameters": [
                    {
                        "description": "LoginAccount",
                        "name": "login_account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginAccount"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_account/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginAccount"
                ],
                "summary": "Gets LoginAccount",
                "operationId": "getLoginAccount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginAccount"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginAccount"
                ],
                "summary": "Deletes LoginAccount",
                "operationId": "deleteLoginAccount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginAccount"
                ],
                "summary": "Updates LoginAccount",
                "operationId": "updateLoginAccount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LoginAccount",
                        "name": "login_account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginAccount"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_accounts": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginAccount"
                ],
                "summary": "Lists LoginAccounts",
                "operationId": "listLoginAccounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginAccount"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_api_token": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginApiToken"
                ],
                "summary": "Creates LoginApiToken",
                "operationId": "createLoginApiToken",
                "parameters": [
                    {
                        "description": "LoginApiToken",
                        "name": "login_api_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginApiToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginApiToken"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_api_token/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginApiToken"
                ],
                "summary": "Gets LoginApiToken",
                "operationId": "getLoginApiToken",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginApiToken"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginApiToken"
                ],
                "summary": "Deletes LoginApiToken",
                "operationId": "deleteLoginApiToken",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginApiToken"
                ],
                "summary": "Updates LoginApiToken",
                "operationId": "updateLoginApiToken",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LoginApiToken",
                        "name": "login_api_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginApiToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginApiToken"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_api_tokens": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginApiToken"
                ],
                "summary": "Lists LoginApiTokens",
                "operationId": "listLoginApiTokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginApiToken"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_server_admin": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerAdmin"
                ],
                "summary": "Creates LoginServerAdmin",
                "operationId": "createLoginServerAdmin",
                "parameters": [
                    {
                        "description": "LoginServerAdmin",
                        "name": "login_server_admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginServerAdmin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerAdmin"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_server_admin/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerAdmin"
                ],
                "summary": "Gets LoginServerAdmin",
                "operationId": "getLoginServerAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerAdmin"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerAdmin"
                ],
                "summary": "Deletes LoginServerAdmin",
                "operationId": "deleteLoginServerAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerAdmin"
                ],
                "summary": "Updates LoginServerAdmin",
                "operationId": "updateLoginServerAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LoginServerAdmin",
                        "name": "login_server_admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginServerAdmin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerAdmin"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_server_admins": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerAdmin"
                ],
                "summary": "Lists LoginServerAdmins",
                "operationId": "listLoginServerAdmins",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerAdmin"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_server_list_type": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerListType"
                ],
                "summary": "Creates LoginServerListType",
                "operationId": "createLoginServerListType",
                "parameters": [
                    {
                        "description": "LoginServerListType",
                        "name": "login_server_list_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginServerListType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerListType"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_server_list_type/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerListType"
                ],
                "summary": "Gets LoginServerListType",
                "operationId": "getLoginServerListType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerListType"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerListType"
                ],
                "summary": "Deletes LoginServerListType",
                "operationId": "deleteLoginServerListType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerListType"
                ],
                "summary": "Updates LoginServerListType",
                "operationId": "updateLoginServerListType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LoginServerListType",
                        "name": "login_server_list_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginServerListType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerListType"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_server_list_types": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginServerListType"
                ],
                "summary": "Lists LoginServerListTypes",
                "operationId": "listLoginServerListTypes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginServerListType"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_world_server": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginWorldServer"
                ],
                "summary": "Creates LoginWorldServer",
                "operationId": "createLoginWorldServer",
                "parameters": [
                    {
                        "description": "LoginWorldServer",
                        "name": "login_world_server",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginWorldServer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginWorldServer"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_world_server/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginWorldServer"
                ],
                "summary": "Gets LoginWorldServer",
                "operationId": "getLoginWorldServer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginWorldServer"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginWorldServer"
                ],
                "summary": "Deletes LoginWorldServer",
                "operationId": "deleteLoginWorldServer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginWorldServer"
                ],
                "summary": "Updates LoginWorldServer",
                "operationId": "updateLoginWorldServer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LoginWorldServer",
                        "name": "login_world_server",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginWorldServer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginWorldServer"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login_world_servers": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LoginWorldServer"
                ],
                "summary": "Lists LoginWorldServers",
                "operationId": "listLoginWorldServers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LoginWorldServer"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/lootdrop": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lootdrop"
                ],
                "summary": "Creates Lootdrop",
                "operationId": "createLootdrop",
                "parameters": [
                    {
                        "description": "Lootdrop",
                        "name": "lootdrop",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Lootdrop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Lootdrop"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/lootdrop/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lootdrop"
                ],
                "summary": "Gets Lootdrop",
                "operationId": "getLootdrop",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eLootdropEntries\u003cbr\u003eLootdropEntries.Item\u003cbr\u003eLootdropEntries.Item.DiscoveredItems",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Lootdrop"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lootdrop"
                ],
                "summary": "Deletes Lootdrop",
                "operationId": "deleteLootdrop",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lootdrop"
                ],
                "summary": "Updates Lootdrop",
                "operationId": "updateLootdrop",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Lootdrop",
                        "name": "lootdrop",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Lootdrop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Lootdrop"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/lootdrops": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lootdrop"
                ],
                "summary": "Lists Lootdrops",
                "operationId": "listLootdrops",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eLootdropEntries\u003cbr\u003eLootdropEntries.Item\u003cbr\u003eLootdropEntries.Item.DiscoveredItems",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Lootdrop"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/loottable": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loottable"
                ],
                "summary": "Creates Loottable",
                "operationId": "createLoottable",
                "parameters": [
                    {
                        "description": "Loottable",
                        "name": "loottable",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Loottable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Loottable"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/loottable/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loottable"
                ],
                "summary": "Gets Loottable",
                "operationId": "getLoottable",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eLoottableEntries\u003cbr\u003eLoottableEntries.LootdropEntries\u003cbr\u003eLoottableEntries.LootdropEntries.Item\u003cbr\u003eLoottableEntries.LootdropEntries.Item.DiscoveredItems",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Loottable"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loottable"
                ],
                "summary": "Deletes Loottable",
                "operationId": "deleteLoottable",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loottable"
                ],
                "summary": "Updates Loottable",
                "operationId": "updateLoottable",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Loottable",
                        "name": "loottable",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Loottable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Loottable"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/loottables": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loottable"
                ],
                "summary": "Lists Loottables",
                "operationId": "listLoottables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eLoottableEntries\u003cbr\u003eLoottableEntries.LootdropEntries\u003cbr\u003eLoottableEntries.LootdropEntries.Item\u003cbr\u003eLoottableEntries.LootdropEntries.Item.DiscoveredItems",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Loottable"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Me"
                ],
                "summary": "Returns current logged in user information",
                "operationId": "me",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/name_filter": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NameFilter"
                ],
                "summary": "Creates NameFilter",
                "operationId": "createNameFilter",
                "parameters": [
                    {
                        "description": "NameFilter",
                        "name": "name_filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NameFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NameFilter"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/name_filter/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NameFilter"
                ],
                "summary": "Gets NameFilter",
                "operationId": "getNameFilter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NameFilter"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NameFilter"
                ],
                "summary": "Deletes NameFilter",
                "operationId": "deleteNameFilter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NameFilter"
                ],
                "summary": "Updates NameFilter",
                "operationId": "updateNameFilter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NameFilter",
                        "name": "name_filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NameFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NameFilter"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/name_filters": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NameFilter"
                ],
                "summary": "Lists NameFilters",
                "operationId": "listNameFilters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NameFilter"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_emote": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcEmote"
                ],
                "summary": "Creates NpcEmote",
                "operationId": "createNpcEmote",
                "parameters": [
                    {
                        "description": "NpcEmote",
                        "name": "npc_emote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcEmote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcEmote"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_emote/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcEmote"
                ],
                "summary": "Gets NpcEmote",
                "operationId": "getNpcEmote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcEmote"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcEmote"
                ],
                "summary": "Deletes NpcEmote",
                "operationId": "deleteNpcEmote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcEmote"
                ],
                "summary": "Updates NpcEmote",
                "operationId": "updateNpcEmote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcEmote",
                        "name": "npc_emote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcEmote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcEmote"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_emotes": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcEmote"
                ],
                "summary": "Lists NpcEmotes",
                "operationId": "listNpcEmotes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcEmote"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_faction": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcFaction"
                ],
                "summary": "Creates NpcFaction",
                "operationId": "createNpcFaction",
                "parameters": [
                    {
                        "description": "NpcFaction",
                        "name": "npc_faction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcFaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcFaction"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_faction/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcFaction"
                ],
                "summary": "Gets NpcFaction",
                "operationId": "getNpcFaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eNpcFactionEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcFaction"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcFaction"
                ],
                "summary": "Deletes NpcFaction",
                "operationId": "deleteNpcFaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcFaction"
                ],
                "summary": "Updates NpcFaction",
                "operationId": "updateNpcFaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcFaction",
                        "name": "npc_faction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcFaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcFaction"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_factions": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcFaction"
                ],
                "summary": "Lists NpcFactions",
                "operationId": "listNpcFactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eNpcFactionEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcFaction"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spell": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpell"
                ],
                "summary": "Creates NpcSpell",
                "operationId": "createNpcSpell",
                "parameters": [
                    {
                        "description": "NpcSpell",
                        "name": "npc_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spell/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpell"
                ],
                "summary": "Gets NpcSpell",
                "operationId": "getNpcSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eNpcSpellsEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpell"
                ],
                "summary": "Deletes NpcSpell",
                "operationId": "deleteNpcSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpell"
                ],
                "summary": "Updates NpcSpell",
                "operationId": "updateNpcSpell",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcSpell",
                        "name": "npc_spell",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpell"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpell"
                ],
                "summary": "Lists NpcSpells",
                "operationId": "listNpcSpells",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eNpcSpellsEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpell"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_effect": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffect"
                ],
                "summary": "Creates NpcSpellsEffect",
                "operationId": "createNpcSpellsEffect",
                "parameters": [
                    {
                        "description": "NpcSpellsEffect",
                        "name": "npc_spells_effect",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpellsEffect"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffect"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_effect/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffect"
                ],
                "summary": "Gets NpcSpellsEffect",
                "operationId": "getNpcSpellsEffect",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eNpcSpellsEffectsEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffect"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffect"
                ],
                "summary": "Deletes NpcSpellsEffect",
                "operationId": "deleteNpcSpellsEffect",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffect"
                ],
                "summary": "Updates NpcSpellsEffect",
                "operationId": "updateNpcSpellsEffect",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcSpellsEffect",
                        "name": "npc_spells_effect",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpellsEffect"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffect"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_effects": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffect"
                ],
                "summary": "Lists NpcSpellsEffects",
                "operationId": "listNpcSpellsEffects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eNpcSpellsEffectsEntries",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffect"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_effects_entries": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffectsEntry"
                ],
                "summary": "Lists NpcSpellsEffectsEntries",
                "operationId": "listNpcSpellsEffectsEntries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffectsEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_effects_entry": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffectsEntry"
                ],
                "summary": "Creates NpcSpellsEffectsEntry",
                "operationId": "createNpcSpellsEffectsEntry",
                "parameters": [
                    {
                        "description": "NpcSpellsEffectsEntry",
                        "name": "npc_spells_effects_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpellsEffectsEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffectsEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_effects_entry/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffectsEntry"
                ],
                "summary": "Gets NpcSpellsEffectsEntry",
                "operationId": "getNpcSpellsEffectsEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffectsEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffectsEntry"
                ],
                "summary": "Deletes NpcSpellsEffectsEntry",
                "operationId": "deleteNpcSpellsEffectsEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEffectsEntry"
                ],
                "summary": "Updates NpcSpellsEffectsEntry",
                "operationId": "updateNpcSpellsEffectsEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcSpellsEffectsEntry",
                        "name": "npc_spells_effects_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpellsEffectsEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEffectsEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_entries": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEntry"
                ],
                "summary": "Lists NpcSpellsEntries",
                "operationId": "listNpcSpellsEntries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_entry": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEntry"
                ],
                "summary": "Creates NpcSpellsEntry",
                "operationId": "createNpcSpellsEntry",
                "parameters": [
                    {
                        "description": "NpcSpellsEntry",
                        "name": "npc_spells_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpellsEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_spells_entry/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEntry"
                ],
                "summary": "Gets NpcSpellsEntry",
                "operationId": "getNpcSpellsEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEntry"
                ],
                "summary": "Deletes NpcSpellsEntry",
                "operationId": "deleteNpcSpellsEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcSpellsEntry"
                ],
                "summary": "Updates NpcSpellsEntry",
                "operationId": "updateNpcSpellsEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcSpellsEntry",
                        "name": "npc_spells_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcSpellsEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcSpellsEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_type": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcType"
                ],
                "summary": "Creates NpcType",
                "operationId": "createNpcType",
                "parameters": [
                    {
                        "description": "NpcType",
                        "name": "npc_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcType"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_type/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcType"
                ],
                "summary": "Gets NpcType",
                "operationId": "getNpcType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAlternateCurrency\u003cbr\u003eMerchantlists\u003cbr\u003eNpcEmotes\u003cbr\u003eNpcFactions\u003cbr\u003eNpcFactions.NpcFactionEntries\u003cbr\u003eNpcSpells\u003cbr\u003eNpcSpells.NpcSpellsEntries\u003cbr\u003eNpcTypesTint\u003cbr\u003eSpawnentries\u003cbr\u003eSpawnentries.Spawngroup\u003cbr\u003eSpawnentries.Spawngroup.Spawn2",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcType"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcType"
                ],
                "summary": "Deletes NpcType",
                "operationId": "deleteNpcType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcType"
                ],
                "summary": "Updates NpcType",
                "operationId": "updateNpcType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcType",
                        "name": "npc_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcType"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_types": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcType"
                ],
                "summary": "Lists NpcTypes",
                "operationId": "listNpcTypes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAlternateCurrency\u003cbr\u003eMerchantlists\u003cbr\u003eNpcEmotes\u003cbr\u003eNpcFactions\u003cbr\u003eNpcFactions.NpcFactionEntries\u003cbr\u003eNpcSpells\u003cbr\u003eNpcSpells.NpcSpellsEntries\u003cbr\u003eNpcTypesTint\u003cbr\u003eSpawnentries\u003cbr\u003eSpawnentries.Spawngroup\u003cbr\u003eSpawnentries.Spawngroup.Spawn2",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcType"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_types_tint": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcTypesTint"
                ],
                "summary": "Creates NpcTypesTint",
                "operationId": "createNpcTypesTint",
                "parameters": [
                    {
                        "description": "NpcTypesTint",
                        "name": "npc_types_tint",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcTypesTint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcTypesTint"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_types_tint/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcTypesTint"
                ],
                "summary": "Gets NpcTypesTint",
                "operationId": "getNpcTypesTint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcTypesTint"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcTypesTint"
                ],
                "summary": "Deletes NpcTypesTint",
                "operationId": "deleteNpcTypesTint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcTypesTint"
                ],
                "summary": "Updates NpcTypesTint",
                "operationId": "updateNpcTypesTint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NpcTypesTint",
                        "name": "npc_types_tint",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NpcTypesTint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcTypesTint"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/npc_types_tints": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NpcTypesTint"
                ],
                "summary": "Lists NpcTypesTints",
                "operationId": "listNpcTypesTints",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NpcTypesTint"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/object": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Object"
                ],
                "summary": "Creates Object",
                "operationId": "createObject",
                "parameters": [
                    {
                        "description": "Object",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Object"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/object/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Object"
                ],
                "summary": "Gets Object",
                "operationId": "getObject",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Object"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Object"
                ],
                "summary": "Deletes Object",
                "operationId": "deleteObject",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Object"
                ],
                "summary": "Updates Object",
                "operationId": "updateObject",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Object"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/objects": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Object"
                ],
                "summary": "Lists Objects",
                "operationId": "listObjects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Object"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/player_titleset": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerTitleset"
                ],
                "summary": "Creates PlayerTitleset",
                "operationId": "createPlayerTitleset",
                "parameters": [
                    {
                        "description": "PlayerTitleset",
                        "name": "player_titleset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PlayerTitleset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PlayerTitleset"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/player_titleset/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerTitleset"
                ],
                "summary": "Gets PlayerTitleset",
                "operationId": "getPlayerTitleset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PlayerTitleset"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerTitleset"
                ],
                "summary": "Deletes PlayerTitleset",
                "operationId": "deletePlayerTitleset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerTitleset"
                ],
                "summary": "Updates PlayerTitleset",
                "operationId": "updatePlayerTitleset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PlayerTitleset",
                        "name": "player_titleset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PlayerTitleset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PlayerTitleset"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/player_titlesets": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerTitleset"
                ],
                "summary": "Lists PlayerTitlesets",
                "operationId": "listPlayerTitlesets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PlayerTitleset"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/report": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Creates Report",
                "operationId": "createReport",
                "parameters": [
                    {
                        "description": "Report",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/report/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Gets Report",
                "operationId": "getReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Deletes Report",
                "operationId": "deleteReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Updates Report",
                "operationId": "updateReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Report",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reports": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Lists Reports",
                "operationId": "listReports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/respawn_time": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RespawnTime"
                ],
                "summary": "Creates RespawnTime",
                "operationId": "createRespawnTime",
                "parameters": [
                    {
                        "description": "RespawnTime",
                        "name": "respawn_time",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RespawnTime"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RespawnTime"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/respawn_time/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RespawnTime"
                ],
                "summary": "Gets RespawnTime",
                "operationId": "getRespawnTime",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RespawnTime"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RespawnTime"
                ],
                "summary": "Deletes RespawnTime",
                "operationId": "deleteRespawnTime",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RespawnTime"
                ],
                "summary": "Updates RespawnTime",
                "operationId": "updateRespawnTime",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "RespawnTime",
                        "name": "respawn_time",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RespawnTime"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RespawnTime"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/respawn_times": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RespawnTime"
                ],
                "summary": "Lists RespawnTimes",
                "operationId": "listRespawnTimes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RespawnTime"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/saylink": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Saylink"
                ],
                "summary": "Creates Saylink",
                "operationId": "createSaylink",
                "parameters": [
                    {
                        "description": "Saylink",
                        "name": "saylink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Saylink"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Saylink"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/saylink/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Saylink"
                ],
                "summary": "Gets Saylink",
                "operationId": "getSaylink",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Saylink"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Saylink"
                ],
                "summary": "Deletes Saylink",
                "operationId": "deleteSaylink",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Saylink"
                ],
                "summary": "Updates Saylink",
                "operationId": "updateSaylink",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Saylink",
                        "name": "saylink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Saylink"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Saylink"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/saylinks": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Saylink"
                ],
                "summary": "Lists Saylinks",
                "operationId": "listSaylinks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Saylink"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/server_scheduled_event": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServerScheduledEvent"
                ],
                "summary": "Creates ServerScheduledEvent",
                "operationId": "createServerScheduledEvent",
                "parameters": [
                    {
                        "description": "ServerScheduledEvent",
                        "name": "server_scheduled_event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServerScheduledEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ServerScheduledEvent"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/server_scheduled_event/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServerScheduledEvent"
                ],
                "summary": "Gets ServerScheduledEvent",
                "operationId": "getServerScheduledEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ServerScheduledEvent"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServerScheduledEvent"
                ],
                "summary": "Deletes ServerScheduledEvent",
                "operationId": "deleteServerScheduledEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServerScheduledEvent"
                ],
                "summary": "Updates ServerScheduledEvent",
                "operationId": "updateServerScheduledEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ServerScheduledEvent",
                        "name": "server_scheduled_event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServerScheduledEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ServerScheduledEvent"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/server_scheduled_events": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServerScheduledEvent"
                ],
                "summary": "Lists ServerScheduledEvents",
                "operationId": "listServerScheduledEvents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ServerScheduledEvent"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_2": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawn2"
                ],
                "summary": "Creates Spawn2",
                "operationId": "createSpawn2",
                "parameters": [
                    {
                        "description": "Spawn2",
                        "name": "spawn_2",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Spawn2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawn2"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_2/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawn2"
                ],
                "summary": "Gets Spawn2",
                "operationId": "getSpawn2",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eSpawnentries\u003cbr\u003eSpawnentries.NpcType\u003cbr\u003eSpawnentries.NpcType.AlternateCurrency\u003cbr\u003eSpawnentries.NpcType.Merchantlists\u003cbr\u003eSpawnentries.NpcType.NpcFactions\u003cbr\u003eSpawnentries.NpcType.NpcFactions.NpcFactionEntries\u003cbr\u003eSpawnentries.NpcType.NpcSpells\u003cbr\u003eSpawnentries.NpcType.NpcSpells.NpcSpellsEntries\u003cbr\u003eSpawnentries.Spawngroup\u003cbr\u003eSpawnentries.Spawngroup.Spawn2\u003cbr\u003eSpawngroup",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawn2"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawn2"
                ],
                "summary": "Deletes Spawn2",
                "operationId": "deleteSpawn2",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawn2"
                ],
                "summary": "Updates Spawn2",
                "operationId": "updateSpawn2",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Spawn2",
                        "name": "spawn_2",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Spawn2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawn2"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_2s": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawn2"
                ],
                "summary": "Lists Spawn2s",
                "operationId": "listSpawn2s",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eSpawnentries\u003cbr\u003eSpawnentries.NpcType\u003cbr\u003eSpawnentries.NpcType.AlternateCurrency\u003cbr\u003eSpawnentries.NpcType.Merchantlists\u003cbr\u003eSpawnentries.NpcType.NpcFactions\u003cbr\u003eSpawnentries.NpcType.NpcFactions.NpcFactionEntries\u003cbr\u003eSpawnentries.NpcType.NpcSpells\u003cbr\u003eSpawnentries.NpcType.NpcSpells.NpcSpellsEntries\u003cbr\u003eSpawnentries.Spawngroup\u003cbr\u003eSpawnentries.Spawngroup.Spawn2\u003cbr\u003eSpawngroup",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawn2"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_condition": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnCondition"
                ],
                "summary": "Creates SpawnCondition",
                "operationId": "createSpawnCondition",
                "parameters": [
                    {
                        "description": "SpawnCondition",
                        "name": "spawn_condition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpawnCondition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnCondition"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_condition/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnCondition"
                ],
                "summary": "Gets SpawnCondition",
                "operationId": "getSpawnCondition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnCondition"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnCondition"
                ],
                "summary": "Deletes SpawnCondition",
                "operationId": "deleteSpawnCondition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnCondition"
                ],
                "summary": "Updates SpawnCondition",
                "operationId": "updateSpawnCondition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SpawnCondition",
                        "name": "spawn_condition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpawnCondition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnCondition"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_condition_value": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnConditionValue"
                ],
                "summary": "Creates SpawnConditionValue",
                "operationId": "createSpawnConditionValue",
                "parameters": [
                    {
                        "description": "SpawnConditionValue",
                        "name": "spawn_condition_value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpawnConditionValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnConditionValue"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_condition_value/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnConditionValue"
                ],
                "summary": "Gets SpawnConditionValue",
                "operationId": "getSpawnConditionValue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnConditionValue"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnConditionValue"
                ],
                "summary": "Deletes SpawnConditionValue",
                "operationId": "deleteSpawnConditionValue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnConditionValue"
                ],
                "summary": "Updates SpawnConditionValue",
                "operationId": "updateSpawnConditionValue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SpawnConditionValue",
                        "name": "spawn_condition_value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpawnConditionValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnConditionValue"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_condition_values": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnConditionValue"
                ],
                "summary": "Lists SpawnConditionValues",
                "operationId": "listSpawnConditionValues",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnConditionValue"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_conditions": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnCondition"
                ],
                "summary": "Lists SpawnConditions",
                "operationId": "listSpawnConditions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnCondition"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_event": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnEvent"
                ],
                "summary": "Creates SpawnEvent",
                "operationId": "createSpawnEvent",
                "parameters": [
                    {
                        "description": "SpawnEvent",
                        "name": "spawn_event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpawnEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnEvent"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_event/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnEvent"
                ],
                "summary": "Gets SpawnEvent",
                "operationId": "getSpawnEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnEvent"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnEvent"
                ],
                "summary": "Deletes SpawnEvent",
                "operationId": "deleteSpawnEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnEvent"
                ],
                "summary": "Updates SpawnEvent",
                "operationId": "updateSpawnEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SpawnEvent",
                        "name": "spawn_event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpawnEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnEvent"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawn_events": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpawnEvent"
                ],
                "summary": "Lists SpawnEvents",
                "operationId": "listSpawnEvents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpawnEvent"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawngroup": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawngroup"
                ],
                "summary": "Creates Spawngroup",
                "operationId": "createSpawngroup",
                "parameters": [
                    {
                        "description": "Spawngroup",
                        "name": "spawngroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Spawngroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawngroup"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawngroup/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawngroup"
                ],
                "summary": "Gets Spawngroup",
                "operationId": "getSpawngroup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eSpawn2",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawngroup"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawngroup"
                ],
                "summary": "Deletes Spawngroup",
                "operationId": "deleteSpawngroup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawngroup"
                ],
                "summary": "Updates Spawngroup",
                "operationId": "updateSpawngroup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Spawngroup",
                        "name": "spawngroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Spawngroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawngroup"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spawngroups": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spawngroup"
                ],
                "summary": "Lists Spawngroups",
                "operationId": "listSpawngroups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eSpawn2",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spawngroup"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spells_new": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpellsNew"
                ],
                "summary": "Creates SpellsNew",
                "operationId": "createSpellsNew",
                "parameters": [
                    {
                        "description": "SpellsNew",
                        "name": "spells_new",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpellsNew"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpellsNew"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spells_new/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpellsNew"
                ],
                "summary": "Gets SpellsNew",
                "operationId": "getSpellsNew",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAura\u003cbr\u003eBlockedSpells\u003cbr\u003eDamageshieldtypes\u003cbr\u003eSpellBuckets\u003cbr\u003eSpellGlobals",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpellsNew"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpellsNew"
                ],
                "summary": "Deletes SpellsNew",
                "operationId": "deleteSpellsNew",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpellsNew"
                ],
                "summary": "Updates SpellsNew",
                "operationId": "updateSpellsNew",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SpellsNew",
                        "name": "spells_new",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpellsNew"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpellsNew"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spells_news": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpellsNew"
                ],
                "summary": "Lists SpellsNews",
                "operationId": "listSpellsNews",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eAura\u003cbr\u003eBlockedSpells\u003cbr\u003eDamageshieldtypes\u003cbr\u003eSpellBuckets\u003cbr\u003eSpellGlobals",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpellsNew"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/spells_news/bulk": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpellsNew"
                ],
                "summary": "Gets SpellsNews in bulk",
                "operationId": "getSpellsNewBulk",
                "parameters": [
                    {
                        "description": "ids",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudcontrollers.BulkSpellsNewGetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpellsNew"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/starting_item": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StartingItem"
                ],
                "summary": "Creates StartingItem",
                "operationId": "createStartingItem",
                "parameters": [
                    {
                        "description": "StartingItem",
                        "name": "starting_item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StartingItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StartingItem"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/starting_item/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StartingItem"
                ],
                "summary": "Gets StartingItem",
                "operationId": "getStartingItem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StartingItem"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StartingItem"
                ],
                "summary": "Deletes StartingItem",
                "operationId": "deleteStartingItem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StartingItem"
                ],
                "summary": "Updates StartingItem",
                "operationId": "updateStartingItem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "StartingItem",
                        "name": "starting_item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StartingItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StartingItem"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/starting_items": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StartingItem"
                ],
                "summary": "Lists StartingItems",
                "operationId": "listStartingItems",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StartingItem"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/task": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Creates Task",
                "operationId": "createTask",
                "parameters": [
                    {
                        "description": "Task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Task"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/task/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Gets Task",
                "operationId": "getTask",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eTaskActivities\u003cbr\u003eTaskActivities.Goallists\u003cbr\u003eTaskActivities.NpcType\u003cbr\u003eTaskActivities.NpcType.AlternateCurrency\u003cbr\u003eTaskActivities.NpcType.Merchantlists\u003cbr\u003eTaskActivities.NpcType.NpcEmotes\u003cbr\u003eTaskActivities.NpcType.NpcFactions\u003cbr\u003eTaskActivities.NpcType.NpcFactions.NpcFactionEntries\u003cbr\u003eTaskActivities.NpcType.NpcSpells\u003cbr\u003eTaskActivities.NpcType.NpcSpells.NpcSpellsEntries\u003cbr\u003eTaskActivities.NpcType.NpcTypesTint\u003cbr\u003eTaskActivities.NpcType.Spawnentries\u003cbr\u003eTaskActivities.NpcType.Spawnentries.Spawngroup\u003cbr\u003eTaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2\u003cbr\u003eTasksets",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Task"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Deletes Task",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Updates Task",
                "operationId": "updateTask",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Task"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Lists Tasks",
                "operationId": "listTasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names \u003ch4\u003eRelationships\u003c/h4\u003eTaskActivities\u003cbr\u003eTaskActivities.Goallists\u003cbr\u003eTaskActivities.NpcType\u003cbr\u003eTaskActivities.NpcType.AlternateCurrency\u003cbr\u003eTaskActivities.NpcType.Merchantlists\u003cbr\u003eTaskActivities.NpcType.NpcEmotes\u003cbr\u003eTaskActivities.NpcType.NpcFactions\u003cbr\u003eTaskActivities.NpcType.NpcFactions.NpcFactionEntries\u003cbr\u003eTaskActivities.NpcType.NpcSpells\u003cbr\u003eTaskActivities.NpcType.NpcSpells.NpcSpellsEntries\u003cbr\u003eTaskActivities.NpcType.NpcTypesTint\u003cbr\u003eTaskActivities.NpcType.Spawnentries\u003cbr\u003eTaskActivities.NpcType.Spawnentries.Spawngroup\u003cbr\u003eTaskActivities.NpcType.Spawnentries.Spawngroup.Spawn2\u003cbr\u003eTasksets",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Task"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/taskset": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Taskset"
                ],
                "summary": "Creates Taskset",
                "operationId": "createTaskset",
                "parameters": [
                    {
                        "description": "Taskset",
                        "name": "taskset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Taskset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Taskset"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/taskset/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Taskset"
                ],
                "summary": "Gets Taskset",
                "operationId": "getTaskset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Taskset"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Taskset"
                ],
                "summary": "Deletes Taskset",
                "operationId": "deleteTaskset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Taskset"
                ],
                "summary": "Updates Taskset",
                "operationId": "updateTaskset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Taskset",
                        "name": "taskset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Taskset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Taskset"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasksets": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Taskset"
                ],
                "summary": "Lists Tasksets",
                "operationId": "listTasksets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Taskset"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/title": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Title"
                ],
                "summary": "Creates Title",
                "operationId": "createTitle",
                "parameters": [
                    {
                        "description": "Title",
                        "name": "title",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Title"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Title"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/title/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Title"
                ],
                "summary": "Gets Title",
                "operationId": "getTitle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Title"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Title"
                ],
                "summary": "Deletes Title",
                "operationId": "deleteTitle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Title"
                ],
                "summary": "Updates Title",
                "operationId": "updateTitle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Title",
                        "name": "title",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Title"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Title"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/titles": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Title"
                ],
                "summary": "Lists Titles",
                "operationId": "listTitles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Title"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tradeskill_recipe": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipe"
                ],
                "summary": "Creates TradeskillRecipe",
                "operationId": "createTradeskillRecipe",
                "parameters": [
                    {
                        "description": "TradeskillRecipe",
                        "name": "tradeskill_recipe",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TradeskillRecipe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipe"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tradeskill_recipe/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipe"
                ],
                "summary": "Gets TradeskillRecipe",
                "operationId": "getTradeskillRecipe",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipe"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipe"
                ],
                "summary": "Deletes TradeskillRecipe",
                "operationId": "deleteTradeskillRecipe",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipe"
                ],
                "summary": "Updates TradeskillRecipe",
                "operationId": "updateTradeskillRecipe",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TradeskillRecipe",
                        "name": "tradeskill_recipe",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TradeskillRecipe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipe"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tradeskill_recipe_entries": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipeEntry"
                ],
                "summary": "Lists TradeskillRecipeEntries",
                "operationId": "listTradeskillRecipeEntries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipeEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tradeskill_recipe_entry": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipeEntry"
                ],
                "summary": "Creates TradeskillRecipeEntry",
                "operationId": "createTradeskillRecipeEntry",
                "parameters": [
                    {
                        "description": "TradeskillRecipeEntry",
                        "name": "tradeskill_recipe_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TradeskillRecipeEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipeEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tradeskill_recipe_entry/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipeEntry"
                ],
                "summary": "Gets TradeskillRecipeEntry",
                "operationId": "getTradeskillRecipeEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipeEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipeEntry"
                ],
                "summary": "Deletes TradeskillRecipeEntry",
                "operationId": "deleteTradeskillRecipeEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipeEntry"
                ],
                "summary": "Updates TradeskillRecipeEntry",
                "operationId": "updateTradeskillRecipeEntry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TradeskillRecipeEntry",
                        "name": "tradeskill_recipe_entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TradeskillRecipeEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipeEntry"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tradeskill_recipes": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TradeskillRecipe"
                ],
                "summary": "Lists TradeskillRecipes",
                "operationId": "listTradeskillRecipes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TradeskillRecipe"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/trap": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trap"
                ],
                "summary": "Creates Trap",
                "operationId": "createTrap",
                "parameters": [
                    {
                        "description": "Trap",
                        "name": "trap",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Trap"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Trap"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/trap/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trap"
                ],
                "summary": "Gets Trap",
                "operationId": "getTrap",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Trap"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trap"
                ],
                "summary": "Deletes Trap",
                "operationId": "deleteTrap",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trap"
                ],
                "summary": "Updates Trap",
                "operationId": "updateTrap",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Trap",
                        "name": "trap",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Trap"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Trap"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/traps": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trap"
                ],
                "summary": "Lists Traps",
                "operationId": "listTraps",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Trap"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tribute": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tribute"
                ],
                "summary": "Creates Tribute",
                "operationId": "createTribute",
                "parameters": [
                    {
                        "description": "Tribute",
                        "name": "tribute",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tribute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tribute"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tribute/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tribute"
                ],
                "summary": "Gets Tribute",
                "operationId": "getTribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tribute"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tribute"
                ],
                "summary": "Deletes Tribute",
                "operationId": "deleteTribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tribute"
                ],
                "summary": "Updates Tribute",
                "operationId": "updateTribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tribute",
                        "name": "tribute",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tribute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tribute"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tributes": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tribute"
                ],
                "summary": "Lists Tributes",
                "operationId": "listTributes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tribute"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/zone": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zone"
                ],
                "summary": "Creates Zone",
                "operationId": "createZone",
                "parameters": [
                    {
                        "description": "Zone",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Zone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Zone"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/zone/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zone"
                ],
                "summary": "Gets Zone",
                "operationId": "getZone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Zone"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zone"
                ],
                "summary": "Deletes Zone",
                "operationId": "deleteZone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zone"
                ],
                "summary": "Updates Zone",
                "operationId": "updateZone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Zone",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Zone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Zone"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/zone_point": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZonePoint"
                ],
                "summary": "Creates ZonePoint",
                "operationId": "createZonePoint",
                "parameters": [
                    {
                        "description": "ZonePoint",
                        "name": "zone_point",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZonePoint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ZonePoint"
                            }
                        }
                    },
                    "500": {
                        "description": "Error inserting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/zone_point/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZonePoint"
                ],
                "summary": "Gets ZonePoint",
                "operationId": "getZonePoint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ZonePoint"
                            }
                        }
                    },
                    "404": {
                        "description": "Entity not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZonePoint"
                ],
                "summary": "Deletes ZonePoint",
                "operationId": "deleteZonePoint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZonePoint"
                ],
                "summary": "Updates ZonePoint",
                "operationId": "updateZonePoint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ZonePoint",
                        "name": "zone_point",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZonePoint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ZonePoint"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot find entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/zone_points": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ZonePoint"
                ],
                "summary": "Lists ZonePoints",
                "operationId": "listZonePoints",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ZonePoint"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/zones": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zone"
                ],
                "summary": "Lists Zones",
                "operationId": "listZones",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names ",
                        "name": "includes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2",
                        "name": "whereOr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Rows to limit in response (Default: 10,000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by [field]",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field direction",
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column names [.] separated to fetch specific fields in response",
                        "name": "select",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Zone"
                            }
                        }
                    },
                    "500": {
                        "description": "Bad query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "crudcontrollers.BulkSpellsNewGetRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "models.AaAbility": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "integer"
                },
                "charges": {
                    "type": "integer"
                },
                "classes": {
                    "type": "integer"
                },
                "deities": {
                    "type": "integer"
                },
                "drakkin_heritage": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "integer"
                },
                "first_rank_id": {
                    "type": "integer"
                },
                "grant_only": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "races": {
                    "type": "integer"
                },
                "reset_on_death": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.AaRank": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "desc_sid": {
                    "type": "integer"
                },
                "expansion": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "level_req": {
                    "type": "integer"
                },
                "lower_hotkey_sid": {
                    "type": "integer"
                },
                "next_id": {
                    "type": "integer"
                },
                "prev_id": {
                    "type": "integer"
                },
                "recast_time": {
                    "type": "integer"
                },
                "spell": {
                    "type": "integer"
                },
                "spell_type": {
                    "type": "integer"
                },
                "title_sid": {
                    "type": "integer"
                },
                "upper_hotkey_sid": {
                    "type": "integer"
                }
            }
        },
        "models.Account": {
            "type": "object",
            "properties": {
                "account_flags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AccountFlag"
                    }
                },
                "account_ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AccountIp"
                    }
                },
                "account_rewards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AccountReward"
                    }
                },
                "ban_reason": {
                    "type": "string"
                },
                "bug_reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BugReport"
                    }
                },
                "charname": {
                    "type": "string"
                },
                "expansion": {
                    "type": "integer"
                },
                "gmspeed": {
                    "type": "integer"
                },
                "hideme": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "karma": {
                    "type": "integer"
                },
                "ls_id": {
                    "type": "string"
                },
                "lsaccount_id": {
                    "type": "integer"
                },
                "minilogin_ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "revoked": {
                    "type": "integer"
                },
                "rulesflag": {
                    "type": "integer"
                },
                "sharedbanks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Sharedbank"
                    }
                },
                "sharedplat": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "suspend_reason": {
                    "type": "string"
                },
                "suspendeduntil": {
                    "type": "string"
                },
                "time_creation": {
                    "type": "integer"
                }
            }
        },
        "models.AccountFlag": {
            "type": "object",
            "properties": {
                "p_accid": {
                    "type": "integer"
                },
                "p_flag": {
                    "type": "string"
                },
                "p_value": {
                    "type": "string"
                }
            }
        },
        "models.AccountIp": {
            "type": "object",
            "properties": {
                "accid": {
                    "type": "integer"
                },
                "count": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "lastused": {
                    "type": "string"
                }
            }
        },
        "models.AccountReward": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "integer"
                },
                "amount": {
                    "type": "integer"
                },
                "reward_id": {
                    "type": "integer"
                }
            }
        },
        "models.AdventureDetail": {
            "type": "object",
            "properties": {
                "adventure_id": {
                    "type": "integer"
                },
                "assassinate_count": {
                    "type": "integer"
                },
                "count": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "time_completed": {
                    "type": "integer"
                },
                "time_created": {
                    "type": "integer"
                },
                "time_zoned": {
                    "type": "integer"
                }
            }
        },
        "models.AdventureStat": {
            "type": "object",
            "properties": {
                "guk_losses": {
                    "type": "integer"
                },
                "guk_wins": {
                    "type": "integer"
                },
                "mir_losses": {
                    "type": "integer"
                },
                "mir_wins": {
                    "type": "integer"
                },
                "mmc_losses": {
                    "type": "integer"
                },
                "mmc_wins": {
                    "type": "integer"
                },
                "player_id": {
                    "type": "integer"
                },
                "ruj_losses": {
                    "type": "integer"
                },
                "ruj_wins": {
                    "type": "integer"
                },
                "tak_losses": {
                    "type": "integer"
                },
                "tak_wins": {
                    "type": "integer"
                }
            }
        },
        "models.AdventureTemplate": {
            "type": "object",
            "properties": {
                "assa_h": {
                    "type": "number"
                },
                "assa_x": {
                    "type": "number"
                },
                "assa_y": {
                    "type": "number"
                },
                "assa_z": {
                    "type": "number"
                },
                "dest_h": {
                    "type": "number"
                },
                "dest_x": {
                    "type": "number"
                },
                "dest_y": {
                    "type": "number"
                },
                "dest_z": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "graveyard_radius": {
                    "type": "string"
                },
                "graveyard_x": {
                    "type": "number"
                },
                "graveyard_y": {
                    "type": "number"
                },
                "graveyard_z": {
                    "type": "number"
                },
                "graveyard_zone_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_hard": {
                    "type": "integer"
                },
                "is_raid": {
                    "type": "integer"
                },
                "lose_points": {
                    "type": "integer"
                },
                "max_level": {
                    "type": "integer"
                },
                "min_level": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "theme": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                },
                "type_count": {
                    "type": "integer"
                },
                "type_data": {
                    "type": "integer"
                },
                "win_points": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                },
                "zone_in_object_id": {
                    "type": "integer"
                },
                "zone_in_time": {
                    "type": "integer"
                },
                "zone_in_x": {
                    "type": "number"
                },
                "zone_in_y": {
                    "type": "number"
                },
                "zone_in_zone_id": {
                    "type": "integer"
                },
                "zone_version": {
                    "type": "integer"
                }
            }
        },
        "models.AdventureTemplateEntry": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "template_id": {
                    "type": "integer"
                }
            }
        },
        "models.AdventureTemplateEntryFlavor": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "models.AlternateCurrency": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                }
            }
        },
        "models.Aura": {
            "type": "object",
            "properties": {
                "aura_type": {
                    "type": "integer"
                },
                "cast_time": {
                    "type": "integer"
                },
                "distance": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "icon": {
                    "type": "integer"
                },
                "movement": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "npc_type": {
                    "type": "integer"
                },
                "spawn_type": {
                    "type": "integer"
                },
                "spell_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.BlockedSpell": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "spellid": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "x_diff": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "y_diff": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "z_diff": {
                    "type": "number"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.Bug": {
            "type": "object",
            "properties": {
                "bug": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "flag": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "target": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "ui": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.BugReport": {
            "type": "object",
            "properties": {
                "_can_duplicate": {
                    "type": "integer"
                },
                "_character_flags": {
                    "type": "integer"
                },
                "_crash_bug": {
                    "type": "integer"
                },
                "_target_info": {
                    "type": "integer"
                },
                "_unknown_value": {
                    "type": "integer"
                },
                "account_id": {
                    "type": "integer"
                },
                "bug_report": {
                    "type": "string"
                },
                "bug_status": {
                    "type": "integer"
                },
                "category_id": {
                    "type": "integer"
                },
                "category_name": {
                    "type": "string"
                },
                "character_id": {
                    "type": "integer"
                },
                "character_name": {
                    "type": "string"
                },
                "client_version_id": {
                    "type": "integer"
                },
                "client_version_name": {
                    "type": "string"
                },
                "heading": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "last_review": {
                    "type": "string"
                },
                "last_reviewer": {
                    "type": "string"
                },
                "optional_info_mask": {
                    "type": "integer"
                },
                "pos_x": {
                    "type": "number"
                },
                "pos_y": {
                    "type": "number"
                },
                "pos_z": {
                    "type": "number"
                },
                "report_datetime": {
                    "type": "string"
                },
                "reporter_name": {
                    "type": "string"
                },
                "reporter_spoof": {
                    "type": "integer"
                },
                "reviewer_notes": {
                    "type": "string"
                },
                "system_info": {
                    "type": "string"
                },
                "target_id": {
                    "type": "integer"
                },
                "target_name": {
                    "type": "string"
                },
                "time_played": {
                    "type": "integer"
                },
                "ui_path": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.Buyer": {
            "type": "object",
            "properties": {
                "buyslot": {
                    "type": "integer"
                },
                "charid": {
                    "type": "integer"
                },
                "itemid": {
                    "type": "integer"
                },
                "itemname": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "models.CharCreatePointAllocation": {
            "type": "object",
            "properties": {
                "alloc_agi": {
                    "type": "integer"
                },
                "alloc_cha": {
                    "type": "integer"
                },
                "alloc_dex": {
                    "type": "integer"
                },
                "alloc_int": {
                    "type": "integer"
                },
                "alloc_sta": {
                    "type": "integer"
                },
                "alloc_str": {
                    "type": "integer"
                },
                "alloc_wis": {
                    "type": "integer"
                },
                "base_agi": {
                    "type": "integer"
                },
                "base_cha": {
                    "type": "integer"
                },
                "base_dex": {
                    "type": "integer"
                },
                "base_int": {
                    "type": "integer"
                },
                "base_sta": {
                    "type": "integer"
                },
                "base_str": {
                    "type": "integer"
                },
                "base_wis": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.CharRecipeList": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "madecount": {
                    "type": "integer"
                },
                "recipe_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterActivity": {
            "type": "object",
            "properties": {
                "activityid": {
                    "type": "integer"
                },
                "charid": {
                    "type": "integer"
                },
                "completed": {
                    "type": "integer"
                },
                "donecount": {
                    "type": "integer"
                },
                "taskid": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterAltCurrency": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "char_id": {
                    "type": "integer"
                },
                "currency_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterAlternateAbility": {
            "type": "object",
            "properties": {
                "aa_id": {
                    "type": "integer"
                },
                "aa_value": {
                    "type": "integer"
                },
                "charges": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterAura": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "spell_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterBandolier": {
            "type": "object",
            "properties": {
                "bandolier_id": {
                    "type": "integer"
                },
                "bandolier_name": {
                    "type": "string"
                },
                "bandolier_slot": {
                    "type": "integer"
                },
                "icon": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterBind": {
            "type": "object",
            "properties": {
                "heading": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterBuff": {
            "type": "object",
            "properties": {
                "caster_level": {
                    "type": "integer"
                },
                "caster_name": {
                    "type": "string"
                },
                "caston_x": {
                    "type": "integer"
                },
                "caston_y": {
                    "type": "integer"
                },
                "caston_z": {
                    "type": "integer"
                },
                "character_id": {
                    "type": "integer"
                },
                "counters": {
                    "type": "integer"
                },
                "dot_rune": {
                    "type": "integer"
                },
                "extra_di_chance": {
                    "type": "integer"
                },
                "instrument_mod": {
                    "type": "integer"
                },
                "magic_rune": {
                    "type": "integer"
                },
                "melee_rune": {
                    "type": "integer"
                },
                "numhits": {
                    "type": "integer"
                },
                "persistent": {
                    "type": "integer"
                },
                "slot_id": {
                    "type": "integer"
                },
                "spell_id": {
                    "type": "integer"
                },
                "ticsremaining": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterCorpse": {
            "type": "object",
            "properties": {
                "beard": {
                    "type": "integer"
                },
                "beard_color": {
                    "type": "integer"
                },
                "charid": {
                    "type": "integer"
                },
                "charname": {
                    "type": "string"
                },
                "class": {
                    "type": "integer"
                },
                "copper": {
                    "type": "integer"
                },
                "deity": {
                    "type": "integer"
                },
                "drakkin_details": {
                    "type": "integer"
                },
                "drakkin_heritage": {
                    "type": "integer"
                },
                "drakkin_tattoo": {
                    "type": "integer"
                },
                "exp": {
                    "type": "integer"
                },
                "eye_color_1": {
                    "type": "integer"
                },
                "eye_color_2": {
                    "type": "integer"
                },
                "face": {
                    "type": "integer"
                },
                "gender": {
                    "type": "integer"
                },
                "gold": {
                    "type": "integer"
                },
                "guild_consent_id": {
                    "type": "integer"
                },
                "hair_color": {
                    "type": "integer"
                },
                "hair_style": {
                    "type": "integer"
                },
                "heading": {
                    "type": "number"
                },
                "helm_texture": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "is_buried": {
                    "type": "integer"
                },
                "is_locked": {
                    "type": "integer"
                },
                "is_rezzed": {
                    "type": "integer"
                },
                "level": {
                    "type": "integer"
                },
                "platinum": {
                    "type": "integer"
                },
                "race": {
                    "type": "integer"
                },
                "silver": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "texture": {
                    "type": "integer"
                },
                "time_of_death": {
                    "type": "string"
                },
                "was_at_graveyard": {
                    "type": "integer"
                },
                "wc_1": {
                    "type": "integer"
                },
                "wc_2": {
                    "type": "integer"
                },
                "wc_3": {
                    "type": "integer"
                },
                "wc_4": {
                    "type": "integer"
                },
                "wc_5": {
                    "type": "integer"
                },
                "wc_6": {
                    "type": "integer"
                },
                "wc_7": {
                    "type": "integer"
                },
                "wc_8": {
                    "type": "integer"
                },
                "wc_9": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterCurrency": {
            "type": "object",
            "properties": {
                "career_ebon_crystals": {
                    "type": "integer"
                },
                "career_radiant_crystals": {
                    "type": "integer"
                },
                "copper": {
                    "type": "integer"
                },
                "copper_bank": {
                    "type": "integer"
                },
                "copper_cursor": {
                    "type": "integer"
                },
                "ebon_crystals": {
                    "type": "integer"
                },
                "gold": {
                    "type": "integer"
                },
                "gold_bank": {
                    "type": "integer"
                },
                "gold_cursor": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "platinum": {
                    "type": "integer"
                },
                "platinum_bank": {
                    "type": "integer"
                },
                "platinum_cursor": {
                    "type": "integer"
                },
                "radiant_crystals": {
                    "type": "integer"
                },
                "silver": {
                    "type": "integer"
                },
                "silver_bank": {
                    "type": "integer"
                },
                "silver_cursor": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterDatum": {
            "type": "object",
            "properties": {
                "aa_exp": {
                    "type": "integer"
                },
                "aa_points": {
                    "type": "integer"
                },
                "aa_points_old": {
                    "type": "integer"
                },
                "aa_points_spent": {
                    "type": "integer"
                },
                "aa_points_spent_old": {
                    "type": "integer"
                },
                "ability_number": {
                    "type": "integer"
                },
                "ability_time_hours": {
                    "type": "integer"
                },
                "ability_time_minutes": {
                    "type": "integer"
                },
                "ability_time_seconds": {
                    "type": "integer"
                },
                "ability_up": {
                    "type": "integer"
                },
                "account_id": {
                    "type": "integer"
                },
                "adventure_stats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AdventureStat"
                    }
                },
                "agi": {
                    "type": "integer"
                },
                "air_remaining": {
                    "type": "integer"
                },
                "anon": {
                    "type": "integer"
                },
                "autosplit_enabled": {
                    "type": "integer"
                },
                "beard": {
                    "type": "integer"
                },
                "beard_color": {
                    "type": "integer"
                },
                "birthday": {
                    "type": "integer"
                },
                "buyers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Buyer"
                    }
                },
                "career_tribute_points": {
                    "type": "integer"
                },
                "cha": {
                    "type": "integer"
                },
                "char_recipe_lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharRecipeList"
                    }
                },
                "character_activities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterActivity"
                    }
                },
                "character_alt_currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterAltCurrency"
                    }
                },
                "character_alternate_abilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterAlternateAbility"
                    }
                },
                "character_auras": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterAura"
                    }
                },
                "character_bandoliers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterBandolier"
                    }
                },
                "character_binds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterBind"
                    }
                },
                "character_buffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterBuff"
                    }
                },
                "character_corpses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterCorpse"
                    }
                },
                "character_currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterCurrency"
                    }
                },
                "character_disciplines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterDiscipline"
                    }
                },
                "character_enabledtasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterEnabledtask"
                    }
                },
                "character_inspect_messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterInspectMessage"
                    }
                },
                "character_item_recasts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterItemRecast"
                    }
                },
                "character_languages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterLanguage"
                    }
                },
                "character_leadership_abilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterLeadershipAbility"
                    }
                },
                "character_materials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterMaterial"
                    }
                },
                "character_memmed_spells": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterMemmedSpell"
                    }
                },
                "character_pet_buffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterPetBuff"
                    }
                },
                "character_pet_infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterPetInfo"
                    }
                },
                "character_pet_inventories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterPetInventory"
                    }
                },
                "character_potionbelts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterPotionbelt"
                    }
                },
                "character_skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterSkill"
                    }
                },
                "character_spells": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterSpell"
                    }
                },
                "character_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterTask"
                    }
                },
                "character_tributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CharacterTribute"
                    }
                },
                "class": {
                    "type": "integer"
                },
                "completed_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CompletedTask"
                    }
                },
                "cur_hp": {
                    "type": "integer"
                },
                "data_buckets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DataBucket"
                    }
                },
                "deity": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "string"
                },
                "dex": {
                    "type": "integer"
                },
                "drakkin_details": {
                    "type": "integer"
                },
                "drakkin_heritage": {
                    "type": "integer"
                },
                "drakkin_tattoo": {
                    "type": "integer"
                },
                "e_aa_effects": {
                    "type": "integer"
                },
                "e_expended_aa_spent": {
                    "type": "integer"
                },
                "e_last_invsnapshot": {
                    "type": "integer"
                },
                "e_percent_to_aa": {
                    "type": "integer"
                },
                "endurance": {
                    "type": "integer"
                },
                "exp": {
                    "type": "integer"
                },
                "eye_color_1": {
                    "type": "integer"
                },
                "eye_color_2": {
                    "type": "integer"
                },
                "face": {
                    "type": "integer"
                },
                "faction_values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FactionValue"
                    }
                },
                "firstlogon": {
                    "type": "integer"
                },
                "friends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Friend"
                    }
                },
                "gender": {
                    "type": "integer"
                },
                "gm": {
                    "type": "integer"
                },
                "group_auto_consent": {
                    "type": "integer"
                },
                "group_leadership_exp": {
                    "type": "integer"
                },
                "group_leadership_points": {
                    "type": "integer"
                },
                "guild": {
                    "$ref": "#/definitions/models.Guild"
                },
                "guild_auto_consent": {
                    "type": "integer"
                },
                "guild_members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GuildMember"
                    }
                },
                "hair_color": {
                    "type": "integer"
                },
                "hair_style": {
                    "type": "integer"
                },
                "heading": {
                    "type": "number"
                },
                "hunger_level": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_list_players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InstanceListPlayer"
                    }
                },
                "int": {
                    "type": "integer"
                },
                "intoxication": {
                    "type": "integer"
                },
                "inventories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Inventory"
                    }
                },
                "keyrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Keyring"
                    }
                },
                "last_login": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "ldon_points_available": {
                    "type": "integer"
                },
                "ldon_points_guk": {
                    "type": "integer"
                },
                "ldon_points_mir": {
                    "type": "integer"
                },
                "ldon_points_mmc": {
                    "type": "integer"
                },
                "ldon_points_ruj": {
                    "type": "integer"
                },
                "ldon_points_tak": {
                    "type": "integer"
                },
                "leadership_exp_on": {
                    "type": "integer"
                },
                "level": {
                    "type": "integer"
                },
                "level_2": {
                    "type": "integer"
                },
                "lfg": {
                    "type": "integer"
                },
                "lfp": {
                    "type": "integer"
                },
                "mail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Mail"
                    }
                },
                "mailkey": {
                    "type": "string"
                },
                "mana": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "player_titlesets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PlayerTitleset"
                    }
                },
                "points": {
                    "type": "integer"
                },
                "pvp_2": {
                    "type": "integer"
                },
                "pvp_best_kill_streak": {
                    "type": "integer"
                },
                "pvp_career_points": {
                    "type": "integer"
                },
                "pvp_current_kill_streak": {
                    "type": "integer"
                },
                "pvp_current_points": {
                    "type": "integer"
                },
                "pvp_deaths": {
                    "type": "integer"
                },
                "pvp_kills": {
                    "type": "integer"
                },
                "pvp_status": {
                    "type": "integer"
                },
                "pvp_type": {
                    "type": "integer"
                },
                "pvp_worst_death_streak": {
                    "type": "integer"
                },
                "quest_globals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.QuestGlobal"
                    }
                },
                "race": {
                    "type": "integer"
                },
                "raid_auto_consent": {
                    "type": "integer"
                },
                "raid_leadership_exp": {
                    "type": "integer"
                },
                "raid_leadership_points": {
                    "type": "integer"
                },
                "rest_timer": {
                    "type": "integer"
                },
                "show_helm": {
                    "type": "integer"
                },
                "sta": {
                    "type": "integer"
                },
                "str": {
                    "type": "integer"
                },
                "suffix": {
                    "type": "string"
                },
                "thirst_level": {
                    "type": "integer"
                },
                "time_played": {
                    "type": "integer"
                },
                "timers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Timer"
                    }
                },
                "title": {
                    "type": "string"
                },
                "titles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Title"
                    }
                },
                "toxicity": {
                    "type": "integer"
                },
                "traders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Trader"
                    }
                },
                "tribute_active": {
                    "type": "integer"
                },
                "tribute_points": {
                    "type": "integer"
                },
                "tribute_time_remaining": {
                    "type": "integer"
                },
                "wis": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "xtargets": {
                    "type": "integer"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zone_change_count": {
                    "type": "integer"
                },
                "zone_flags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ZoneFlag"
                    }
                },
                "zone_id": {
                    "type": "integer"
                },
                "zone_instance": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterDiscipline": {
            "type": "object",
            "properties": {
                "disc_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "slot_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterEnabledtask": {
            "type": "object",
            "properties": {
                "charid": {
                    "type": "integer"
                },
                "taskid": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterExpeditionLockout": {
            "type": "object",
            "properties": {
                "character_id": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "event_name": {
                    "type": "string"
                },
                "expedition_name": {
                    "type": "string"
                },
                "expire_time": {
                    "type": "string"
                },
                "from_expedition_uuid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterInspectMessage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "inspect_message": {
                    "type": "string"
                }
            }
        },
        "models.CharacterItemRecast": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "recast_type": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterLanguage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "lang_id": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterLeadershipAbility": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterMaterial": {
            "type": "object",
            "properties": {
                "blue": {
                    "type": "integer"
                },
                "color": {
                    "type": "integer"
                },
                "green": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "red": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "use_tint": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterMemmedSpell": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "slot_id": {
                    "type": "integer"
                },
                "spell_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterPetBuff": {
            "type": "object",
            "properties": {
                "caster_level": {
                    "type": "integer"
                },
                "castername": {
                    "type": "string"
                },
                "char_id": {
                    "type": "integer"
                },
                "counters": {
                    "type": "integer"
                },
                "instrument_mod": {
                    "type": "integer"
                },
                "numhits": {
                    "type": "integer"
                },
                "pet": {
                    "type": "integer"
                },
                "rune": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "spell_id": {
                    "type": "integer"
                },
                "ticsremaining": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterPetInfo": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "hp": {
                    "type": "integer"
                },
                "mana": {
                    "type": "integer"
                },
                "pet": {
                    "type": "integer"
                },
                "petname": {
                    "type": "string"
                },
                "petpower": {
                    "type": "integer"
                },
                "size": {
                    "type": "number"
                },
                "spell_id": {
                    "type": "integer"
                },
                "taunting": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterPetInventory": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "pet": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterPotionbelt": {
            "type": "object",
            "properties": {
                "icon": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "potion_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterSkill": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "skill_id": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterSpell": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "slot_id": {
                    "type": "integer"
                },
                "spell_id": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterTask": {
            "type": "object",
            "properties": {
                "acceptedtime": {
                    "type": "integer"
                },
                "charid": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "taskid": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.CharacterTribute": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "tier": {
                    "type": "integer"
                },
                "tribute": {
                    "type": "integer"
                }
            }
        },
        "models.CompletedTask": {
            "type": "object",
            "properties": {
                "activityid": {
                    "type": "integer"
                },
                "charid": {
                    "type": "integer"
                },
                "completedtime": {
                    "type": "integer"
                },
                "taskid": {
                    "type": "integer"
                }
            }
        },
        "models.ContentFlag": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "integer"
                },
                "flag_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                }
            }
        },
        "models.Damageshieldtype": {
            "type": "object",
            "properties": {
                "spellid": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.DataBucket": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.DbStr": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.DiscoveredItem": {
            "type": "object",
            "properties": {
                "account_status": {
                    "type": "integer"
                },
                "char_name": {
                    "type": "string"
                },
                "discovered_date": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                }
            }
        },
        "models.Door": {
            "type": "object",
            "properties": {
                "buffer": {
                    "type": "number"
                },
                "client_version_mask": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "dest_heading": {
                    "type": "number"
                },
                "dest_instance": {
                    "type": "integer"
                },
                "dest_x": {
                    "type": "number"
                },
                "dest_y": {
                    "type": "number"
                },
                "dest_z": {
                    "type": "number"
                },
                "dest_zone": {
                    "type": "string"
                },
                "disable_timer": {
                    "type": "integer"
                },
                "door_param": {
                    "type": "integer"
                },
                "doorid": {
                    "type": "integer"
                },
                "doorisopen": {
                    "type": "integer"
                },
                "guild": {
                    "type": "integer"
                },
                "heading": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "incline": {
                    "type": "integer"
                },
                "invert_state": {
                    "type": "integer"
                },
                "is_ldon_door": {
                    "type": "integer"
                },
                "keyitem": {
                    "type": "integer"
                },
                "lockpick": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nokeyring": {
                    "type": "integer"
                },
                "opentype": {
                    "type": "integer"
                },
                "pos_x": {
                    "type": "number"
                },
                "pos_y": {
                    "type": "number"
                },
                "pos_z": {
                    "type": "number"
                },
                "size": {
                    "type": "integer"
                },
                "triggerdoor": {
                    "type": "integer"
                },
                "triggertype": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.DynamicZone": {
            "type": "object",
            "properties": {
                "compass_x": {
                    "type": "number"
                },
                "compass_y": {
                    "type": "number"
                },
                "compass_z": {
                    "type": "number"
                },
                "compass_zone_id": {
                    "type": "integer"
                },
                "has_zone_in": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "safe_return_heading": {
                    "type": "number"
                },
                "safe_return_x": {
                    "type": "number"
                },
                "safe_return_y": {
                    "type": "number"
                },
                "safe_return_z": {
                    "type": "number"
                },
                "safe_return_zone_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                },
                "zone_in_heading": {
                    "type": "number"
                },
                "zone_in_x": {
                    "type": "number"
                },
                "zone_in_y": {
                    "type": "number"
                },
                "zone_in_z": {
                    "type": "number"
                }
            }
        },
        "models.Eventlog": {
            "type": "object",
            "properties": {
                "accountid": {
                    "type": "integer"
                },
                "accountname": {
                    "type": "string"
                },
                "charname": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "descriptiontype": {
                    "type": "string"
                },
                "event_nid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "target": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "models.Expedition": {
            "type": "object",
            "properties": {
                "add_replay_on_join": {
                    "type": "integer"
                },
                "dynamic_zone_id": {
                    "type": "integer"
                },
                "expedition_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_locked": {
                    "type": "integer"
                },
                "leader_id": {
                    "type": "integer"
                },
                "max_players": {
                    "type": "integer"
                },
                "min_players": {
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.ExpeditionLockout": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "event_name": {
                    "type": "string"
                },
                "expedition_id": {
                    "type": "integer"
                },
                "expire_time": {
                    "type": "string"
                },
                "from_expedition_uuid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.ExpeditionMember": {
            "type": "object",
            "properties": {
                "character_id": {
                    "type": "integer"
                },
                "expedition_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_current_member": {
                    "type": "integer"
                }
            }
        },
        "models.FactionList": {
            "type": "object",
            "properties": {
                "base": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.FactionListMod": {
            "type": "object",
            "properties": {
                "faction_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "mod": {
                    "type": "integer"
                },
                "mod_name": {
                    "type": "string"
                }
            }
        },
        "models.FactionValue": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "current_value": {
                    "type": "integer"
                },
                "faction_id": {
                    "type": "integer"
                },
                "temp": {
                    "type": "integer"
                }
            }
        },
        "models.Fishing": {
            "type": "object",
            "properties": {
                "chance": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "itemid": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "npc_chance": {
                    "type": "integer"
                },
                "npc_id": {
                    "type": "integer"
                },
                "skill_level": {
                    "type": "integer"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.Forage": {
            "type": "object",
            "properties": {
                "chance": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "itemid": {
                    "type": "integer"
                },
                "level": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.Friend": {
            "type": "object",
            "properties": {
                "charid": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.GlobalLoot": {
            "type": "object",
            "properties": {
                "bodytype": {
                    "type": "string"
                },
                "class": {
                    "type": "string"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "integer"
                },
                "hot_zone": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "loottable_id": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "max_level": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "min_level": {
                    "type": "integer"
                },
                "race": {
                    "type": "string"
                },
                "raid": {
                    "type": "integer"
                },
                "rare": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.Goallist": {
            "type": "object",
            "properties": {
                "entry": {
                    "type": "integer"
                },
                "listid": {
                    "type": "integer"
                }
            }
        },
        "models.Graveyard": {
            "type": "object",
            "properties": {
                "heading": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.Grid": {
            "type": "object",
            "properties": {
                "grid_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GridEntry"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                },
                "type_2": {
                    "type": "integer"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.GridEntry": {
            "type": "object",
            "properties": {
                "centerpoint": {
                    "type": "integer"
                },
                "gridid": {
                    "type": "integer"
                },
                "heading": {
                    "type": "number"
                },
                "number": {
                    "type": "integer"
                },
                "pause": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.GroundSpawn": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "heading": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "item": {
                    "type": "integer"
                },
                "max_allowed": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "max_x": {
                    "type": "number"
                },
                "max_y": {
                    "type": "number"
                },
                "max_z": {
                    "type": "number"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "min_x": {
                    "type": "number"
                },
                "min_y": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "respawn_timer": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.Guild": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "guild_banks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GuildBank"
                    }
                },
                "guild_members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GuildMember"
                    }
                },
                "guild_ranks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GuildRank"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "leader": {
                    "type": "integer"
                },
                "minstatus": {
                    "type": "integer"
                },
                "motd": {
                    "type": "string"
                },
                "motd_setter": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tribute": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.GuildBank": {
            "type": "object",
            "properties": {
                "area": {
                    "type": "integer"
                },
                "donator": {
                    "type": "string"
                },
                "guildid": {
                    "type": "integer"
                },
                "itemid": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "integer"
                },
                "qty": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "whofor": {
                    "type": "string"
                }
            }
        },
        "models.GuildMember": {
            "type": "object",
            "properties": {
                "alt": {
                    "type": "integer"
                },
                "banker": {
                    "type": "integer"
                },
                "char_id": {
                    "type": "integer"
                },
                "guild_id": {
                    "type": "integer"
                },
                "last_tribute": {
                    "type": "integer"
                },
                "public_note": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                },
                "total_tribute": {
                    "type": "integer"
                },
                "tribute_enable": {
                    "type": "integer"
                }
            }
        },
        "models.GuildRank": {
            "type": "object",
            "properties": {
                "can_demote": {
                    "type": "integer"
                },
                "can_hear": {
                    "type": "integer"
                },
                "can_invite": {
                    "type": "integer"
                },
                "can_motd": {
                    "type": "integer"
                },
                "can_promote": {
                    "type": "integer"
                },
                "can_remove": {
                    "type": "integer"
                },
                "can_speak": {
                    "type": "integer"
                },
                "can_warpeace": {
                    "type": "integer"
                },
                "guild_id": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Hacker": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "hacked": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.InstanceList": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_list_players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InstanceListPlayer"
                    }
                },
                "is_global": {
                    "type": "integer"
                },
                "never_expires": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "zone": {
                    "type": "integer"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Zone"
                    }
                }
            }
        },
        "models.InstanceListPlayer": {
            "type": "object",
            "properties": {
                "charid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Inventory": {
            "type": "object",
            "properties": {
                "augslot_1": {
                    "type": "integer"
                },
                "augslot_2": {
                    "type": "integer"
                },
                "augslot_3": {
                    "type": "integer"
                },
                "augslot_4": {
                    "type": "integer"
                },
                "augslot_5": {
                    "type": "integer"
                },
                "augslot_6": {
                    "type": "integer"
                },
                "charges": {
                    "type": "integer"
                },
                "charid": {
                    "type": "integer"
                },
                "color": {
                    "type": "integer"
                },
                "custom_data": {
                    "type": "string"
                },
                "instnodrop": {
                    "type": "integer"
                },
                "item": {
                    "$ref": "#/definitions/models.Item"
                },
                "itemid": {
                    "type": "integer"
                },
                "ornament_hero_model": {
                    "type": "integer"
                },
                "ornamenticon": {
                    "type": "integer"
                },
                "ornamentidfile": {
                    "type": "integer"
                },
                "slotid": {
                    "type": "integer"
                }
            }
        },
        "models.Item": {
            "type": "object",
            "properties": {
                "aagi": {
                    "type": "integer"
                },
                "ac": {
                    "type": "integer"
                },
                "accuracy": {
                    "type": "integer"
                },
                "acha": {
                    "type": "integer"
                },
                "adex": {
                    "type": "integer"
                },
                "aint": {
                    "type": "integer"
                },
                "artifactflag": {
                    "type": "integer"
                },
                "asta": {
                    "type": "integer"
                },
                "astr": {
                    "type": "integer"
                },
                "attack": {
                    "type": "integer"
                },
                "attuneable": {
                    "type": "integer"
                },
                "augdistiller": {
                    "type": "integer"
                },
                "augrestrict": {
                    "type": "integer"
                },
                "augslot_1_type": {
                    "type": "integer"
                },
                "augslot_1_unk_2": {
                    "type": "integer"
                },
                "augslot_1_visible": {
                    "type": "integer"
                },
                "augslot_2_type": {
                    "type": "integer"
                },
                "augslot_2_unk_2": {
                    "type": "integer"
                },
                "augslot_2_visible": {
                    "type": "integer"
                },
                "augslot_3_type": {
                    "type": "integer"
                },
                "augslot_3_unk_2": {
                    "type": "integer"
                },
                "augslot_3_visible": {
                    "type": "integer"
                },
                "augslot_4_type": {
                    "type": "integer"
                },
                "augslot_4_unk_2": {
                    "type": "integer"
                },
                "augslot_4_visible": {
                    "type": "integer"
                },
                "augslot_5_type": {
                    "type": "integer"
                },
                "augslot_5_unk_2": {
                    "type": "integer"
                },
                "augslot_5_visible": {
                    "type": "integer"
                },
                "augslot_6_type": {
                    "type": "integer"
                },
                "augslot_6_unk_2": {
                    "type": "integer"
                },
                "augslot_6_visible": {
                    "type": "integer"
                },
                "augtype": {
                    "type": "integer"
                },
                "avoidance": {
                    "type": "integer"
                },
                "awis": {
                    "type": "integer"
                },
                "backstabdmg": {
                    "type": "integer"
                },
                "bagsize": {
                    "type": "integer"
                },
                "bagslots": {
                    "type": "integer"
                },
                "bagtype": {
                    "type": "integer"
                },
                "bagwr": {
                    "type": "integer"
                },
                "banedmgamt": {
                    "type": "integer"
                },
                "banedmgbody": {
                    "type": "integer"
                },
                "banedmgrace": {
                    "type": "integer"
                },
                "banedmgraceamt": {
                    "type": "integer"
                },
                "bardeffect": {
                    "type": "integer"
                },
                "bardeffecttype": {
                    "type": "integer"
                },
                "bardlevel": {
                    "type": "integer"
                },
                "bardlevel_2": {
                    "type": "integer"
                },
                "bardname": {
                    "type": "string"
                },
                "bardtype": {
                    "type": "integer"
                },
                "bardunk_1": {
                    "type": "integer"
                },
                "bardunk_2": {
                    "type": "integer"
                },
                "bardunk_3": {
                    "type": "integer"
                },
                "bardunk_4": {
                    "type": "integer"
                },
                "bardunk_5": {
                    "type": "integer"
                },
                "bardunk_7": {
                    "type": "integer"
                },
                "bardvalue": {
                    "type": "integer"
                },
                "benefitflag": {
                    "type": "integer"
                },
                "book": {
                    "type": "integer"
                },
                "booktype": {
                    "type": "integer"
                },
                "casttime": {
                    "type": "integer"
                },
                "casttime_": {
                    "type": "integer"
                },
                "charmfile": {
                    "type": "string"
                },
                "charmfileid": {
                    "type": "string"
                },
                "clairvoyance": {
                    "type": "integer"
                },
                "classes": {
                    "type": "integer"
                },
                "clickeffect": {
                    "type": "integer"
                },
                "clicklevel": {
                    "type": "integer"
                },
                "clicklevel_2": {
                    "type": "integer"
                },
                "clickname": {
                    "type": "string"
                },
                "clicktype": {
                    "type": "integer"
                },
                "clickunk_5": {
                    "type": "integer"
                },
                "clickunk_6": {
                    "type": "string"
                },
                "clickunk_7": {
                    "type": "integer"
                },
                "color": {
                    "type": "integer"
                },
                "combateffects": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "cr": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "damage": {
                    "type": "integer"
                },
                "damageshield": {
                    "type": "integer"
                },
                "deity": {
                    "type": "integer"
                },
                "delay": {
                    "type": "integer"
                },
                "discovered_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DiscoveredItem"
                    }
                },
                "dotshielding": {
                    "type": "integer"
                },
                "dr": {
                    "type": "integer"
                },
                "dsmitigation": {
                    "type": "integer"
                },
                "elemdmgamt": {
                    "type": "integer"
                },
                "elemdmgtype": {
                    "type": "integer"
                },
                "elitematerial": {
                    "type": "integer"
                },
                "endur": {
                    "type": "integer"
                },
                "enduranceregen": {
                    "type": "integer"
                },
                "epicitem": {
                    "type": "integer"
                },
                "evoid": {
                    "type": "integer"
                },
                "evoitem": {
                    "type": "integer"
                },
                "evolvinglevel": {
                    "type": "integer"
                },
                "evomax": {
                    "type": "integer"
                },
                "expendablearrow": {
                    "type": "integer"
                },
                "extradmgamt": {
                    "type": "integer"
                },
                "extradmgskill": {
                    "type": "integer"
                },
                "factionamt_1": {
                    "type": "integer"
                },
                "factionamt_2": {
                    "type": "integer"
                },
                "factionamt_3": {
                    "type": "integer"
                },
                "factionamt_4": {
                    "type": "integer"
                },
                "factionmod_1": {
                    "type": "integer"
                },
                "factionmod_2": {
                    "type": "integer"
                },
                "factionmod_3": {
                    "type": "integer"
                },
                "factionmod_4": {
                    "type": "integer"
                },
                "favor": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "focuseffect": {
                    "type": "integer"
                },
                "focuslevel": {
                    "type": "integer"
                },
                "focuslevel_2": {
                    "type": "integer"
                },
                "focusname": {
                    "type": "string"
                },
                "focustype": {
                    "type": "integer"
                },
                "focusunk_1": {
                    "type": "integer"
                },
                "focusunk_2": {
                    "type": "integer"
                },
                "focusunk_3": {
                    "type": "integer"
                },
                "focusunk_4": {
                    "type": "integer"
                },
                "focusunk_5": {
                    "type": "integer"
                },
                "focusunk_6": {
                    "type": "string"
                },
                "focusunk_7": {
                    "type": "integer"
                },
                "fr": {
                    "type": "integer"
                },
                "fvnodrop": {
                    "type": "integer"
                },
                "guildfavor": {
                    "type": "integer"
                },
                "haste": {
                    "type": "integer"
                },
                "healamt": {
                    "type": "integer"
                },
                "heirloom": {
                    "type": "integer"
                },
                "heroic_agi": {
                    "type": "integer"
                },
                "heroic_cha": {
                    "type": "integer"
                },
                "heroic_cr": {
                    "type": "integer"
                },
                "heroic_dex": {
                    "type": "integer"
                },
                "heroic_dr": {
                    "type": "integer"
                },
                "heroic_fr": {
                    "type": "integer"
                },
                "heroic_int": {
                    "type": "integer"
                },
                "heroic_mr": {
                    "type": "integer"
                },
                "heroic_pr": {
                    "type": "integer"
                },
                "heroic_sta": {
                    "type": "integer"
                },
                "heroic_str": {
                    "type": "integer"
                },
                "heroic_svcorrup": {
                    "type": "integer"
                },
                "heroic_wis": {
                    "type": "integer"
                },
                "herosforgemodel": {
                    "type": "integer"
                },
                "hp": {
                    "type": "integer"
                },
                "icon": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "idfile": {
                    "type": "string"
                },
                "itemclass": {
                    "type": "integer"
                },
                "itemtype": {
                    "type": "integer"
                },
                "ldonprice": {
                    "type": "integer"
                },
                "ldonsellbackrate": {
                    "type": "integer"
                },
                "ldonsold": {
                    "type": "integer"
                },
                "ldontheme": {
                    "type": "integer"
                },
                "light": {
                    "type": "integer"
                },
                "lore": {
                    "type": "string"
                },
                "lorefile": {
                    "type": "string"
                },
                "loregroup": {
                    "type": "integer"
                },
                "magic": {
                    "type": "integer"
                },
                "mana": {
                    "type": "integer"
                },
                "manaregen": {
                    "type": "integer"
                },
                "material": {
                    "type": "integer"
                },
                "maxcharges": {
                    "type": "integer"
                },
                "minstatus": {
                    "type": "integer"
                },
                "mr": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodrop": {
                    "type": "integer"
                },
                "nopet": {
                    "type": "integer"
                },
                "norent": {
                    "type": "integer"
                },
                "notransfer": {
                    "type": "integer"
                },
                "pendingloreflag": {
                    "type": "integer"
                },
                "placeable": {
                    "type": "integer"
                },
                "pointtype": {
                    "type": "integer"
                },
                "potionbelt": {
                    "type": "integer"
                },
                "potionbeltslots": {
                    "type": "integer"
                },
                "powersourcecapacity": {
                    "type": "integer"
                },
                "pr": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "proceffect": {
                    "type": "integer"
                },
                "proclevel": {
                    "type": "integer"
                },
                "proclevel_2": {
                    "type": "integer"
                },
                "procname": {
                    "type": "string"
                },
                "procrate": {
                    "type": "integer"
                },
                "proctype": {
                    "type": "integer"
                },
                "procunk_1": {
                    "type": "integer"
                },
                "procunk_2": {
                    "type": "integer"
                },
                "procunk_3": {
                    "type": "integer"
                },
                "procunk_4": {
                    "type": "integer"
                },
                "procunk_6": {
                    "type": "string"
                },
                "procunk_7": {
                    "type": "integer"
                },
                "purity": {
                    "type": "integer"
                },
                "questitemflag": {
                    "type": "integer"
                },
                "races": {
                    "type": "integer"
                },
                "range": {
                    "type": "integer"
                },
                "recastdelay": {
                    "type": "integer"
                },
                "recasttype": {
                    "type": "integer"
                },
                "reclevel": {
                    "type": "integer"
                },
                "recskill": {
                    "type": "integer"
                },
                "regen": {
                    "type": "integer"
                },
                "reqlevel": {
                    "type": "integer"
                },
                "scriptfileid": {
                    "type": "integer"
                },
                "scrolleffect": {
                    "type": "integer"
                },
                "scrolllevel": {
                    "type": "integer"
                },
                "scrolllevel_2": {
                    "type": "integer"
                },
                "scrollname": {
                    "type": "string"
                },
                "scrolltype": {
                    "type": "integer"
                },
                "scrollunk_1": {
                    "type": "integer"
                },
                "scrollunk_2": {
                    "type": "integer"
                },
                "scrollunk_3": {
                    "type": "integer"
                },
                "scrollunk_4": {
                    "type": "integer"
                },
                "scrollunk_5": {
                    "type": "integer"
                },
                "scrollunk_6": {
                    "type": "string"
                },
                "scrollunk_7": {
                    "type": "integer"
                },
                "sellrate": {
                    "type": "number"
                },
                "serialization": {
                    "type": "string"
                },
                "serialized": {
                    "type": "string"
                },
                "shielding": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "skillmodmax": {
                    "type": "integer"
                },
                "skillmodtype": {
                    "type": "integer"
                },
                "skillmodvalue": {
                    "type": "integer"
                },
                "slots": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "spelldmg": {
                    "type": "integer"
                },
                "spellshield": {
                    "type": "integer"
                },
                "stackable": {
                    "type": "integer"
                },
                "stacksize": {
                    "type": "integer"
                },
                "strikethrough": {
                    "type": "integer"
                },
                "stunresist": {
                    "type": "integer"
                },
                "subtype": {
                    "type": "integer"
                },
                "summonedflag": {
                    "type": "integer"
                },
                "svcorruption": {
                    "type": "integer"
                },
                "tradeskills": {
                    "type": "integer"
                },
                "unk_012": {
                    "type": "integer"
                },
                "unk_013": {
                    "type": "integer"
                },
                "unk_014": {
                    "type": "integer"
                },
                "unk_033": {
                    "type": "integer"
                },
                "unk_054": {
                    "type": "integer"
                },
                "unk_059": {
                    "type": "integer"
                },
                "unk_060": {
                    "type": "integer"
                },
                "unk_120": {
                    "type": "integer"
                },
                "unk_121": {
                    "type": "integer"
                },
                "unk_123": {
                    "type": "integer"
                },
                "unk_124": {
                    "type": "integer"
                },
                "unk_127": {
                    "type": "integer"
                },
                "unk_132": {
                    "type": "string"
                },
                "unk_134": {
                    "type": "string"
                },
                "unk_137": {
                    "type": "integer"
                },
                "unk_142": {
                    "type": "integer"
                },
                "unk_147": {
                    "type": "integer"
                },
                "unk_152": {
                    "type": "integer"
                },
                "unk_157": {
                    "type": "integer"
                },
                "unk_193": {
                    "type": "integer"
                },
                "unk_214": {
                    "type": "integer"
                },
                "unk_220": {
                    "type": "integer"
                },
                "unk_221": {
                    "type": "integer"
                },
                "unk_223": {
                    "type": "integer"
                },
                "unk_224": {
                    "type": "integer"
                },
                "unk_225": {
                    "type": "integer"
                },
                "unk_226": {
                    "type": "integer"
                },
                "unk_227": {
                    "type": "integer"
                },
                "unk_228": {
                    "type": "integer"
                },
                "unk_229": {
                    "type": "integer"
                },
                "unk_230": {
                    "type": "integer"
                },
                "unk_231": {
                    "type": "integer"
                },
                "unk_232": {
                    "type": "integer"
                },
                "unk_233": {
                    "type": "integer"
                },
                "unk_234": {
                    "type": "integer"
                },
                "unk_236": {
                    "type": "integer"
                },
                "unk_237": {
                    "type": "integer"
                },
                "unk_238": {
                    "type": "integer"
                },
                "unk_239": {
                    "type": "integer"
                },
                "unk_240": {
                    "type": "integer"
                },
                "unk_241": {
                    "type": "integer"
                },
                "updated": {
                    "type": "string"
                },
                "verified": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                },
                "worneffect": {
                    "type": "integer"
                },
                "wornlevel": {
                    "type": "integer"
                },
                "wornlevel_2": {
                    "type": "integer"
                },
                "wornname": {
                    "type": "string"
                },
                "worntype": {
                    "type": "integer"
                },
                "wornunk_1": {
                    "type": "integer"
                },
                "wornunk_2": {
                    "type": "integer"
                },
                "wornunk_3": {
                    "type": "integer"
                },
                "wornunk_4": {
                    "type": "integer"
                },
                "wornunk_5": {
                    "type": "integer"
                },
                "wornunk_6": {
                    "type": "string"
                },
                "wornunk_7": {
                    "type": "integer"
                }
            }
        },
        "models.Keyring": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                }
            }
        },
        "models.LdonTrapEntry": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "trap_id": {
                    "type": "integer"
                }
            }
        },
        "models.LdonTrapTemplate": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "locked": {
                    "type": "integer"
                },
                "skill": {
                    "type": "integer"
                },
                "spell_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.LoginAccount": {
            "type": "object",
            "properties": {
                "account_email": {
                    "type": "string"
                },
                "account_name": {
                    "type": "string"
                },
                "account_password": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_ip_address": {
                    "type": "string"
                },
                "last_login_date": {
                    "type": "string"
                },
                "source_loginserver": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.LoginApiToken": {
            "type": "object",
            "properties": {
                "can_read": {
                    "type": "integer"
                },
                "can_write": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.LoginServerAdmin": {
            "type": "object",
            "properties": {
                "account_name": {
                    "type": "string"
                },
                "account_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "registration_date": {
                    "type": "string"
                },
                "registration_ip_address": {
                    "type": "string"
                }
            }
        },
        "models.LoginServerListType": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.LoginWorldServer": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_server_trusted": {
                    "type": "integer"
                },
                "last_ip_address": {
                    "type": "string"
                },
                "last_login_date": {
                    "type": "string"
                },
                "login_server_admin_id": {
                    "type": "integer"
                },
                "login_server_list_type_id": {
                    "type": "integer"
                },
                "long_name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "short_name": {
                    "type": "string"
                },
                "tag_description": {
                    "type": "string"
                }
            }
        },
        "models.Lootdrop": {
            "type": "object",
            "properties": {
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lootdrop_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LootdropEntry"
                    }
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.LootdropEntry": {
            "type": "object",
            "properties": {
                "chance": {
                    "type": "number"
                },
                "disabled_chance": {
                    "type": "number"
                },
                "equip_item": {
                    "type": "integer"
                },
                "item": {
                    "$ref": "#/definitions/models.Item"
                },
                "item_charges": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "lootdrop_id": {
                    "type": "integer"
                },
                "multiplier": {
                    "type": "integer"
                },
                "npc_max_level": {
                    "type": "integer"
                },
                "npc_min_level": {
                    "type": "integer"
                },
                "trivial_max_level": {
                    "type": "integer"
                },
                "trivial_min_level": {
                    "type": "integer"
                }
            }
        },
        "models.Loottable": {
            "type": "object",
            "properties": {
                "avgcoin": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "done": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "loottable_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LoottableEntry"
                    }
                },
                "max_expansion": {
                    "type": "integer"
                },
                "maxcash": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "mincash": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.LoottableEntry": {
            "type": "object",
            "properties": {
                "droplimit": {
                    "type": "integer"
                },
                "lootdrop_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LootdropEntry"
                    }
                },
                "lootdrop_id": {
                    "type": "integer"
                },
                "loottable_id": {
                    "type": "integer"
                },
                "mindrop": {
                    "type": "integer"
                },
                "multiplier": {
                    "type": "integer"
                },
                "probability": {
                    "type": "number"
                }
            }
        },
        "models.Mail": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "charid": {
                    "type": "integer"
                },
                "from": {
                    "type": "string"
                },
                "msgid": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "models.Merchantlist": {
            "type": "object",
            "properties": {
                "alt_currency_cost": {
                    "type": "integer"
                },
                "classes_required": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "faction_required": {
                    "type": "integer"
                },
                "item": {
                    "type": "integer"
                },
                "level_required": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "merchantid": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "probability": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                }
            }
        },
        "models.NameFilter": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.NpcEmote": {
            "type": "object",
            "properties": {
                "emoteid": {
                    "type": "integer"
                },
                "event_": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.NpcFaction": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "ignore_primary_assist": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "npc_faction_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NpcFactionEntry"
                    }
                },
                "primaryfaction": {
                    "type": "integer"
                }
            }
        },
        "models.NpcFactionEntry": {
            "type": "object",
            "properties": {
                "faction_id": {
                    "type": "integer"
                },
                "npc_faction_id": {
                    "type": "integer"
                },
                "npc_value": {
                    "type": "integer"
                },
                "temp": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "models.NpcSpell": {
            "type": "object",
            "properties": {
                "attack_proc": {
                    "type": "integer"
                },
                "defensive_proc": {
                    "type": "integer"
                },
                "dproc_chance": {
                    "type": "integer"
                },
                "engaged_b_other_chance": {
                    "type": "integer"
                },
                "engaged_b_self_chance": {
                    "type": "integer"
                },
                "engaged_d_chance": {
                    "type": "integer"
                },
                "engaged_no_sp_recast_max": {
                    "type": "integer"
                },
                "engaged_no_sp_recast_min": {
                    "type": "integer"
                },
                "fail_recast": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "idle_b_chance": {
                    "type": "integer"
                },
                "idle_no_sp_recast_max": {
                    "type": "integer"
                },
                "idle_no_sp_recast_min": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "npc_spells_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NpcSpellsEntry"
                    }
                },
                "parent_list": {
                    "type": "integer"
                },
                "proc_chance": {
                    "type": "integer"
                },
                "pursue_d_chance": {
                    "type": "integer"
                },
                "pursue_no_sp_recast_max": {
                    "type": "integer"
                },
                "pursue_no_sp_recast_min": {
                    "type": "integer"
                },
                "range_proc": {
                    "type": "integer"
                },
                "rproc_chance": {
                    "type": "integer"
                }
            }
        },
        "models.NpcSpellsEffect": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "npc_spells_effects_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NpcSpellsEffectsEntry"
                    }
                },
                "parent_list": {
                    "type": "integer"
                }
            }
        },
        "models.NpcSpellsEffectsEntry": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "maxlevel": {
                    "type": "integer"
                },
                "minlevel": {
                    "type": "integer"
                },
                "npc_spells_effects_id": {
                    "type": "integer"
                },
                "se_base": {
                    "type": "integer"
                },
                "se_limit": {
                    "type": "integer"
                },
                "se_max": {
                    "type": "integer"
                },
                "spell_effect_id": {
                    "type": "integer"
                }
            }
        },
        "models.NpcSpellsEntry": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "manacost": {
                    "type": "integer"
                },
                "max_hp": {
                    "type": "integer"
                },
                "maxlevel": {
                    "type": "integer"
                },
                "min_hp": {
                    "type": "integer"
                },
                "minlevel": {
                    "type": "integer"
                },
                "npc_spells_id": {
                    "type": "integer"
                },
                "priority": {
                    "type": "integer"
                },
                "recast_delay": {
                    "type": "integer"
                },
                "resist_adjust": {
                    "type": "integer"
                },
                "spellid": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.NpcType": {
            "type": "object",
            "properties": {
                "_int": {
                    "type": "integer"
                },
                "ac": {
                    "type": "integer"
                },
                "accuracy": {
                    "type": "integer"
                },
                "adventure_template_id": {
                    "type": "integer"
                },
                "aggroradius": {
                    "type": "integer"
                },
                "agi": {
                    "type": "integer"
                },
                "alt_currency_id": {
                    "type": "integer"
                },
                "alternate_currency": {
                    "$ref": "#/definitions/models.AlternateCurrency"
                },
                "always_aggro": {
                    "type": "integer"
                },
                "ammo_idfile": {
                    "type": "string"
                },
                "armortint_blue": {
                    "type": "integer"
                },
                "armortint_green": {
                    "type": "integer"
                },
                "armortint_id": {
                    "type": "integer"
                },
                "armortint_red": {
                    "type": "integer"
                },
                "armtexture": {
                    "type": "integer"
                },
                "assistradius": {
                    "type": "integer"
                },
                "atk": {
                    "type": "integer"
                },
                "attack_count": {
                    "type": "integer"
                },
                "attack_delay": {
                    "type": "integer"
                },
                "attack_speed": {
                    "type": "number"
                },
                "avoidance": {
                    "type": "integer"
                },
                "bodytype": {
                    "type": "integer"
                },
                "bracertexture": {
                    "type": "integer"
                },
                "cha": {
                    "type": "integer"
                },
                "charm_ac": {
                    "type": "integer"
                },
                "charm_accuracy_rating": {
                    "type": "integer"
                },
                "charm_atk": {
                    "type": "integer"
                },
                "charm_attack_delay": {
                    "type": "integer"
                },
                "charm_avoidance_rating": {
                    "type": "integer"
                },
                "charm_max_dmg": {
                    "type": "integer"
                },
                "charm_min_dmg": {
                    "type": "integer"
                },
                "class": {
                    "type": "integer"
                },
                "corrup": {
                    "type": "integer"
                },
                "cr": {
                    "type": "integer"
                },
                "d_melee_texture_1": {
                    "type": "integer"
                },
                "d_melee_texture_2": {
                    "type": "integer"
                },
                "dex": {
                    "type": "integer"
                },
                "dr": {
                    "type": "integer"
                },
                "drakkin_details": {
                    "type": "integer"
                },
                "drakkin_heritage": {
                    "type": "integer"
                },
                "drakkin_tattoo": {
                    "type": "integer"
                },
                "emoteid": {
                    "type": "integer"
                },
                "exclude": {
                    "type": "integer"
                },
                "exp_mod": {
                    "type": "integer"
                },
                "face": {
                    "type": "integer"
                },
                "feettexture": {
                    "type": "integer"
                },
                "findable": {
                    "type": "integer"
                },
                "fixed": {
                    "type": "integer"
                },
                "flymode": {
                    "type": "integer"
                },
                "fr": {
                    "type": "integer"
                },
                "gender": {
                    "type": "integer"
                },
                "handtexture": {
                    "type": "integer"
                },
                "healscale": {
                    "type": "number"
                },
                "helmtexture": {
                    "type": "integer"
                },
                "herosforgemodel": {
                    "type": "integer"
                },
                "hp": {
                    "type": "integer"
                },
                "hp_regen_rate": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "ignore_despawn": {
                    "type": "integer"
                },
                "isbot": {
                    "type": "integer"
                },
                "isquest": {
                    "type": "integer"
                },
                "lastname": {
                    "type": "string"
                },
                "legtexture": {
                    "type": "integer"
                },
                "level": {
                    "type": "integer"
                },
                "light": {
                    "type": "integer"
                },
                "loottable_id": {
                    "type": "integer"
                },
                "luclin_beard": {
                    "type": "integer"
                },
                "luclin_beardcolor": {
                    "type": "integer"
                },
                "luclin_eyecolor": {
                    "type": "integer"
                },
                "luclin_eyecolor_2": {
                    "type": "integer"
                },
                "luclin_haircolor": {
                    "type": "integer"
                },
                "luclin_hairstyle": {
                    "type": "integer"
                },
                "mana": {
                    "type": "integer"
                },
                "mana_regen_rate": {
                    "type": "integer"
                },
                "maxdmg": {
                    "type": "integer"
                },
                "maxlevel": {
                    "type": "integer"
                },
                "merchant_id": {
                    "type": "integer"
                },
                "merchantlists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Merchantlist"
                    }
                },
                "mindmg": {
                    "type": "integer"
                },
                "model": {
                    "type": "integer"
                },
                "mr": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "no_target_hotkey": {
                    "type": "integer"
                },
                "npc_aggro": {
                    "type": "integer"
                },
                "npc_emotes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NpcEmote"
                    }
                },
                "npc_faction_id": {
                    "type": "integer"
                },
                "npc_factions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NpcFaction"
                    }
                },
                "npc_spells": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NpcSpell"
                    }
                },
                "npc_spells_effects_id": {
                    "type": "integer"
                },
                "npc_spells_id": {
                    "type": "integer"
                },
                "npc_types_tint": {
                    "$ref": "#/definitions/models.NpcTypesTint"
                },
                "npcspecialattks": {
                    "type": "string"
                },
                "peqid": {
                    "type": "integer"
                },
                "ph_r": {
                    "type": "integer"
                },
                "pr": {
                    "type": "integer"
                },
                "prim_melee_type": {
                    "type": "integer"
                },
                "private_corpse": {
                    "type": "integer"
                },
                "qglobal": {
                    "type": "integer"
                },
                "race": {
                    "type": "integer"
                },
                "raid_target": {
                    "type": "integer"
                },
                "ranged_type": {
                    "type": "integer"
                },
                "rare_spawn": {
                    "type": "integer"
                },
                "runspeed": {
                    "type": "number"
                },
                "scalerate": {
                    "type": "integer"
                },
                "sec_melee_type": {
                    "type": "integer"
                },
                "see_hide": {
                    "type": "integer"
                },
                "see_improved_hide": {
                    "type": "integer"
                },
                "see_invis": {
                    "type": "integer"
                },
                "see_invis_undead": {
                    "type": "integer"
                },
                "show_name": {
                    "type": "integer"
                },
                "size": {
                    "type": "number"
                },
                "skip_global_loot": {
                    "type": "integer"
                },
                "slow_mitigation": {
                    "type": "integer"
                },
                "spawn_limit": {
                    "type": "integer"
                },
                "spawnentries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Spawnentry"
                    }
                },
                "special_abilities": {
                    "type": "string"
                },
                "spellscale": {
                    "type": "number"
                },
                "sta": {
                    "type": "integer"
                },
                "str": {
                    "type": "integer"
                },
                "stuck_behavior": {
                    "type": "integer"
                },
                "texture": {
                    "type": "integer"
                },
                "trackable": {
                    "type": "integer"
                },
                "trap_template": {
                    "type": "integer"
                },
                "underwater": {
                    "type": "integer"
                },
                "unique_": {
                    "type": "integer"
                },
                "unique_spawn_by_name": {
                    "type": "integer"
                },
                "untargetable": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "walkspeed": {
                    "type": "integer"
                },
                "wis": {
                    "type": "integer"
                }
            }
        },
        "models.NpcTypesTint": {
            "type": "object",
            "properties": {
                "blu_1_h": {
                    "type": "integer"
                },
                "blu_2_c": {
                    "type": "integer"
                },
                "blu_3_a": {
                    "type": "integer"
                },
                "blu_4_b": {
                    "type": "integer"
                },
                "blu_5_g": {
                    "type": "integer"
                },
                "blu_6_l": {
                    "type": "integer"
                },
                "blu_7_f": {
                    "type": "integer"
                },
                "blu_8_x": {
                    "type": "integer"
                },
                "blu_9_x": {
                    "type": "integer"
                },
                "grn_1_h": {
                    "type": "integer"
                },
                "grn_2_c": {
                    "type": "integer"
                },
                "grn_3_a": {
                    "type": "integer"
                },
                "grn_4_b": {
                    "type": "integer"
                },
                "grn_5_g": {
                    "type": "integer"
                },
                "grn_6_l": {
                    "type": "integer"
                },
                "grn_7_f": {
                    "type": "integer"
                },
                "grn_8_x": {
                    "type": "integer"
                },
                "grn_9_x": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "red_1_h": {
                    "type": "integer"
                },
                "red_2_c": {
                    "type": "integer"
                },
                "red_3_a": {
                    "type": "integer"
                },
                "red_4_b": {
                    "type": "integer"
                },
                "red_5_g": {
                    "type": "integer"
                },
                "red_6_l": {
                    "type": "integer"
                },
                "red_7_f": {
                    "type": "integer"
                },
                "red_8_x": {
                    "type": "integer"
                },
                "red_9_x": {
                    "type": "integer"
                },
                "tint_set_name": {
                    "type": "string"
                }
            }
        },
        "models.Object": {
            "type": "object",
            "properties": {
                "charges": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "heading": {
                    "type": "number"
                },
                "icon": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "itemid": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "objectname": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                },
                "tilt_x": {
                    "type": "number"
                },
                "tilt_y": {
                    "type": "number"
                },
                "type": {
                    "type": "integer"
                },
                "unknown_08": {
                    "type": "integer"
                },
                "unknown_10": {
                    "type": "integer"
                },
                "unknown_20": {
                    "type": "integer"
                },
                "unknown_24": {
                    "type": "integer"
                },
                "unknown_60": {
                    "type": "integer"
                },
                "unknown_64": {
                    "type": "integer"
                },
                "unknown_68": {
                    "type": "integer"
                },
                "unknown_72": {
                    "type": "integer"
                },
                "unknown_76": {
                    "type": "integer"
                },
                "unknown_84": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "xpos": {
                    "type": "number"
                },
                "ypos": {
                    "type": "number"
                },
                "zoneid": {
                    "type": "integer"
                },
                "zpos": {
                    "type": "number"
                }
            }
        },
        "models.PlayerTitleset": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "title_set": {
                    "type": "integer"
                }
            }
        },
        "models.QuestGlobal": {
            "type": "object",
            "properties": {
                "charid": {
                    "type": "integer"
                },
                "expdate": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "npcid": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.Report": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "reported": {
                    "type": "string"
                },
                "reported_text": {
                    "type": "string"
                }
            }
        },
        "models.RespawnTime": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "start": {
                    "type": "integer"
                }
            }
        },
        "models.Saylink": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "phrase": {
                    "type": "string"
                }
            }
        },
        "models.ServerDatabaseConnection": {
            "type": "object",
            "properties": {
                "content_db_host": {
                    "type": "string"
                },
                "content_db_name": {
                    "type": "string"
                },
                "content_db_password": {
                    "type": "string"
                },
                "content_db_port": {
                    "type": "string"
                },
                "content_db_username": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "integer"
                },
                "created_from_ip": {
                    "type": "string"
                },
                "db_host": {
                    "type": "string"
                },
                "db_name": {
                    "type": "string"
                },
                "db_password": {
                    "type": "string"
                },
                "db_port": {
                    "type": "string"
                },
                "db_username": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ServerScheduledEvent": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "cron_expression": {
                    "type": "string"
                },
                "day_end": {
                    "type": "integer"
                },
                "day_start": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "event_data": {
                    "type": "string"
                },
                "event_type": {
                    "type": "string"
                },
                "hour_end": {
                    "type": "integer"
                },
                "hour_start": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "minute_end": {
                    "type": "integer"
                },
                "minute_start": {
                    "type": "integer"
                },
                "month_end": {
                    "type": "integer"
                },
                "month_start": {
                    "type": "integer"
                },
                "year_end": {
                    "type": "integer"
                },
                "year_start": {
                    "type": "integer"
                }
            }
        },
        "models.Sharedbank": {
            "type": "object",
            "properties": {
                "acctid": {
                    "type": "integer"
                },
                "augslot_1": {
                    "type": "integer"
                },
                "augslot_2": {
                    "type": "integer"
                },
                "augslot_3": {
                    "type": "integer"
                },
                "augslot_4": {
                    "type": "integer"
                },
                "augslot_5": {
                    "type": "integer"
                },
                "augslot_6": {
                    "type": "integer"
                },
                "charges": {
                    "type": "integer"
                },
                "custom_data": {
                    "type": "string"
                },
                "itemid": {
                    "type": "integer"
                },
                "slotid": {
                    "type": "integer"
                }
            }
        },
        "models.Spawn2": {
            "type": "object",
            "properties": {
                "_condition": {
                    "type": "integer"
                },
                "animation": {
                    "type": "integer"
                },
                "cond_value": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "enabled": {
                    "type": "integer"
                },
                "heading": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "path_when_zone_idle": {
                    "type": "integer"
                },
                "pathgrid": {
                    "type": "integer"
                },
                "respawntime": {
                    "type": "integer"
                },
                "spawnentries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Spawnentry"
                    }
                },
                "spawngroup": {
                    "$ref": "#/definitions/models.Spawngroup"
                },
                "spawngroup_id": {
                    "type": "integer"
                },
                "variance": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.SpawnCondition": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "onchange": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.SpawnConditionValue": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.SpawnEvent": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "integer"
                },
                "argument": {
                    "type": "integer"
                },
                "cond_id": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "next_day": {
                    "type": "integer"
                },
                "next_hour": {
                    "type": "integer"
                },
                "next_minute": {
                    "type": "integer"
                },
                "next_month": {
                    "type": "integer"
                },
                "next_year": {
                    "type": "integer"
                },
                "period": {
                    "type": "integer"
                },
                "strict": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.Spawnentry": {
            "type": "object",
            "properties": {
                "chance": {
                    "type": "integer"
                },
                "condition_value_filter": {
                    "type": "integer"
                },
                "npc_id": {
                    "type": "integer"
                },
                "npc_type": {
                    "$ref": "#/definitions/models.NpcType"
                },
                "spawngroup": {
                    "$ref": "#/definitions/models.Spawngroup"
                },
                "spawngroup_id": {
                    "type": "integer"
                }
            }
        },
        "models.Spawngroup": {
            "type": "object",
            "properties": {
                "delay": {
                    "type": "integer"
                },
                "despawn": {
                    "type": "integer"
                },
                "despawn_timer": {
                    "type": "integer"
                },
                "dist": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "max_x": {
                    "type": "number"
                },
                "max_y": {
                    "type": "number"
                },
                "min_x": {
                    "type": "number"
                },
                "min_y": {
                    "type": "number"
                },
                "mindelay": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "spawn_2": {
                    "$ref": "#/definitions/models.Spawn2"
                },
                "spawn_limit": {
                    "type": "integer"
                },
                "wp_spawns": {
                    "type": "integer"
                }
            }
        },
        "models.SpellBucket": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "spellid": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.SpellGlobal": {
            "type": "object",
            "properties": {
                "qglobal": {
                    "type": "string"
                },
                "spell_name": {
                    "type": "string"
                },
                "spellid": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.SpellsNew": {
            "type": "object",
            "properties": {
                "activated": {
                    "type": "integer"
                },
                "ae_duration": {
                    "type": "integer"
                },
                "aemaxtargets": {
                    "type": "integer"
                },
                "allowrest": {
                    "type": "integer"
                },
                "aoerange": {
                    "type": "integer"
                },
                "aura": {
                    "$ref": "#/definitions/models.Aura"
                },
                "basediff": {
                    "type": "integer"
                },
                "blocked_spells": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BlockedSpell"
                    }
                },
                "bonushate": {
                    "type": "integer"
                },
                "buffduration": {
                    "type": "integer"
                },
                "buffdurationformula": {
                    "type": "integer"
                },
                "can_mgb": {
                    "type": "integer"
                },
                "cast_not_standing": {
                    "type": "integer"
                },
                "cast_on_other": {
                    "type": "string"
                },
                "cast_on_you": {
                    "type": "string"
                },
                "cast_restriction": {
                    "type": "integer"
                },
                "cast_time": {
                    "type": "integer"
                },
                "casting_anim": {
                    "type": "integer"
                },
                "classes_1": {
                    "type": "integer"
                },
                "classes_10": {
                    "type": "integer"
                },
                "classes_11": {
                    "type": "integer"
                },
                "classes_12": {
                    "type": "integer"
                },
                "classes_13": {
                    "type": "integer"
                },
                "classes_14": {
                    "type": "integer"
                },
                "classes_15": {
                    "type": "integer"
                },
                "classes_16": {
                    "type": "integer"
                },
                "classes_2": {
                    "type": "integer"
                },
                "classes_3": {
                    "type": "integer"
                },
                "classes_4": {
                    "type": "integer"
                },
                "classes_5": {
                    "type": "integer"
                },
                "classes_6": {
                    "type": "integer"
                },
                "classes_7": {
                    "type": "integer"
                },
                "classes_8": {
                    "type": "integer"
                },
                "classes_9": {
                    "type": "integer"
                },
                "component_counts_1": {
                    "type": "integer"
                },
                "component_counts_2": {
                    "type": "integer"
                },
                "component_counts_3": {
                    "type": "integer"
                },
                "component_counts_4": {
                    "type": "integer"
                },
                "components_1": {
                    "type": "integer"
                },
                "components_2": {
                    "type": "integer"
                },
                "components_3": {
                    "type": "integer"
                },
                "components_4": {
                    "type": "integer"
                },
                "cone_start_angle": {
                    "type": "integer"
                },
                "cone_stop_angle": {
                    "type": "integer"
                },
                "damageshieldtypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Damageshieldtype"
                    }
                },
                "deities_0": {
                    "type": "integer"
                },
                "deities_1": {
                    "type": "integer"
                },
                "deities_10": {
                    "type": "integer"
                },
                "deities_11": {
                    "type": "integer"
                },
                "deities_12": {
                    "type": "integer"
                },
                "deities_13": {
                    "type": "integer"
                },
                "deities_14": {
                    "type": "integer"
                },
                "deities_15": {
                    "type": "integer"
                },
                "deities_16": {
                    "type": "integer"
                },
                "deities_2": {
                    "type": "integer"
                },
                "deities_3": {
                    "type": "integer"
                },
                "deities_4": {
                    "type": "integer"
                },
                "deities_5": {
                    "type": "integer"
                },
                "deities_6": {
                    "type": "integer"
                },
                "deities_7": {
                    "type": "integer"
                },
                "deities_8": {
                    "type": "integer"
                },
                "deities_9": {
                    "type": "integer"
                },
                "deleteable": {
                    "type": "integer"
                },
                "descnum": {
                    "type": "integer"
                },
                "disallow_sit": {
                    "type": "integer"
                },
                "dot_stacking_exempt": {
                    "type": "integer"
                },
                "effect_base_value_1": {
                    "type": "integer"
                },
                "effect_base_value_10": {
                    "type": "integer"
                },
                "effect_base_value_11": {
                    "type": "integer"
                },
                "effect_base_value_12": {
                    "type": "integer"
                },
                "effect_base_value_2": {
                    "type": "integer"
                },
                "effect_base_value_3": {
                    "type": "integer"
                },
                "effect_base_value_4": {
                    "type": "integer"
                },
                "effect_base_value_5": {
                    "type": "integer"
                },
                "effect_base_value_6": {
                    "type": "integer"
                },
                "effect_base_value_7": {
                    "type": "integer"
                },
                "effect_base_value_8": {
                    "type": "integer"
                },
                "effect_base_value_9": {
                    "type": "integer"
                },
                "effect_limit_value_1": {
                    "type": "integer"
                },
                "effect_limit_value_10": {
                    "type": "integer"
                },
                "effect_limit_value_11": {
                    "type": "integer"
                },
                "effect_limit_value_12": {
                    "type": "integer"
                },
                "effect_limit_value_2": {
                    "type": "integer"
                },
                "effect_limit_value_3": {
                    "type": "integer"
                },
                "effect_limit_value_4": {
                    "type": "integer"
                },
                "effect_limit_value_5": {
                    "type": "integer"
                },
                "effect_limit_value_6": {
                    "type": "integer"
                },
                "effect_limit_value_7": {
                    "type": "integer"
                },
                "effect_limit_value_8": {
                    "type": "integer"
                },
                "effect_limit_value_9": {
                    "type": "integer"
                },
                "effectdescnum": {
                    "type": "integer"
                },
                "effectdescnum_2": {
                    "type": "integer"
                },
                "effectid_1": {
                    "type": "integer"
                },
                "effectid_10": {
                    "type": "integer"
                },
                "effectid_11": {
                    "type": "integer"
                },
                "effectid_12": {
                    "type": "integer"
                },
                "effectid_2": {
                    "type": "integer"
                },
                "effectid_3": {
                    "type": "integer"
                },
                "effectid_4": {
                    "type": "integer"
                },
                "effectid_5": {
                    "type": "integer"
                },
                "effectid_6": {
                    "type": "integer"
                },
                "effectid_7": {
                    "type": "integer"
                },
                "effectid_8": {
                    "type": "integer"
                },
                "effectid_9": {
                    "type": "integer"
                },
                "endur_cost": {
                    "type": "integer"
                },
                "endur_timer_index": {
                    "type": "integer"
                },
                "endur_upkeep": {
                    "type": "integer"
                },
                "environment_type": {
                    "type": "integer"
                },
                "field_142": {
                    "type": "integer"
                },
                "field_143": {
                    "type": "integer"
                },
                "field_152": {
                    "type": "integer"
                },
                "field_153": {
                    "type": "integer"
                },
                "field_160": {
                    "type": "integer"
                },
                "field_163": {
                    "type": "integer"
                },
                "field_164": {
                    "type": "integer"
                },
                "field_169": {
                    "type": "integer"
                },
                "field_170": {
                    "type": "integer"
                },
                "field_171": {
                    "type": "integer"
                },
                "field_172": {
                    "type": "integer"
                },
                "field_181": {
                    "type": "integer"
                },
                "field_182": {
                    "type": "integer"
                },
                "field_198": {
                    "type": "integer"
                },
                "field_199": {
                    "type": "integer"
                },
                "field_203": {
                    "type": "integer"
                },
                "field_204": {
                    "type": "integer"
                },
                "field_206": {
                    "type": "integer"
                },
                "field_209": {
                    "type": "integer"
                },
                "field_210": {
                    "type": "integer"
                },
                "field_215": {
                    "type": "integer"
                },
                "field_216": {
                    "type": "integer"
                },
                "field_217": {
                    "type": "integer"
                },
                "field_220": {
                    "type": "integer"
                },
                "field_221": {
                    "type": "integer"
                },
                "field_222": {
                    "type": "integer"
                },
                "field_223": {
                    "type": "integer"
                },
                "field_225": {
                    "type": "integer"
                },
                "field_226": {
                    "type": "integer"
                },
                "field_232": {
                    "type": "integer"
                },
                "field_233": {
                    "type": "integer"
                },
                "field_234": {
                    "type": "integer"
                },
                "field_235": {
                    "type": "integer"
                },
                "field_236": {
                    "type": "integer"
                },
                "formula_1": {
                    "type": "integer"
                },
                "formula_10": {
                    "type": "integer"
                },
                "formula_11": {
                    "type": "integer"
                },
                "formula_12": {
                    "type": "integer"
                },
                "formula_2": {
                    "type": "integer"
                },
                "formula_3": {
                    "type": "integer"
                },
                "formula_4": {
                    "type": "integer"
                },
                "formula_5": {
                    "type": "integer"
                },
                "formula_6": {
                    "type": "integer"
                },
                "formula_7": {
                    "type": "integer"
                },
                "formula_8": {
                    "type": "integer"
                },
                "formula_9": {
                    "type": "integer"
                },
                "good_effect": {
                    "type": "integer"
                },
                "hate_added": {
                    "type": "integer"
                },
                "icon": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "in_combat": {
                    "type": "integer"
                },
                "is_discipline": {
                    "type": "integer"
                },
                "ldon_trap": {
                    "type": "integer"
                },
                "light_type": {
                    "type": "integer"
                },
                "mana": {
                    "type": "integer"
                },
                "max_1": {
                    "type": "integer"
                },
                "max_10": {
                    "type": "integer"
                },
                "max_11": {
                    "type": "integer"
                },
                "max_12": {
                    "type": "integer"
                },
                "max_2": {
                    "type": "integer"
                },
                "max_3": {
                    "type": "integer"
                },
                "max_4": {
                    "type": "integer"
                },
                "max_5": {
                    "type": "integer"
                },
                "max_6": {
                    "type": "integer"
                },
                "max_7": {
                    "type": "integer"
                },
                "max_8": {
                    "type": "integer"
                },
                "max_9": {
                    "type": "integer"
                },
                "max_dist": {
                    "type": "number"
                },
                "max_dist_mod": {
                    "type": "number"
                },
                "max_resist": {
                    "type": "integer"
                },
                "maxtargets": {
                    "type": "integer"
                },
                "memicon": {
                    "type": "integer"
                },
                "min_dist": {
                    "type": "number"
                },
                "min_dist_mod": {
                    "type": "number"
                },
                "min_range": {
                    "type": "integer"
                },
                "min_resist": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "new_icon": {
                    "type": "integer"
                },
                "nimbuseffect": {
                    "type": "integer"
                },
                "no_block": {
                    "type": "integer"
                },
                "no_partial_resist": {
                    "type": "integer"
                },
                "nodispell": {
                    "type": "integer"
                },
                "noexpend_reagent_1": {
                    "type": "integer"
                },
                "noexpend_reagent_2": {
                    "type": "integer"
                },
                "noexpend_reagent_3": {
                    "type": "integer"
                },
                "noexpend_reagent_4": {
                    "type": "integer"
                },
                "not_extendable": {
                    "type": "integer"
                },
                "npc_category": {
                    "type": "integer"
                },
                "npc_no_los": {
                    "type": "integer"
                },
                "npc_usefulness": {
                    "type": "integer"
                },
                "numhits": {
                    "type": "integer"
                },
                "numhitstype": {
                    "type": "integer"
                },
                "other_casts": {
                    "type": "string"
                },
                "outof_combat": {
                    "type": "integer"
                },
                "pcnpc_only_flag": {
                    "type": "integer"
                },
                "persistdeath": {
                    "type": "integer"
                },
                "player_1": {
                    "type": "string"
                },
                "pushback": {
                    "type": "integer"
                },
                "pushup": {
                    "type": "integer"
                },
                "pvpresistbase": {
                    "type": "integer"
                },
                "pvpresistcalc": {
                    "type": "integer"
                },
                "pvpresistcap": {
                    "type": "integer"
                },
                "range": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "recast_time": {
                    "type": "integer"
                },
                "recourse_link": {
                    "type": "integer"
                },
                "recovery_time": {
                    "type": "integer"
                },
                "reflectable": {
                    "type": "integer"
                },
                "resist_diff": {
                    "type": "integer"
                },
                "resisttype": {
                    "type": "integer"
                },
                "short_buff_box": {
                    "type": "integer"
                },
                "skill": {
                    "type": "integer"
                },
                "sneaking": {
                    "type": "integer"
                },
                "songcap": {
                    "type": "integer"
                },
                "spell_affect_index": {
                    "type": "integer"
                },
                "spell_buckets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SpellBucket"
                    }
                },
                "spell_category": {
                    "type": "integer"
                },
                "spell_fades": {
                    "type": "string"
                },
                "spell_globals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SpellGlobal"
                    }
                },
                "spellanim": {
                    "type": "integer"
                },
                "spellgroup": {
                    "type": "integer"
                },
                "suspendable": {
                    "type": "integer"
                },
                "target_anim": {
                    "type": "integer"
                },
                "targettype": {
                    "type": "integer"
                },
                "teleport_zone": {
                    "type": "string"
                },
                "time_of_day": {
                    "type": "integer"
                },
                "travel_type": {
                    "type": "integer"
                },
                "typedescnum": {
                    "type": "integer"
                },
                "uninterruptable": {
                    "type": "integer"
                },
                "viral_range": {
                    "type": "integer"
                },
                "viral_targets": {
                    "type": "integer"
                },
                "viral_timer": {
                    "type": "integer"
                },
                "you_cast": {
                    "type": "string"
                },
                "zonetype": {
                    "type": "integer"
                }
            }
        },
        "models.StartingItem": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "deityid": {
                    "type": "integer"
                },
                "gm": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "item_charges": {
                    "type": "integer"
                },
                "itemid": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "race": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "zoneid": {
                    "type": "integer"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "cashreward": {
                    "type": "integer"
                },
                "completion_emote": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "duration_code": {
                    "type": "integer"
                },
                "faction_reward": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "level_spread": {
                    "type": "integer"
                },
                "max_players": {
                    "type": "integer"
                },
                "maxlevel": {
                    "type": "integer"
                },
                "min_players": {
                    "type": "integer"
                },
                "minlevel": {
                    "type": "integer"
                },
                "repeatable": {
                    "type": "integer"
                },
                "replay_timer_seconds": {
                    "type": "integer"
                },
                "request_timer_seconds": {
                    "type": "integer"
                },
                "reward": {
                    "type": "string"
                },
                "reward_ebon_crystals": {
                    "type": "integer"
                },
                "reward_radiant_crystals": {
                    "type": "integer"
                },
                "rewardid": {
                    "type": "integer"
                },
                "rewardmethod": {
                    "type": "integer"
                },
                "task_activities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TaskActivity"
                    }
                },
                "tasksets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Taskset"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "xpreward": {
                    "type": "integer"
                }
            }
        },
        "models.TaskActivity": {
            "type": "object",
            "properties": {
                "activityid": {
                    "type": "integer"
                },
                "activitytype": {
                    "type": "integer"
                },
                "delivertonpc": {
                    "type": "integer"
                },
                "description_override": {
                    "type": "string"
                },
                "goalcount": {
                    "type": "integer"
                },
                "goalid": {
                    "type": "integer"
                },
                "goallists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Goallist"
                    }
                },
                "goalmethod": {
                    "type": "integer"
                },
                "item_list": {
                    "type": "string"
                },
                "npc_type": {
                    "$ref": "#/definitions/models.NpcType"
                },
                "optional": {
                    "type": "integer"
                },
                "skill_list": {
                    "type": "string"
                },
                "spell_list": {
                    "type": "string"
                },
                "step": {
                    "type": "integer"
                },
                "target_name": {
                    "type": "string"
                },
                "taskid": {
                    "type": "integer"
                },
                "zones": {
                    "type": "string"
                }
            }
        },
        "models.Taskset": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "taskid": {
                    "type": "integer"
                }
            }
        },
        "models.Timer": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "enable": {
                    "type": "integer"
                },
                "start": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.Title": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "class": {
                    "type": "integer"
                },
                "gender": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "max_aa_points": {
                    "type": "integer"
                },
                "max_skill_value": {
                    "type": "integer"
                },
                "min_aa_points": {
                    "type": "integer"
                },
                "min_skill_value": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "skill_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "suffix": {
                    "type": "string"
                },
                "title_set": {
                    "type": "integer"
                }
            }
        },
        "models.Trader": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "charges": {
                    "type": "integer"
                },
                "item_cost": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "serialnumber": {
                    "type": "integer"
                },
                "slot_id": {
                    "type": "integer"
                }
            }
        },
        "models.TradeskillRecipe": {
            "type": "object",
            "properties": {
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "enabled": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "must_learn": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nofail": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "quest": {
                    "type": "integer"
                },
                "replace_container": {
                    "type": "integer"
                },
                "skillneeded": {
                    "type": "integer"
                },
                "tradeskill": {
                    "type": "integer"
                },
                "trivial": {
                    "type": "integer"
                }
            }
        },
        "models.TradeskillRecipeEntry": {
            "type": "object",
            "properties": {
                "componentcount": {
                    "type": "integer"
                },
                "failcount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "iscontainer": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "recipe_id": {
                    "type": "integer"
                },
                "salvagecount": {
                    "type": "integer"
                },
                "successcount": {
                    "type": "integer"
                }
            }
        },
        "models.Trap": {
            "type": "object",
            "properties": {
                "chance": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "despawn_when_triggered": {
                    "type": "integer"
                },
                "effect": {
                    "type": "integer"
                },
                "effectvalue": {
                    "type": "integer"
                },
                "effectvalue_2": {
                    "type": "integer"
                },
                "group": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "level": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "maxzdiff": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "radius": {
                    "type": "number"
                },
                "respawn_time": {
                    "type": "integer"
                },
                "respawn_var": {
                    "type": "integer"
                },
                "skill": {
                    "type": "integer"
                },
                "triggered_number": {
                    "type": "integer"
                },
                "undetectable": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                },
                "z": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.Tribute": {
            "type": "object",
            "properties": {
                "descr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isguild": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "unknown": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "owned_connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServerDatabaseConnection"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserServerDatabaseConnection"
                    }
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "models.UserServerDatabaseConnection": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "integer"
                },
                "database_connection": {
                    "$ref": "#/definitions/models.ServerDatabaseConnection"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "server_database_connection_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.Zone": {
            "type": "object",
            "properties": {
                "canbind": {
                    "type": "integer"
                },
                "cancombat": {
                    "type": "integer"
                },
                "canlevitate": {
                    "type": "integer"
                },
                "castoutdoor": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "expansion": {
                    "type": "integer"
                },
                "fast_regen_endurance": {
                    "type": "integer"
                },
                "fast_regen_hp": {
                    "type": "integer"
                },
                "fast_regen_mana": {
                    "type": "integer"
                },
                "file_name": {
                    "type": "string"
                },
                "flag_needed": {
                    "type": "string"
                },
                "fog_blue": {
                    "type": "integer"
                },
                "fog_blue_1": {
                    "type": "integer"
                },
                "fog_blue_2": {
                    "type": "integer"
                },
                "fog_blue_3": {
                    "type": "integer"
                },
                "fog_blue_4": {
                    "type": "integer"
                },
                "fog_density": {
                    "type": "number"
                },
                "fog_green": {
                    "type": "integer"
                },
                "fog_green_1": {
                    "type": "integer"
                },
                "fog_green_2": {
                    "type": "integer"
                },
                "fog_green_3": {
                    "type": "integer"
                },
                "fog_green_4": {
                    "type": "integer"
                },
                "fog_maxclip": {
                    "type": "number"
                },
                "fog_maxclip_1": {
                    "type": "number"
                },
                "fog_maxclip_2": {
                    "type": "number"
                },
                "fog_maxclip_3": {
                    "type": "number"
                },
                "fog_maxclip_4": {
                    "type": "number"
                },
                "fog_minclip": {
                    "type": "number"
                },
                "fog_minclip_1": {
                    "type": "number"
                },
                "fog_minclip_2": {
                    "type": "number"
                },
                "fog_minclip_3": {
                    "type": "number"
                },
                "fog_minclip_4": {
                    "type": "number"
                },
                "fog_red": {
                    "type": "integer"
                },
                "fog_red_1": {
                    "type": "integer"
                },
                "fog_red_2": {
                    "type": "integer"
                },
                "fog_red_3": {
                    "type": "integer"
                },
                "fog_red_4": {
                    "type": "integer"
                },
                "graveyard_id": {
                    "type": "number"
                },
                "gravity": {
                    "type": "number"
                },
                "hotzone": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "insttype": {
                    "type": "integer"
                },
                "long_name": {
                    "type": "string"
                },
                "map_file_name": {
                    "type": "string"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "max_movement_update_range": {
                    "type": "integer"
                },
                "maxclients": {
                    "type": "integer"
                },
                "maxclip": {
                    "type": "number"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "min_level": {
                    "type": "integer"
                },
                "min_status": {
                    "type": "integer"
                },
                "minclip": {
                    "type": "number"
                },
                "note": {
                    "type": "string"
                },
                "npc_max_aggro_dist": {
                    "type": "integer"
                },
                "peqzone": {
                    "type": "integer"
                },
                "rain_chance_1": {
                    "type": "integer"
                },
                "rain_chance_2": {
                    "type": "integer"
                },
                "rain_chance_3": {
                    "type": "integer"
                },
                "rain_chance_4": {
                    "type": "integer"
                },
                "rain_duration_1": {
                    "type": "integer"
                },
                "rain_duration_2": {
                    "type": "integer"
                },
                "rain_duration_3": {
                    "type": "integer"
                },
                "rain_duration_4": {
                    "type": "integer"
                },
                "ruleset": {
                    "type": "integer"
                },
                "safe_heading": {
                    "type": "number"
                },
                "safe_x": {
                    "type": "number"
                },
                "safe_y": {
                    "type": "number"
                },
                "safe_z": {
                    "type": "number"
                },
                "short_name": {
                    "type": "string"
                },
                "shutdowndelay": {
                    "type": "integer"
                },
                "sky": {
                    "type": "integer"
                },
                "skylock": {
                    "type": "integer"
                },
                "snow_chance_1": {
                    "type": "integer"
                },
                "snow_chance_2": {
                    "type": "integer"
                },
                "snow_chance_3": {
                    "type": "integer"
                },
                "snow_chance_4": {
                    "type": "integer"
                },
                "snow_duration_1": {
                    "type": "integer"
                },
                "snow_duration_2": {
                    "type": "integer"
                },
                "snow_duration_3": {
                    "type": "integer"
                },
                "snow_duration_4": {
                    "type": "integer"
                },
                "suspendbuffs": {
                    "type": "integer"
                },
                "time_type": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                },
                "underworld": {
                    "type": "number"
                },
                "underworld_teleport_index": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "walkspeed": {
                    "type": "number"
                },
                "zone_exp_multiplier": {
                    "type": "number"
                },
                "zoneidnumber": {
                    "type": "integer"
                },
                "ztype": {
                    "type": "integer"
                }
            }
        },
        "models.ZoneFlag": {
            "type": "object",
            "properties": {
                "char_id": {
                    "type": "integer"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.ZonePoint": {
            "type": "object",
            "properties": {
                "buffer": {
                    "type": "number"
                },
                "client_version_mask": {
                    "type": "integer"
                },
                "content_flags": {
                    "type": "string"
                },
                "content_flags_disabled": {
                    "type": "string"
                },
                "heading": {
                    "type": "number"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_virtual": {
                    "type": "integer"
                },
                "max_expansion": {
                    "type": "integer"
                },
                "min_expansion": {
                    "type": "integer"
                },
                "number": {
                    "type": "integer"
                },
                "target_heading": {
                    "type": "number"
                },
                "target_instance": {
                    "type": "integer"
                },
                "target_x": {
                    "type": "number"
                },
                "target_y": {
                    "type": "number"
                },
                "target_z": {
                    "type": "number"
                },
                "target_zone_id": {
                    "type": "integer"
                },
                "version": {
                    "type": "integer"
                },
                "width": {
                    "type": "integer"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                },
                "zone": {
                    "type": "string"
                },
                "zoneinst": {
                    "type": "integer"
                }
            }
        }
    }
}