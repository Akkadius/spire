package crudcontrollers

import (
	"github.com/Akkadius/spire/internal/database"
	"github.com/Akkadius/spire/internal/http/routes"
	"github.com/Akkadius/spire/internal/models"
	"fmt"
	"github.com/labstack/echo/v4"
	"github.com/sirupsen/logrus"
	"net/http"
	"strconv"
)

type {{.EntityName}}Controller struct {
	db     *database.DatabaseResolver
	logger *logrus.Logger
}

func New{{.EntityName}}Controller(
	db *database.DatabaseResolver,
	logger *logrus.Logger,
) *{{.EntityName}}Controller {
	return &{{.EntityName}}Controller{
		db:     db,
		logger: logger,
	}
}

func (e *{{.EntityName}}Controller) Routes() []*routes.Route {
	return []*routes.Route{
		routes.RegisterRoute(http.MethodDelete, "{{.EntityNameSnake}}/:{{.EntityNameSnake}}", e.delete{{.EntityName}}, nil),
		routes.RegisterRoute(http.MethodGet, "{{.EntityNameSnake}}/:{{.EntityNameSnake}}", e.get{{.EntityName}}, nil),
		routes.RegisterRoute(http.MethodGet, "{{.EntityNameSnakePlural}}", e.list{{.EntityNamePlural}}, nil),
		routes.RegisterRoute(http.MethodPost, "{{.EntityNameSnakePlural}}/bulk", e.get{{.EntityNamePlural}}Bulk, nil),
		routes.RegisterRoute(http.MethodPatch, "{{.EntityNameSnake}}/:{{.EntityNameSnake}}", e.update{{.EntityName}}, nil),
		routes.RegisterRoute(http.MethodPut, "{{.EntityNameSnake}}", e.create{{.EntityName}}, nil),
	}
}

// list{{.EntityNamePlural}} godoc
// @Id list{{.EntityNamePlural}}
// @Summary Lists {{.EntityNamePlural}}
// @Accept json
// @Produce json
// @Tags {{.EntityName}}
// @Param includes query string false "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names {{if .RelationshipsComment}}<h4>Relationships</h4>{{.RelationshipsComment}}{{end}}"
// @Param where query string false "Filter on specific fields. Multiple conditions [.] separated Example: col_like_value.col2__val2"
// @Param whereOr query string false "Filter on specific fields (Chained ors). Multiple conditions [.] separated Example: col_like_value.col2__val2"
// @Param limit query string false "Rows to limit in response (Default: 10,000)"
// @Param orderBy query string false "Order by [field]"
// @Param orderDirection query string false "Order by field direction"
// @Param select query string false "Column names [.] separated to fetch specific fields in response"
// @Success 200 {array} models.{{.EntityName}}
// @Failure 500 {string} string "Bad query request"
// @Router /{{.EntityNameSnakePlural}} [get]
func (e *{{.EntityName}}Controller) list{{.EntityNamePlural}}(c echo.Context) error {
	var results []models.{{.EntityName}}
	err := e.db.QueryContext(models.{{.EntityName}}{}, c).Find(&results).Error
	if err != nil {
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": err})
	}

	return c.JSON(http.StatusOK, results)
}

// get{{.EntityName}} godoc
// @Id get{{.EntityName}}
// @Summary Gets {{.EntityName}}
// @Accept json
// @Produce json
// @Tags {{.EntityName}}
// @Param id path int true "Id"
// @Param includes query string false "Relationships [all] for all [number] for depth of relationships to load or [.] separated relationship names {{if .RelationshipsComment}}<h4>Relationships</h4>{{.RelationshipsComment}}{{end}}"
// @Param select query string false "Column names [.] separated to fetch specific fields in response"
// @Success 200 {array} models.{{.EntityName}}
// @Failure 404 {string} string "Entity not found"
// @Failure 500 {string} string "Cannot find param"
// @Failure 500 {string} string "Bad query request"
// @Router /{{.EntityNameSnake}}/{{"{id}"}} [get]
func (e *{{.EntityName}}Controller) get{{.EntityName}}(c echo.Context) error {
	{{.EntityNameCamel}}Id, err := strconv.Atoi(c.Param("{{.EntityNameSnake}}"))
	if err != nil {
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": "Cannot find param"})
	}

	var result models.{{.EntityName}}
	err = e.db.QueryContext(models.{{.EntityName}}{}, c).First(&result, {{.EntityNameCamel}}Id).Error
	if err != nil {
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": err})
	}

	if result.{{.KeyName}} == 0 {
		return c.JSON(http.StatusNotFound, echo.Map{"error": "Cannot find entity"})
	}

	return c.JSON(http.StatusOK, result)
}

// update{{.EntityName}} godoc
// @Id update{{.EntityName}}
// @Summary Updates {{.EntityName}}
// @Accept json
// @Produce json
// @Tags {{.EntityName}}
// @Param id path int true "Id"
// @Param {{.EntityNameSnake}} body models.{{.EntityName}} true "{{.EntityName}}"
// @Success 200 {array} models.{{.EntityName}}
// @Failure 404 {string} string "Cannot find entity"
// @Failure 500 {string} string "Error binding to entity"
// @Failure 500 {string} string "Error updating entity"
// @Router /{{.EntityNameSnake}}/{{"{id}"}} [patch]
func (e *{{.EntityName}}Controller) update{{.EntityName}}(c echo.Context) error {
	{{.EntityNameCamel}} := new(models.{{.EntityName}})
	if err := c.Bind({{.EntityNameCamel}}); err != nil {
		return c.JSON(
			http.StatusInternalServerError,
			echo.Map{"error": fmt.Sprintf("Error binding to entity: [%v]", err)},
		)
	}

    entity := models.{{.EntityName}}{}
	err := e.db.Get(models.{{.EntityName}}{}, c).Model(&models.{{.EntityName}}{}).First(&entity, {{.EntityNameCamel}}.{{.KeyName}}).Error
	if err != nil || {{.EntityNameCamel}}.{{.KeyName}} == 0 {
		return c.JSON(http.StatusNotFound, echo.Map{"error": "Cannot find entity"})
	}

	err = e.db.Get(models.{{.EntityName}}{}, c).Model(&entity).Select("*").Updates(&{{.EntityNameCamel}}).Error
	if err != nil {
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": fmt.Sprintf("Error updating entity: [%v]", err)})
	}

	return c.JSON(http.StatusOK, {{.EntityNameCamel}})
}

// create{{.EntityName}} godoc
// @Id create{{.EntityName}}
// @Summary Creates {{.EntityName}}
// @Accept json
// @Produce json
// @Param {{.EntityNameSnake}} body models.{{.EntityName}} true "{{.EntityName}}"
// @Tags {{.EntityName}}
// @Success 200 {array} models.{{.EntityName}}
// @Failure 500 {string} string "Error binding to entity"
// @Failure 500 {string} string "Error inserting entity"
// @Router /{{.EntityNameSnake}} [put]
func (e *{{.EntityName}}Controller) create{{.EntityName}}(c echo.Context) error {
	{{.EntityNameCamel}} := new(models.{{.EntityName}})
	if err := c.Bind({{.EntityNameCamel}}); err != nil {
		return c.JSON(
			http.StatusInternalServerError,
			echo.Map{"error": fmt.Sprintf("Error binding to entity: [%v]", err)},
		)
	}

	err := e.db.Get(models.{{.EntityName}}{}, c).Model(&models.{{.EntityName}}{}).Create(&{{.EntityNameCamel}}).Error
	if err != nil {
		return c.JSON(
			http.StatusInternalServerError,
			echo.Map{"error": fmt.Sprintf("Error inserting entity: [%v]", err)},
		)
	}

	return c.JSON(http.StatusOK, {{.EntityNameCamel}})
}

// delete{{.EntityName}} godoc
// @Id delete{{.EntityName}}
// @Summary Deletes {{.EntityName}}
// @Accept json
// @Produce json
// @Tags {{.EntityName}}
// @Param id path int true "Id"
// @Success 200 {string} string "Entity deleted successfully"
// @Failure 404 {string} string "Cannot find entity"
// @Failure 500 {string} string "Error binding to entity"
// @Failure 500 {string} string "Error deleting entity"
// @Router /{{.EntityNameSnake}}/{{"{id}"}} [delete]
func (e *{{.EntityName}}Controller) delete{{.EntityName}}(c echo.Context) error {
	{{.EntityNameCamel}}Id, err := strconv.Atoi(c.Param("{{.EntityNameSnake}}"))
	if err != nil {
		e.logger.Error(err)
	}

	{{.EntityNameCamel}} := new(models.{{.EntityName}})
	err = e.db.Get(models.{{.EntityName}}{}, c).Model(&models.{{.EntityName}}{}).First(&{{.EntityNameCamel}}, {{.EntityNameCamel}}Id).Error
	if err != nil || {{.EntityNameCamel}}.{{.KeyName}} == 0 {
		return c.JSON(http.StatusNotFound, echo.Map{"error": "Cannot find entity"})
	}

	err = e.db.Get(models.{{.EntityName}}{}, c).Model(&models.{{.EntityName}}{}).Delete(&{{.EntityNameCamel}}).Error
	if err != nil {
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": "Error deleting entity"})
	}

	return c.JSON(http.StatusOK, echo.Map{"success": "Entity deleted successfully"})
}

// get{{.EntityNamePlural}}Bulk godoc
// @Id get{{.EntityNamePlural}}Bulk
// @Summary Gets {{.EntityNamePlural}} in bulk
// @Accept json
// @Produce json
// @Param Body body BulkFetchByIdsGetRequest true "body"
// @Tags {{.EntityName}}
// @Success 200 {array} models.{{.EntityName}}
// @Failure 500 {string} string "Bad query request"
// @Router /{{.EntityNameSnakePlural}}/bulk [post]
func (e *{{.EntityName}}Controller) get{{.EntityNamePlural}}Bulk(c echo.Context) error {
	var results []models.{{.EntityName}}

	r := new(BulkFetchByIdsGetRequest)
	if err := c.Bind(r); err != nil {
		return c.JSON(
			http.StatusInternalServerError,
			echo.Map{"error": fmt.Sprintf("Error binding to bulk request: [%v]", err)},
		)
	}

	if len(r.IDs) == 0 {
		return c.JSON(
			http.StatusOK,
			echo.Map{"error": fmt.Sprintf("Missing request field data 'ids'")},
		)
	}

	err := e.db.QueryContext(models.{{.EntityName}}{}, c).Find(&results, r.IDs).Error
	if err != nil {
		return c.JSON(http.StatusInternalServerError, echo.Map{"error": err})
	}

	return c.JSON(http.StatusOK, results)
}
